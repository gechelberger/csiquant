/* Generated by Cython 0.29.14 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_14"
#define CYTHON_HEX_VERSION 0x001D0EF0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
  #define PyObject_Unicode             PyObject_Str
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__cyquant__qmath
#define __PYX_HAVE_API__cyquant__qmath
/* Early includes */
#include <string.h>
#include <math.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "cyquant/qmath.pyx",
  "cyquant/ctypes.pxd",
  "cyquant/quantities.pxd",
  "cyquant/dimensions.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_7cyquant_10dimensions_Dimensions;
struct __pyx_obj_7cyquant_10quantities_SIUnit;
struct __pyx_obj_7cyquant_10quantities_Quantity;
struct __pyx_t_7cyquant_6ctypes_DData;
struct __pyx_t_7cyquant_6ctypes_UData;
struct __pyx_opt_args_7cyquant_6ctypes_eq_ddata;
struct __pyx_opt_args_7cyquant_6ctypes_eq_udata;

/* "cyquant/ctypes.pxd":30
 * # begin error code convention interface
 * 
 * cdef enum Error:             # <<<<<<<<<<<<<<
 *     Success = 0
 *     DimensionMismatch = 1
 */
enum __pyx_t_7cyquant_6ctypes_Error {
  __pyx_e_7cyquant_6ctypes_Success = 0,
  __pyx_e_7cyquant_6ctypes_DimensionMismatch = 1,
  __pyx_e_7cyquant_6ctypes_ZeroDiv = 2,
  __pyx_e_7cyquant_6ctypes_Unknown = 0x80000000
};

/* "cyquant/ctypes.pxd":4
 * from libc.math cimport fabs, fmax
 * 
 * cdef struct DData:             # <<<<<<<<<<<<<<
 *     float exponents[7]
 * 
 */
struct __pyx_t_7cyquant_6ctypes_DData {
  float exponents[7];
};

/* "cyquant/ctypes.pxd":7
 *     float exponents[7]
 * 
 * cdef struct UData:             # <<<<<<<<<<<<<<
 *     double scale
 *     DData dimensions
 */
struct __pyx_t_7cyquant_6ctypes_UData {
  double scale;
  struct __pyx_t_7cyquant_6ctypes_DData dimensions;
};

/* "cyquant/ctypes.pxd":15
 *     return fabs(a - b) <= epsilon
 * 
 * cdef inline bint eq_ddata(const DData& lhs, const DData& rhs, float atol=1e-9):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     for i in range(7):
 */
struct __pyx_opt_args_7cyquant_6ctypes_eq_ddata {
  int __pyx_n;
  float atol;
};

/* "cyquant/ctypes.pxd":22
 *     return True
 * 
 * cdef inline bint eq_udata(const UData& lhs, const UData& rhs, double atol=1e-9):             # <<<<<<<<<<<<<<
 *     if fabs(lhs.scale - rhs.scale) > atol:
 *         return False
 */
struct __pyx_opt_args_7cyquant_6ctypes_eq_udata {
  int __pyx_n;
  double atol;
};
struct __pyx_opt_args_7cyquant_10quantities_6SIUnit_approx;
struct __pyx_opt_args_7cyquant_10quantities_8Quantity_round_as;
struct __pyx_opt_args_7cyquant_10quantities_8Quantity_round_to;
struct __pyx_opt_args_7cyquant_10quantities_8Quantity_r_approx;
struct __pyx_opt_args_7cyquant_10quantities_8Quantity_a_approx;
struct __pyx_opt_args_7cyquant_10quantities_unsafe_native_cmp;

/* "cyquant/quantities.pxd":17
 * 
 *     cpdef bint compatible(SIUnit self, SIUnit other)
 *     cpdef approx(SIUnit self, SIUnit other, double rtol=*, double atol=*)             # <<<<<<<<<<<<<<
 *     cpdef cmp(SIUnit self, SIUnit other)
 * 
 */
struct __pyx_opt_args_7cyquant_10quantities_6SIUnit_approx {
  int __pyx_n;
  double rtol;
  double atol;
};

/* "cyquant/quantities.pxd":33
 * 
 *     cpdef get_as(Quantity self, SIUnit units)
 *     cpdef round_as(Quantity self, SIUnit units, int places=*)             # <<<<<<<<<<<<<<
 * 
 *     cpdef Quantity cvt_to(Quantity self, SIUnit units)
 */
struct __pyx_opt_args_7cyquant_10quantities_8Quantity_round_as {
  int __pyx_n;
  int places;
};

/* "cyquant/quantities.pxd":36
 * 
 *     cpdef Quantity cvt_to(Quantity self, SIUnit units)
 *     cpdef Quantity round_to(Quantity self, SIUnit units, int places=*)             # <<<<<<<<<<<<<<
 * 
 *     #TODO: think abuot how best to handle approximation
 */
struct __pyx_opt_args_7cyquant_10quantities_8Quantity_round_to {
  int __pyx_n;
  int places;
};

/* "cyquant/quantities.pxd":40
 *     #TODO: think abuot how best to handle approximation
 * 
 *     cpdef r_approx(Quantity self, Quantity other, double rtol=*)             # <<<<<<<<<<<<<<
 *     cpdef a_approx(Quantity self, Quantity other, double atol=*)
 *     cpdef q_approx(Quantity self, Quantity other, Quantity qtol)
 */
struct __pyx_opt_args_7cyquant_10quantities_8Quantity_r_approx {
  int __pyx_n;
  double rtol;
};

/* "cyquant/quantities.pxd":41
 * 
 *     cpdef r_approx(Quantity self, Quantity other, double rtol=*)
 *     cpdef a_approx(Quantity self, Quantity other, double atol=*)             # <<<<<<<<<<<<<<
 *     cpdef q_approx(Quantity self, Quantity other, Quantity qtol)
 * 
 */
struct __pyx_opt_args_7cyquant_10quantities_8Quantity_a_approx {
  int __pyx_n;
  double atol;
};

/* "cyquant/quantities.pxd":78
 * 
 * 
 * cdef inline int unsafe_native_cmp(Quantity lhs, Quantity rhs, double eps=0):             # <<<<<<<<<<<<<<
 *     cdef double lhs_norm = lhs.c_value * lhs.udata.scale
 *     cdef double rhs_norm = rhs.c_value * rhs.udata.scale
 */
struct __pyx_opt_args_7cyquant_10quantities_unsafe_native_cmp {
  int __pyx_n;
  double eps;
};

/* "cyquant/dimensions.pxd":3
 * cimport cyquant.ctypes as c
 * 
 * cdef class Dimensions:             # <<<<<<<<<<<<<<
 *     cdef c.DData data
 * 
 */
struct __pyx_obj_7cyquant_10dimensions_Dimensions {
  PyObject_HEAD
  struct __pyx_vtabstruct_7cyquant_10dimensions_Dimensions *__pyx_vtab;
  struct __pyx_t_7cyquant_6ctypes_DData data;
};


/* "cyquant/quantities.pxd":7
 * from libc.math cimport fabs, fmax
 * 
 * cdef class SIUnit:             # <<<<<<<<<<<<<<
 *     cdef c.UData data
 * 
 */
struct __pyx_obj_7cyquant_10quantities_SIUnit {
  PyObject_HEAD
  struct __pyx_vtabstruct_7cyquant_10quantities_SIUnit *__pyx_vtab;
  struct __pyx_t_7cyquant_6ctypes_UData data;
};


/* "cyquant/quantities.pxd":23
 *     cpdef SIUnit exp(SIUnit self, double power)
 * 
 * cdef class Quantity:             # <<<<<<<<<<<<<<
 *     cdef c.UData udata
 *     cdef double c_value
 */
struct __pyx_obj_7cyquant_10quantities_Quantity {
  PyObject_HEAD
  struct __pyx_vtabstruct_7cyquant_10quantities_Quantity *__pyx_vtab;
  struct __pyx_t_7cyquant_6ctypes_UData udata;
  double c_value;
  PyObject *py_value;
};



/* "cyquant/dimensions.pxd":3
 * cimport cyquant.ctypes as c
 * 
 * cdef class Dimensions:             # <<<<<<<<<<<<<<
 *     cdef c.DData data
 * 
 */

struct __pyx_vtabstruct_7cyquant_10dimensions_Dimensions {
  int (*approx)(struct __pyx_obj_7cyquant_10dimensions_Dimensions *, struct __pyx_obj_7cyquant_10dimensions_Dimensions *, int __pyx_skip_dispatch);
  struct __pyx_obj_7cyquant_10dimensions_Dimensions *(*exp)(struct __pyx_obj_7cyquant_10dimensions_Dimensions *, double, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_7cyquant_10dimensions_Dimensions *__pyx_vtabptr_7cyquant_10dimensions_Dimensions;


/* "cyquant/quantities.pxd":7
 * from libc.math cimport fabs, fmax
 * 
 * cdef class SIUnit:             # <<<<<<<<<<<<<<
 *     cdef c.UData data
 * 
 */

struct __pyx_vtabstruct_7cyquant_10quantities_SIUnit {
  PyObject *(*is_of)(struct __pyx_obj_7cyquant_10quantities_SIUnit *, struct __pyx_obj_7cyquant_10dimensions_Dimensions *, int __pyx_skip_dispatch);
  PyObject *(*promote)(struct __pyx_obj_7cyquant_10quantities_SIUnit *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*demote)(struct __pyx_obj_7cyquant_10quantities_SIUnit *, struct __pyx_obj_7cyquant_10quantities_Quantity *, int __pyx_skip_dispatch);
  int (*compatible)(struct __pyx_obj_7cyquant_10quantities_SIUnit *, struct __pyx_obj_7cyquant_10quantities_SIUnit *, int __pyx_skip_dispatch);
  PyObject *(*approx)(struct __pyx_obj_7cyquant_10quantities_SIUnit *, struct __pyx_obj_7cyquant_10quantities_SIUnit *, int __pyx_skip_dispatch, struct __pyx_opt_args_7cyquant_10quantities_6SIUnit_approx *__pyx_optional_args);
  PyObject *(*cmp)(struct __pyx_obj_7cyquant_10quantities_SIUnit *, struct __pyx_obj_7cyquant_10quantities_SIUnit *, int __pyx_skip_dispatch);
  struct __pyx_obj_7cyquant_10quantities_SIUnit *(*exp)(struct __pyx_obj_7cyquant_10quantities_SIUnit *, double, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_7cyquant_10quantities_SIUnit *__pyx_vtabptr_7cyquant_10quantities_SIUnit;


/* "cyquant/quantities.pxd":23
 *     cpdef SIUnit exp(SIUnit self, double power)
 * 
 * cdef class Quantity:             # <<<<<<<<<<<<<<
 *     cdef c.UData udata
 *     cdef double c_value
 */

struct __pyx_vtabstruct_7cyquant_10quantities_Quantity {
  double (*rescale)(struct __pyx_obj_7cyquant_10quantities_Quantity *, struct __pyx_t_7cyquant_6ctypes_UData const &);
  PyObject *(*is_of)(struct __pyx_obj_7cyquant_10quantities_Quantity *, struct __pyx_obj_7cyquant_10dimensions_Dimensions *, int __pyx_skip_dispatch);
  PyObject *(*get_as)(struct __pyx_obj_7cyquant_10quantities_Quantity *, struct __pyx_obj_7cyquant_10quantities_SIUnit *, int __pyx_skip_dispatch);
  PyObject *(*round_as)(struct __pyx_obj_7cyquant_10quantities_Quantity *, struct __pyx_obj_7cyquant_10quantities_SIUnit *, int __pyx_skip_dispatch, struct __pyx_opt_args_7cyquant_10quantities_8Quantity_round_as *__pyx_optional_args);
  struct __pyx_obj_7cyquant_10quantities_Quantity *(*cvt_to)(struct __pyx_obj_7cyquant_10quantities_Quantity *, struct __pyx_obj_7cyquant_10quantities_SIUnit *, int __pyx_skip_dispatch);
  struct __pyx_obj_7cyquant_10quantities_Quantity *(*round_to)(struct __pyx_obj_7cyquant_10quantities_Quantity *, struct __pyx_obj_7cyquant_10quantities_SIUnit *, int __pyx_skip_dispatch, struct __pyx_opt_args_7cyquant_10quantities_8Quantity_round_to *__pyx_optional_args);
  PyObject *(*r_approx)(struct __pyx_obj_7cyquant_10quantities_Quantity *, struct __pyx_obj_7cyquant_10quantities_Quantity *, int __pyx_skip_dispatch, struct __pyx_opt_args_7cyquant_10quantities_8Quantity_r_approx *__pyx_optional_args);
  PyObject *(*a_approx)(struct __pyx_obj_7cyquant_10quantities_Quantity *, struct __pyx_obj_7cyquant_10quantities_Quantity *, int __pyx_skip_dispatch, struct __pyx_opt_args_7cyquant_10quantities_8Quantity_a_approx *__pyx_optional_args);
  PyObject *(*q_approx)(struct __pyx_obj_7cyquant_10quantities_Quantity *, struct __pyx_obj_7cyquant_10quantities_Quantity *, struct __pyx_obj_7cyquant_10quantities_Quantity *, int __pyx_skip_dispatch);
  int (*compatible)(struct __pyx_obj_7cyquant_10quantities_Quantity *, struct __pyx_obj_7cyquant_10quantities_Quantity *, int __pyx_skip_dispatch);
  struct __pyx_obj_7cyquant_10quantities_Quantity *(*exp)(struct __pyx_obj_7cyquant_10quantities_Quantity *, double, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_7cyquant_10quantities_Quantity *__pyx_vtabptr_7cyquant_10quantities_Quantity;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* pyobject_as_double.proto */
static double __Pyx__PyObject_AsDouble(PyObject* obj);
#if CYTHON_COMPILING_IN_PYPY
#define __Pyx_PyObject_AsDouble(obj)\
(likely(PyFloat_CheckExact(obj)) ? PyFloat_AS_DOUBLE(obj) :\
 likely(PyInt_CheckExact(obj)) ?\
 PyFloat_AsDouble(obj) : __Pyx__PyObject_AsDouble(obj))
#else
#define __Pyx_PyObject_AsDouble(obj)\
((likely(PyFloat_CheckExact(obj))) ?\
 PyFloat_AS_DOUBLE(obj) : __Pyx__PyObject_AsDouble(obj))
#endif

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* tp_new.proto */
#define __Pyx_tp_new(type_obj, args) __Pyx_tp_new_kwargs(type_obj, args, NULL)
static CYTHON_INLINE PyObject* __Pyx_tp_new_kwargs(PyObject* type_obj, PyObject* args, PyObject* kwargs) {
    return (PyObject*) (((PyTypeObject*)type_obj)->tp_new((PyTypeObject*)type_obj, args, kwargs));
}

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* IncludeStringH.proto */
#include <string.h>

/* py_abs.proto */
#if CYTHON_USE_PYLONG_INTERNALS
static PyObject *__Pyx_PyLong_AbsNeg(PyObject *num);
#define __Pyx_PyNumber_Absolute(x)\
    ((likely(PyLong_CheckExact(x))) ?\
         (likely(Py_SIZE(x) >= 0) ? (Py_INCREF(x), (x)) : __Pyx_PyLong_AbsNeg(x)) :\
         PyNumber_Absolute(x))
#else
#define __Pyx_PyNumber_Absolute(x)  PyNumber_Absolute(x)
#endif

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum____pyx_t_7cyquant_6ctypes_Error(enum __pyx_t_7cyquant_6ctypes_Error value);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.math' */

/* Module declarations from 'cyquant.ctypes' */
static CYTHON_INLINE int __pyx_f_7cyquant_6ctypes_eq_ddata(struct __pyx_t_7cyquant_6ctypes_DData const &, struct __pyx_t_7cyquant_6ctypes_DData const &, struct __pyx_opt_args_7cyquant_6ctypes_eq_ddata *__pyx_optional_args); /*proto*/
static CYTHON_INLINE enum __pyx_t_7cyquant_6ctypes_Error __pyx_f_7cyquant_6ctypes_mul_ddata(struct __pyx_t_7cyquant_6ctypes_DData &, struct __pyx_t_7cyquant_6ctypes_DData const &, struct __pyx_t_7cyquant_6ctypes_DData const &); /*proto*/
static CYTHON_INLINE enum __pyx_t_7cyquant_6ctypes_Error __pyx_f_7cyquant_6ctypes_div_ddata(struct __pyx_t_7cyquant_6ctypes_DData &, struct __pyx_t_7cyquant_6ctypes_DData const &, struct __pyx_t_7cyquant_6ctypes_DData const &); /*proto*/
static CYTHON_INLINE enum __pyx_t_7cyquant_6ctypes_Error __pyx_f_7cyquant_6ctypes_pow_ddata(struct __pyx_t_7cyquant_6ctypes_DData &, struct __pyx_t_7cyquant_6ctypes_DData const &, double); /*proto*/
static CYTHON_INLINE enum __pyx_t_7cyquant_6ctypes_Error __pyx_f_7cyquant_6ctypes_inv_ddata(struct __pyx_t_7cyquant_6ctypes_DData &, struct __pyx_t_7cyquant_6ctypes_DData const &); /*proto*/
static CYTHON_INLINE enum __pyx_t_7cyquant_6ctypes_Error __pyx_f_7cyquant_6ctypes_mul_udata(struct __pyx_t_7cyquant_6ctypes_UData &, struct __pyx_t_7cyquant_6ctypes_UData const &, struct __pyx_t_7cyquant_6ctypes_UData const &); /*proto*/
static CYTHON_INLINE enum __pyx_t_7cyquant_6ctypes_Error __pyx_f_7cyquant_6ctypes_div_udata(struct __pyx_t_7cyquant_6ctypes_UData &, struct __pyx_t_7cyquant_6ctypes_UData const &, struct __pyx_t_7cyquant_6ctypes_UData const &); /*proto*/
static CYTHON_INLINE enum __pyx_t_7cyquant_6ctypes_Error __pyx_f_7cyquant_6ctypes_min_udata(struct __pyx_t_7cyquant_6ctypes_UData &, struct __pyx_t_7cyquant_6ctypes_UData const &, struct __pyx_t_7cyquant_6ctypes_UData const &); /*proto*/

/* Module declarations from 'cyquant.dimensions' */
static PyTypeObject *__pyx_ptype_7cyquant_10dimensions_Dimensions = 0;

/* Module declarations from 'cyquant.quantities' */
static PyTypeObject *__pyx_ptype_7cyquant_10quantities_SIUnit = 0;
static PyTypeObject *__pyx_ptype_7cyquant_10quantities_Quantity = 0;
static CYTHON_INLINE int __pyx_f_7cyquant_10quantities_q_to_q(struct __pyx_obj_7cyquant_10quantities_Quantity *, struct __pyx_obj_7cyquant_10quantities_Quantity *); /*proto*/
static CYTHON_INLINE int __pyx_f_7cyquant_10quantities_u_to_q(struct __pyx_obj_7cyquant_10quantities_Quantity *, struct __pyx_obj_7cyquant_10quantities_SIUnit *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_7cyquant_10quantities_q_assign_mul_q(struct __pyx_obj_7cyquant_10quantities_Quantity *, struct __pyx_obj_7cyquant_10quantities_Quantity *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_7cyquant_10quantities_q_assign_mul_u(struct __pyx_obj_7cyquant_10quantities_Quantity *, struct __pyx_obj_7cyquant_10quantities_SIUnit *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_7cyquant_10quantities_q_assign_mul_d(struct __pyx_obj_7cyquant_10quantities_Quantity *, double); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_7cyquant_10quantities_q_assign_mul_o(struct __pyx_obj_7cyquant_10quantities_Quantity *, PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_7cyquant_10quantities_q_assign_div_q(struct __pyx_obj_7cyquant_10quantities_Quantity *, struct __pyx_obj_7cyquant_10quantities_Quantity *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_7cyquant_10quantities_q_assign_div_u(struct __pyx_obj_7cyquant_10quantities_Quantity *, struct __pyx_obj_7cyquant_10quantities_SIUnit *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_7cyquant_10quantities_q_assign_div_d(struct __pyx_obj_7cyquant_10quantities_Quantity *, double); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_7cyquant_10quantities_q_assign_div_o(struct __pyx_obj_7cyquant_10quantities_Quantity *, PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_7cyquant_10quantities_q_norm(struct __pyx_obj_7cyquant_10quantities_Quantity *); /*proto*/

/* Module declarations from 'libc' */

/* Module declarations from 'cyquant.qmath' */
static PyObject *__pyx_f_7cyquant_5qmath_sin(struct __pyx_obj_7cyquant_10quantities_Quantity *, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_7cyquant_5qmath_cos(struct __pyx_obj_7cyquant_10quantities_Quantity *, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_7cyquant_5qmath_sin_cos(struct __pyx_obj_7cyquant_10quantities_Quantity *, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_7cyquant_5qmath_tan(struct __pyx_obj_7cyquant_10quantities_Quantity *, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_7cyquant_5qmath_acos(struct __pyx_obj_7cyquant_10quantities_Quantity *, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_7cyquant_5qmath_asin(struct __pyx_obj_7cyquant_10quantities_Quantity *, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_7cyquant_5qmath_atan(struct __pyx_obj_7cyquant_10quantities_Quantity *, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_7cyquant_5qmath_atan2(struct __pyx_obj_7cyquant_10quantities_Quantity *, struct __pyx_obj_7cyquant_10quantities_Quantity *, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_7cyquant_5qmath_hypot(struct __pyx_obj_7cyquant_10quantities_Quantity *, struct __pyx_obj_7cyquant_10quantities_Quantity *, int __pyx_skip_dispatch); /*proto*/
#define __Pyx_MODULE_NAME "cyquant.qmath"
extern int __pyx_module_is_main_cyquant__qmath;
int __pyx_module_is_main_cyquant__qmath = 0;

/* Implementation of 'cyquant.qmath' */
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_ZeroDivisionError;
static const char __pyx_k_q[] = "q";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k__5[] = "*";
static const char __pyx_k_pi[] = "pi";
static const char __pyx_k_si[] = "si";
static const char __pyx_k_eta[] = "eta";
static const char __pyx_k_tau[] = "tau";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_unity[] = "unity";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_cyquant[] = "cyquant";
static const char __pyx_k_promote[] = "promote";
static const char __pyx_k_radians[] = "radians";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_unit_mismatch[] = "unit mismatch";
static const char __pyx_k_unknown_error[] = "unknown error ({})";
static const char __pyx_k_Unknown_Error_i[] = "Unknown Error: %i";
static const char __pyx_k_ZeroDivisionError[] = "ZeroDivisionError";
static const char __pyx_k_math_domain_error[] = "math domain error";
static const char __pyx_k_Incompatible_Units[] = "Incompatible Units";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_cyquant_quantities[] = "cyquant.quantities";
static const char __pyx_k_incompatible_units[] = "incompatible units";
static const char __pyx_k_Unknow_Error_Occurred_i[] = "Unknow Error Occurred: %i";
static const char __pyx_k_Unknown_Error_Occurred_d[] = "Unknown Error Occurred: %d";
static const char __pyx_k_Unknown_Error_Occurred_i[] = "Unknown Error Occurred: %i";
static PyObject *__pyx_kp_s_Incompatible_Units;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_kp_s_Unknow_Error_Occurred_i;
static PyObject *__pyx_kp_s_Unknown_Error_Occurred_d;
static PyObject *__pyx_kp_s_Unknown_Error_Occurred_i;
static PyObject *__pyx_kp_s_Unknown_Error_i;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_ZeroDivisionError;
static PyObject *__pyx_n_s__5;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_cyquant;
static PyObject *__pyx_n_s_cyquant_quantities;
static PyObject *__pyx_n_s_eta;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_kp_s_incompatible_units;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_kp_s_math_domain_error;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_pi;
static PyObject *__pyx_n_s_promote;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_q;
static PyObject *__pyx_n_s_radians;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_si;
static PyObject *__pyx_n_s_tau;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_kp_s_unit_mismatch;
static PyObject *__pyx_n_s_unity;
static PyObject *__pyx_kp_s_unknown_error;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_pf_7cyquant_5qmath_sin(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7cyquant_5qmath_2cos(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7cyquant_5qmath_4sin_cos(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7cyquant_5qmath_6tan(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7cyquant_5qmath_8acos(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7cyquant_5qmath_10asin(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7cyquant_5qmath_12atan(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7cyquant_5qmath_14atan2(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_y, struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_7cyquant_5qmath_16hypot(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_x, struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_y); /* proto */
static PyObject *__pyx_int_2;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
/* Late includes */

/* "cyquant/qmath.pyx":14
 * tau = pi * 2
 * 
 * cpdef sin(q.Quantity value):             # <<<<<<<<<<<<<<
 *     cdef double rads = value.get_as(si.radians)
 *     cdef double ratio = math.sin(rads)
 */

static PyObject *__pyx_pw_7cyquant_5qmath_1sin(PyObject *__pyx_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_f_7cyquant_5qmath_sin(struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_value, CYTHON_UNUSED int __pyx_skip_dispatch) {
  double __pyx_v_rads;
  double __pyx_v_ratio;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  double __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("sin", 0);

  /* "cyquant/qmath.pyx":15
 * 
 * cpdef sin(q.Quantity value):
 *     cdef double rads = value.get_as(si.radians)             # <<<<<<<<<<<<<<
 *     cdef double ratio = math.sin(rads)
 *     return si.unity.promote(ratio)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_si); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_radians); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_7cyquant_10quantities_SIUnit))))) __PYX_ERR(0, 15, __pyx_L1_error)
  __pyx_t_1 = ((struct __pyx_vtabstruct_7cyquant_10quantities_Quantity *)__pyx_v_value->__pyx_vtab)->get_as(__pyx_v_value, ((struct __pyx_obj_7cyquant_10quantities_SIUnit *)__pyx_t_2), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_rads = __pyx_t_3;

  /* "cyquant/qmath.pyx":16
 * cpdef sin(q.Quantity value):
 *     cdef double rads = value.get_as(si.radians)
 *     cdef double ratio = math.sin(rads)             # <<<<<<<<<<<<<<
 *     return si.unity.promote(ratio)
 * 
 */
  __pyx_v_ratio = sin(__pyx_v_rads);

  /* "cyquant/qmath.pyx":17
 *     cdef double rads = value.get_as(si.radians)
 *     cdef double ratio = math.sin(rads)
 *     return si.unity.promote(ratio)             # <<<<<<<<<<<<<<
 * 
 * cpdef cos(q.Quantity value):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_si); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_unity); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_promote); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_ratio); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cyquant/qmath.pyx":14
 * tau = pi * 2
 * 
 * cpdef sin(q.Quantity value):             # <<<<<<<<<<<<<<
 *     cdef double rads = value.get_as(si.radians)
 *     cdef double ratio = math.sin(rads)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cyquant.qmath.sin", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7cyquant_5qmath_1sin(PyObject *__pyx_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_pw_7cyquant_5qmath_1sin(PyObject *__pyx_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sin (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), __pyx_ptype_7cyquant_10quantities_Quantity, 1, "value", 0))) __PYX_ERR(0, 14, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cyquant_5qmath_sin(__pyx_self, ((struct __pyx_obj_7cyquant_10quantities_Quantity *)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cyquant_5qmath_sin(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("sin", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7cyquant_5qmath_sin(__pyx_v_value, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cyquant.qmath.sin", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyquant/qmath.pyx":19
 *     return si.unity.promote(ratio)
 * 
 * cpdef cos(q.Quantity value):             # <<<<<<<<<<<<<<
 *     cdef double rads = value.get_as(si.radians)
 *     cdef double ratio = math.cos(rads)
 */

static PyObject *__pyx_pw_7cyquant_5qmath_3cos(PyObject *__pyx_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_f_7cyquant_5qmath_cos(struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_value, CYTHON_UNUSED int __pyx_skip_dispatch) {
  double __pyx_v_rads;
  double __pyx_v_ratio;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  double __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("cos", 0);

  /* "cyquant/qmath.pyx":20
 * 
 * cpdef cos(q.Quantity value):
 *     cdef double rads = value.get_as(si.radians)             # <<<<<<<<<<<<<<
 *     cdef double ratio = math.cos(rads)
 *     return si.unity.promote(ratio)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_si); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_radians); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_7cyquant_10quantities_SIUnit))))) __PYX_ERR(0, 20, __pyx_L1_error)
  __pyx_t_1 = ((struct __pyx_vtabstruct_7cyquant_10quantities_Quantity *)__pyx_v_value->__pyx_vtab)->get_as(__pyx_v_value, ((struct __pyx_obj_7cyquant_10quantities_SIUnit *)__pyx_t_2), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_rads = __pyx_t_3;

  /* "cyquant/qmath.pyx":21
 * cpdef cos(q.Quantity value):
 *     cdef double rads = value.get_as(si.radians)
 *     cdef double ratio = math.cos(rads)             # <<<<<<<<<<<<<<
 *     return si.unity.promote(ratio)
 * 
 */
  __pyx_v_ratio = cos(__pyx_v_rads);

  /* "cyquant/qmath.pyx":22
 *     cdef double rads = value.get_as(si.radians)
 *     cdef double ratio = math.cos(rads)
 *     return si.unity.promote(ratio)             # <<<<<<<<<<<<<<
 * 
 * cpdef sin_cos(q.Quantity value):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_si); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_unity); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_promote); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_ratio); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cyquant/qmath.pyx":19
 *     return si.unity.promote(ratio)
 * 
 * cpdef cos(q.Quantity value):             # <<<<<<<<<<<<<<
 *     cdef double rads = value.get_as(si.radians)
 *     cdef double ratio = math.cos(rads)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cyquant.qmath.cos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7cyquant_5qmath_3cos(PyObject *__pyx_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_pw_7cyquant_5qmath_3cos(PyObject *__pyx_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cos (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), __pyx_ptype_7cyquant_10quantities_Quantity, 1, "value", 0))) __PYX_ERR(0, 19, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cyquant_5qmath_2cos(__pyx_self, ((struct __pyx_obj_7cyquant_10quantities_Quantity *)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cyquant_5qmath_2cos(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("cos", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7cyquant_5qmath_cos(__pyx_v_value, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cyquant.qmath.cos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyquant/qmath.pyx":24
 *     return si.unity.promote(ratio)
 * 
 * cpdef sin_cos(q.Quantity value):             # <<<<<<<<<<<<<<
 *     cdef double rads = value.get_as(si.radians)
 *     return (
 */

static PyObject *__pyx_pw_7cyquant_5qmath_5sin_cos(PyObject *__pyx_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_f_7cyquant_5qmath_sin_cos(struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_value, CYTHON_UNUSED int __pyx_skip_dispatch) {
  double __pyx_v_rads;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  double __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("sin_cos", 0);

  /* "cyquant/qmath.pyx":25
 * 
 * cpdef sin_cos(q.Quantity value):
 *     cdef double rads = value.get_as(si.radians)             # <<<<<<<<<<<<<<
 *     return (
 *         si.unity.promote(math.sin(rads)),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_si); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_radians); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_7cyquant_10quantities_SIUnit))))) __PYX_ERR(0, 25, __pyx_L1_error)
  __pyx_t_1 = ((struct __pyx_vtabstruct_7cyquant_10quantities_Quantity *)__pyx_v_value->__pyx_vtab)->get_as(__pyx_v_value, ((struct __pyx_obj_7cyquant_10quantities_SIUnit *)__pyx_t_2), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_rads = __pyx_t_3;

  /* "cyquant/qmath.pyx":26
 * cpdef sin_cos(q.Quantity value):
 *     cdef double rads = value.get_as(si.radians)
 *     return (             # <<<<<<<<<<<<<<
 *         si.unity.promote(math.sin(rads)),
 *         si.unity.promote(math.cos(rads))
 */
  __Pyx_XDECREF(__pyx_r);

  /* "cyquant/qmath.pyx":27
 *     cdef double rads = value.get_as(si.radians)
 *     return (
 *         si.unity.promote(math.sin(rads)),             # <<<<<<<<<<<<<<
 *         si.unity.promote(math.cos(rads))
 *     )
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_si); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_unity); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_promote); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyFloat_FromDouble(sin(__pyx_v_rads)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cyquant/qmath.pyx":28
 *     return (
 *         si.unity.promote(math.sin(rads)),
 *         si.unity.promote(math.cos(rads))             # <<<<<<<<<<<<<<
 *     )
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_si); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_unity); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_promote); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyFloat_FromDouble(cos(__pyx_v_rads)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_2 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "cyquant/qmath.pyx":27
 *     cdef double rads = value.get_as(si.radians)
 *     return (
 *         si.unity.promote(math.sin(rads)),             # <<<<<<<<<<<<<<
 *         si.unity.promote(math.cos(rads))
 *     )
 */
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "cyquant/qmath.pyx":24
 *     return si.unity.promote(ratio)
 * 
 * cpdef sin_cos(q.Quantity value):             # <<<<<<<<<<<<<<
 *     cdef double rads = value.get_as(si.radians)
 *     return (
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("cyquant.qmath.sin_cos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7cyquant_5qmath_5sin_cos(PyObject *__pyx_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_pw_7cyquant_5qmath_5sin_cos(PyObject *__pyx_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sin_cos (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), __pyx_ptype_7cyquant_10quantities_Quantity, 1, "value", 0))) __PYX_ERR(0, 24, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cyquant_5qmath_4sin_cos(__pyx_self, ((struct __pyx_obj_7cyquant_10quantities_Quantity *)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cyquant_5qmath_4sin_cos(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("sin_cos", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7cyquant_5qmath_sin_cos(__pyx_v_value, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cyquant.qmath.sin_cos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyquant/qmath.pyx":31
 *     )
 * 
 * cpdef tan(q.Quantity value):             # <<<<<<<<<<<<<<
 *     cdef double rads = value.get_as(si.radians)
 *     cdef double ratio = math.tan(rads)
 */

static PyObject *__pyx_pw_7cyquant_5qmath_7tan(PyObject *__pyx_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_f_7cyquant_5qmath_tan(struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_value, CYTHON_UNUSED int __pyx_skip_dispatch) {
  double __pyx_v_rads;
  double __pyx_v_ratio;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  double __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("tan", 0);

  /* "cyquant/qmath.pyx":32
 * 
 * cpdef tan(q.Quantity value):
 *     cdef double rads = value.get_as(si.radians)             # <<<<<<<<<<<<<<
 *     cdef double ratio = math.tan(rads)
 *     return si.unity.promote(ratio)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_si); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_radians); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_7cyquant_10quantities_SIUnit))))) __PYX_ERR(0, 32, __pyx_L1_error)
  __pyx_t_1 = ((struct __pyx_vtabstruct_7cyquant_10quantities_Quantity *)__pyx_v_value->__pyx_vtab)->get_as(__pyx_v_value, ((struct __pyx_obj_7cyquant_10quantities_SIUnit *)__pyx_t_2), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_rads = __pyx_t_3;

  /* "cyquant/qmath.pyx":33
 * cpdef tan(q.Quantity value):
 *     cdef double rads = value.get_as(si.radians)
 *     cdef double ratio = math.tan(rads)             # <<<<<<<<<<<<<<
 *     return si.unity.promote(ratio)
 * 
 */
  __pyx_v_ratio = tan(__pyx_v_rads);

  /* "cyquant/qmath.pyx":34
 *     cdef double rads = value.get_as(si.radians)
 *     cdef double ratio = math.tan(rads)
 *     return si.unity.promote(ratio)             # <<<<<<<<<<<<<<
 * 
 * cpdef acos(q.Quantity value):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_si); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_unity); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_promote); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_ratio); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cyquant/qmath.pyx":31
 *     )
 * 
 * cpdef tan(q.Quantity value):             # <<<<<<<<<<<<<<
 *     cdef double rads = value.get_as(si.radians)
 *     cdef double ratio = math.tan(rads)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cyquant.qmath.tan", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7cyquant_5qmath_7tan(PyObject *__pyx_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_pw_7cyquant_5qmath_7tan(PyObject *__pyx_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("tan (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), __pyx_ptype_7cyquant_10quantities_Quantity, 1, "value", 0))) __PYX_ERR(0, 31, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cyquant_5qmath_6tan(__pyx_self, ((struct __pyx_obj_7cyquant_10quantities_Quantity *)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cyquant_5qmath_6tan(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("tan", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7cyquant_5qmath_tan(__pyx_v_value, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cyquant.qmath.tan", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyquant/qmath.pyx":36
 *     return si.unity.promote(ratio)
 * 
 * cpdef acos(q.Quantity value):             # <<<<<<<<<<<<<<
 *     cdef double ratio = value.get_as(si.unity)
 *     if ratio < -1 or ratio > 1:
 */

static PyObject *__pyx_pw_7cyquant_5qmath_9acos(PyObject *__pyx_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_f_7cyquant_5qmath_acos(struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_value, CYTHON_UNUSED int __pyx_skip_dispatch) {
  double __pyx_v_ratio;
  double __pyx_v_rads;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  double __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("acos", 0);

  /* "cyquant/qmath.pyx":37
 * 
 * cpdef acos(q.Quantity value):
 *     cdef double ratio = value.get_as(si.unity)             # <<<<<<<<<<<<<<
 *     if ratio < -1 or ratio > 1:
 *         raise ValueError("math domain error")
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_si); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_unity); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_7cyquant_10quantities_SIUnit))))) __PYX_ERR(0, 37, __pyx_L1_error)
  __pyx_t_1 = ((struct __pyx_vtabstruct_7cyquant_10quantities_Quantity *)__pyx_v_value->__pyx_vtab)->get_as(__pyx_v_value, ((struct __pyx_obj_7cyquant_10quantities_SIUnit *)__pyx_t_2), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_ratio = __pyx_t_3;

  /* "cyquant/qmath.pyx":38
 * cpdef acos(q.Quantity value):
 *     cdef double ratio = value.get_as(si.unity)
 *     if ratio < -1 or ratio > 1:             # <<<<<<<<<<<<<<
 *         raise ValueError("math domain error")
 *     cdef double rads = math.acos(ratio)
 */
  __pyx_t_5 = ((__pyx_v_ratio < -1.0) != 0);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_4 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = ((__pyx_v_ratio > 1.0) != 0);
  __pyx_t_4 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_4)) {

    /* "cyquant/qmath.pyx":39
 *     cdef double ratio = value.get_as(si.unity)
 *     if ratio < -1 or ratio > 1:
 *         raise ValueError("math domain error")             # <<<<<<<<<<<<<<
 *     cdef double rads = math.acos(ratio)
 *     return si.radians.promote(rads)
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 39, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 39, __pyx_L1_error)

    /* "cyquant/qmath.pyx":38
 * cpdef acos(q.Quantity value):
 *     cdef double ratio = value.get_as(si.unity)
 *     if ratio < -1 or ratio > 1:             # <<<<<<<<<<<<<<
 *         raise ValueError("math domain error")
 *     cdef double rads = math.acos(ratio)
 */
  }

  /* "cyquant/qmath.pyx":40
 *     if ratio < -1 or ratio > 1:
 *         raise ValueError("math domain error")
 *     cdef double rads = math.acos(ratio)             # <<<<<<<<<<<<<<
 *     return si.radians.promote(rads)
 * 
 */
  __pyx_v_rads = acos(__pyx_v_ratio);

  /* "cyquant/qmath.pyx":41
 *         raise ValueError("math domain error")
 *     cdef double rads = math.acos(ratio)
 *     return si.radians.promote(rads)             # <<<<<<<<<<<<<<
 * 
 * cpdef asin(q.Quantity value):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_si); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_radians); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_promote); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_rads); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_7, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cyquant/qmath.pyx":36
 *     return si.unity.promote(ratio)
 * 
 * cpdef acos(q.Quantity value):             # <<<<<<<<<<<<<<
 *     cdef double ratio = value.get_as(si.unity)
 *     if ratio < -1 or ratio > 1:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("cyquant.qmath.acos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7cyquant_5qmath_9acos(PyObject *__pyx_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_pw_7cyquant_5qmath_9acos(PyObject *__pyx_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("acos (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), __pyx_ptype_7cyquant_10quantities_Quantity, 1, "value", 0))) __PYX_ERR(0, 36, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cyquant_5qmath_8acos(__pyx_self, ((struct __pyx_obj_7cyquant_10quantities_Quantity *)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cyquant_5qmath_8acos(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("acos", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7cyquant_5qmath_acos(__pyx_v_value, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cyquant.qmath.acos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyquant/qmath.pyx":43
 *     return si.radians.promote(rads)
 * 
 * cpdef asin(q.Quantity value):             # <<<<<<<<<<<<<<
 *     cdef double ratio = value.get_as(si.unity)
 *     if ratio < -1 or ratio > 1:
 */

static PyObject *__pyx_pw_7cyquant_5qmath_11asin(PyObject *__pyx_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_f_7cyquant_5qmath_asin(struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_value, CYTHON_UNUSED int __pyx_skip_dispatch) {
  double __pyx_v_ratio;
  double __pyx_v_rads;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  double __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("asin", 0);

  /* "cyquant/qmath.pyx":44
 * 
 * cpdef asin(q.Quantity value):
 *     cdef double ratio = value.get_as(si.unity)             # <<<<<<<<<<<<<<
 *     if ratio < -1 or ratio > 1:
 *         raise ValueError("math domain error")
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_si); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_unity); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_7cyquant_10quantities_SIUnit))))) __PYX_ERR(0, 44, __pyx_L1_error)
  __pyx_t_1 = ((struct __pyx_vtabstruct_7cyquant_10quantities_Quantity *)__pyx_v_value->__pyx_vtab)->get_as(__pyx_v_value, ((struct __pyx_obj_7cyquant_10quantities_SIUnit *)__pyx_t_2), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_ratio = __pyx_t_3;

  /* "cyquant/qmath.pyx":45
 * cpdef asin(q.Quantity value):
 *     cdef double ratio = value.get_as(si.unity)
 *     if ratio < -1 or ratio > 1:             # <<<<<<<<<<<<<<
 *         raise ValueError("math domain error")
 *     cdef double rads = math.asin(ratio)
 */
  __pyx_t_5 = ((__pyx_v_ratio < -1.0) != 0);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_4 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = ((__pyx_v_ratio > 1.0) != 0);
  __pyx_t_4 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_4)) {

    /* "cyquant/qmath.pyx":46
 *     cdef double ratio = value.get_as(si.unity)
 *     if ratio < -1 or ratio > 1:
 *         raise ValueError("math domain error")             # <<<<<<<<<<<<<<
 *     cdef double rads = math.asin(ratio)
 *     return si.radians.promote(rads)
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 46, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 46, __pyx_L1_error)

    /* "cyquant/qmath.pyx":45
 * cpdef asin(q.Quantity value):
 *     cdef double ratio = value.get_as(si.unity)
 *     if ratio < -1 or ratio > 1:             # <<<<<<<<<<<<<<
 *         raise ValueError("math domain error")
 *     cdef double rads = math.asin(ratio)
 */
  }

  /* "cyquant/qmath.pyx":47
 *     if ratio < -1 or ratio > 1:
 *         raise ValueError("math domain error")
 *     cdef double rads = math.asin(ratio)             # <<<<<<<<<<<<<<
 *     return si.radians.promote(rads)
 * 
 */
  __pyx_v_rads = asin(__pyx_v_ratio);

  /* "cyquant/qmath.pyx":48
 *         raise ValueError("math domain error")
 *     cdef double rads = math.asin(ratio)
 *     return si.radians.promote(rads)             # <<<<<<<<<<<<<<
 * 
 * cpdef atan(q.Quantity value):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_si); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_radians); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_promote); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_rads); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_7, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cyquant/qmath.pyx":43
 *     return si.radians.promote(rads)
 * 
 * cpdef asin(q.Quantity value):             # <<<<<<<<<<<<<<
 *     cdef double ratio = value.get_as(si.unity)
 *     if ratio < -1 or ratio > 1:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("cyquant.qmath.asin", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7cyquant_5qmath_11asin(PyObject *__pyx_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_pw_7cyquant_5qmath_11asin(PyObject *__pyx_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("asin (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), __pyx_ptype_7cyquant_10quantities_Quantity, 1, "value", 0))) __PYX_ERR(0, 43, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cyquant_5qmath_10asin(__pyx_self, ((struct __pyx_obj_7cyquant_10quantities_Quantity *)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cyquant_5qmath_10asin(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("asin", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7cyquant_5qmath_asin(__pyx_v_value, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cyquant.qmath.asin", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyquant/qmath.pyx":50
 *     return si.radians.promote(rads)
 * 
 * cpdef atan(q.Quantity value):             # <<<<<<<<<<<<<<
 *     cdef double ratio = value.get_as(si.unity)
 *     cdef double rads = math.atan(ratio)
 */

static PyObject *__pyx_pw_7cyquant_5qmath_13atan(PyObject *__pyx_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_f_7cyquant_5qmath_atan(struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_value, CYTHON_UNUSED int __pyx_skip_dispatch) {
  double __pyx_v_ratio;
  double __pyx_v_rads;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  double __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("atan", 0);

  /* "cyquant/qmath.pyx":51
 * 
 * cpdef atan(q.Quantity value):
 *     cdef double ratio = value.get_as(si.unity)             # <<<<<<<<<<<<<<
 *     cdef double rads = math.atan(ratio)
 *     return si.radians.promote(rads)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_si); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_unity); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_7cyquant_10quantities_SIUnit))))) __PYX_ERR(0, 51, __pyx_L1_error)
  __pyx_t_1 = ((struct __pyx_vtabstruct_7cyquant_10quantities_Quantity *)__pyx_v_value->__pyx_vtab)->get_as(__pyx_v_value, ((struct __pyx_obj_7cyquant_10quantities_SIUnit *)__pyx_t_2), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_ratio = __pyx_t_3;

  /* "cyquant/qmath.pyx":52
 * cpdef atan(q.Quantity value):
 *     cdef double ratio = value.get_as(si.unity)
 *     cdef double rads = math.atan(ratio)             # <<<<<<<<<<<<<<
 *     return si.radians.promote(rads)
 * 
 */
  __pyx_v_rads = atan(__pyx_v_ratio);

  /* "cyquant/qmath.pyx":53
 *     cdef double ratio = value.get_as(si.unity)
 *     cdef double rads = math.atan(ratio)
 *     return si.radians.promote(rads)             # <<<<<<<<<<<<<<
 * 
 * cpdef atan2(q.Quantity y, q.Quantity x):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_si); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_radians); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_promote); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_rads); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cyquant/qmath.pyx":50
 *     return si.radians.promote(rads)
 * 
 * cpdef atan(q.Quantity value):             # <<<<<<<<<<<<<<
 *     cdef double ratio = value.get_as(si.unity)
 *     cdef double rads = math.atan(ratio)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cyquant.qmath.atan", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7cyquant_5qmath_13atan(PyObject *__pyx_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_pw_7cyquant_5qmath_13atan(PyObject *__pyx_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("atan (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), __pyx_ptype_7cyquant_10quantities_Quantity, 1, "value", 0))) __PYX_ERR(0, 50, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cyquant_5qmath_12atan(__pyx_self, ((struct __pyx_obj_7cyquant_10quantities_Quantity *)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cyquant_5qmath_12atan(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("atan", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7cyquant_5qmath_atan(__pyx_v_value, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cyquant.qmath.atan", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyquant/qmath.pyx":55
 *     return si.radians.promote(rads)
 * 
 * cpdef atan2(q.Quantity y, q.Quantity x):             # <<<<<<<<<<<<<<
 *     cdef int error_code
 *     cdef c.UData norm_udata
 */

static PyObject *__pyx_pw_7cyquant_5qmath_15atan2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_7cyquant_5qmath_atan2(struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_y, struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_x, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_error_code;
  struct __pyx_t_7cyquant_6ctypes_UData __pyx_v_norm_udata;
  double __pyx_v_x_norm;
  double __pyx_v_y_norm;
  double __pyx_v_rads;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  double __pyx_t_3;
  double __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("atan2", 0);

  /* "cyquant/qmath.pyx":60
 *     cdef double x_norm, y_norm, rads
 * 
 *     error_code = c.min_udata(norm_udata, y.udata, x.udata)             # <<<<<<<<<<<<<<
 * 
 *     if error_code == c.Success:
 */
  __pyx_v_error_code = __pyx_f_7cyquant_6ctypes_min_udata(__pyx_v_norm_udata, __pyx_v_y->udata, __pyx_v_x->udata);

  /* "cyquant/qmath.pyx":62
 *     error_code = c.min_udata(norm_udata, y.udata, x.udata)
 * 
 *     if error_code == c.Success:             # <<<<<<<<<<<<<<
 *         x_norm = x.rescale(norm_udata) * (x.c_value if x.py_value is None else float(x.py_value))
 *         y_norm = y.rescale(norm_udata) * (y.c_value if y.py_value is None else float(y.py_value))
 */
  __pyx_t_1 = ((__pyx_v_error_code == __pyx_e_7cyquant_6ctypes_Success) != 0);
  if (__pyx_t_1) {

    /* "cyquant/qmath.pyx":63
 * 
 *     if error_code == c.Success:
 *         x_norm = x.rescale(norm_udata) * (x.c_value if x.py_value is None else float(x.py_value))             # <<<<<<<<<<<<<<
 *         y_norm = y.rescale(norm_udata) * (y.c_value if y.py_value is None else float(y.py_value))
 * 
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_7cyquant_10quantities_Quantity *)__pyx_v_x->__pyx_vtab)->rescale(__pyx_v_x, __pyx_v_norm_udata); if (unlikely(__pyx_t_2 == ((double)(-1.0)))) __PYX_ERR(0, 63, __pyx_L1_error)
    __pyx_t_1 = (__pyx_v_x->py_value == Py_None);
    if ((__pyx_t_1 != 0)) {
      __pyx_t_3 = __pyx_v_x->c_value;
    } else {
      __pyx_t_4 = __Pyx_PyObject_AsDouble(__pyx_v_x->py_value); if (unlikely(__pyx_t_4 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 63, __pyx_L1_error)
      __pyx_t_3 = __pyx_t_4;
    }
    __pyx_v_x_norm = (__pyx_t_2 * __pyx_t_3);

    /* "cyquant/qmath.pyx":64
 *     if error_code == c.Success:
 *         x_norm = x.rescale(norm_udata) * (x.c_value if x.py_value is None else float(x.py_value))
 *         y_norm = y.rescale(norm_udata) * (y.c_value if y.py_value is None else float(y.py_value))             # <<<<<<<<<<<<<<
 * 
 *         if x_norm == 0 and y_norm == 0:
 */
    __pyx_t_3 = ((struct __pyx_vtabstruct_7cyquant_10quantities_Quantity *)__pyx_v_y->__pyx_vtab)->rescale(__pyx_v_y, __pyx_v_norm_udata); if (unlikely(__pyx_t_3 == ((double)(-1.0)))) __PYX_ERR(0, 64, __pyx_L1_error)
    __pyx_t_1 = (__pyx_v_y->py_value == Py_None);
    if ((__pyx_t_1 != 0)) {
      __pyx_t_2 = __pyx_v_y->c_value;
    } else {
      __pyx_t_4 = __Pyx_PyObject_AsDouble(__pyx_v_y->py_value); if (unlikely(__pyx_t_4 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 64, __pyx_L1_error)
      __pyx_t_2 = __pyx_t_4;
    }
    __pyx_v_y_norm = (__pyx_t_3 * __pyx_t_2);

    /* "cyquant/qmath.pyx":66
 *         y_norm = y.rescale(norm_udata) * (y.c_value if y.py_value is None else float(y.py_value))
 * 
 *         if x_norm == 0 and y_norm == 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("math domain error")
 * 
 */
    __pyx_t_5 = ((__pyx_v_x_norm == 0.0) != 0);
    if (__pyx_t_5) {
    } else {
      __pyx_t_1 = __pyx_t_5;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_5 = ((__pyx_v_y_norm == 0.0) != 0);
    __pyx_t_1 = __pyx_t_5;
    __pyx_L5_bool_binop_done:;
    if (unlikely(__pyx_t_1)) {

      /* "cyquant/qmath.pyx":67
 * 
 *         if x_norm == 0 and y_norm == 0:
 *             raise ValueError("math domain error")             # <<<<<<<<<<<<<<
 * 
 *         rads = math.atan2(y_norm, x_norm)
 */
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 67, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(0, 67, __pyx_L1_error)

      /* "cyquant/qmath.pyx":66
 *         y_norm = y.rescale(norm_udata) * (y.c_value if y.py_value is None else float(y.py_value))
 * 
 *         if x_norm == 0 and y_norm == 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("math domain error")
 * 
 */
    }

    /* "cyquant/qmath.pyx":69
 *             raise ValueError("math domain error")
 * 
 *         rads = math.atan2(y_norm, x_norm)             # <<<<<<<<<<<<<<
 *         return si.radians.promote(rads)
 * 
 */
    __pyx_v_rads = atan2(__pyx_v_y_norm, __pyx_v_x_norm);

    /* "cyquant/qmath.pyx":70
 * 
 *         rads = math.atan2(y_norm, x_norm)
 *         return si.radians.promote(rads)             # <<<<<<<<<<<<<<
 * 
 *     if error_code == c.DimensionMismatch:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_si); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 70, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_radians); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 70, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_promote); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 70, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyFloat_FromDouble(__pyx_v_rads); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 70, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_6 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_9, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_8);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 70, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "cyquant/qmath.pyx":62
 *     error_code = c.min_udata(norm_udata, y.udata, x.udata)
 * 
 *     if error_code == c.Success:             # <<<<<<<<<<<<<<
 *         x_norm = x.rescale(norm_udata) * (x.c_value if x.py_value is None else float(x.py_value))
 *         y_norm = y.rescale(norm_udata) * (y.c_value if y.py_value is None else float(y.py_value))
 */
  }

  /* "cyquant/qmath.pyx":72
 *         return si.radians.promote(rads)
 * 
 *     if error_code == c.DimensionMismatch:             # <<<<<<<<<<<<<<
 *         raise ValueError("unit mismatch")
 * 
 */
  __pyx_t_1 = ((__pyx_v_error_code == __pyx_e_7cyquant_6ctypes_DimensionMismatch) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "cyquant/qmath.pyx":73
 * 
 *     if error_code == c.DimensionMismatch:
 *         raise ValueError("unit mismatch")             # <<<<<<<<<<<<<<
 * 
 *     raise RuntimeError("Unknown Error Occurred: %i" % error_code)
 */
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 73, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 73, __pyx_L1_error)

    /* "cyquant/qmath.pyx":72
 *         return si.radians.promote(rads)
 * 
 *     if error_code == c.DimensionMismatch:             # <<<<<<<<<<<<<<
 *         raise ValueError("unit mismatch")
 * 
 */
  }

  /* "cyquant/qmath.pyx":75
 *         raise ValueError("unit mismatch")
 * 
 *     raise RuntimeError("Unknown Error Occurred: %i" % error_code)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_error_code); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyString_Format(__pyx_kp_s_Unknown_Error_Occurred_i, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_RuntimeError, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_Raise(__pyx_t_6, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __PYX_ERR(0, 75, __pyx_L1_error)

  /* "cyquant/qmath.pyx":55
 *     return si.radians.promote(rads)
 * 
 * cpdef atan2(q.Quantity y, q.Quantity x):             # <<<<<<<<<<<<<<
 *     cdef int error_code
 *     cdef c.UData norm_udata
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("cyquant.qmath.atan2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7cyquant_5qmath_15atan2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7cyquant_5qmath_15atan2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_y = 0;
  struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_x = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("atan2 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_y,&__pyx_n_s_x,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("atan2", 1, 2, 2, 1); __PYX_ERR(0, 55, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "atan2") < 0)) __PYX_ERR(0, 55, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_y = ((struct __pyx_obj_7cyquant_10quantities_Quantity *)values[0]);
    __pyx_v_x = ((struct __pyx_obj_7cyquant_10quantities_Quantity *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("atan2", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 55, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cyquant.qmath.atan2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_y), __pyx_ptype_7cyquant_10quantities_Quantity, 1, "y", 0))) __PYX_ERR(0, 55, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_7cyquant_10quantities_Quantity, 1, "x", 0))) __PYX_ERR(0, 55, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cyquant_5qmath_14atan2(__pyx_self, __pyx_v_y, __pyx_v_x);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cyquant_5qmath_14atan2(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_y, struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("atan2", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7cyquant_5qmath_atan2(__pyx_v_y, __pyx_v_x, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cyquant.qmath.atan2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyquant/qmath.pyx":79
 * 
 * 
 * cpdef hypot(q.Quantity x, q.Quantity y):             # <<<<<<<<<<<<<<
 *     cdef q.Quantity ret = q.Quantity.__new__(q.Quantity)
 *     cdef int error_code
 */

static PyObject *__pyx_pw_7cyquant_5qmath_17hypot(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_7cyquant_5qmath_hypot(struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_x, struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_y, CYTHON_UNUSED int __pyx_skip_dispatch) {
  struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_ret = 0;
  int __pyx_v_error_code;
  double __pyx_v_x_norm;
  double __pyx_v_y_norm;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  double __pyx_t_3;
  double __pyx_t_4;
  double __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("hypot", 0);

  /* "cyquant/qmath.pyx":80
 * 
 * cpdef hypot(q.Quantity x, q.Quantity y):
 *     cdef q.Quantity ret = q.Quantity.__new__(q.Quantity)             # <<<<<<<<<<<<<<
 *     cdef int error_code
 *     cdef double x_norm, y_norm
 */
  __pyx_t_1 = __Pyx_tp_new(((PyObject *)__pyx_ptype_7cyquant_10quantities_Quantity), __pyx_empty_tuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_7cyquant_10quantities_Quantity)))) __PYX_ERR(0, 80, __pyx_L1_error)
  __pyx_v_ret = ((struct __pyx_obj_7cyquant_10quantities_Quantity *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cyquant/qmath.pyx":84
 *     cdef double x_norm, y_norm
 * 
 *     error_code = c.min_udata(ret.udata, y.udata, x.udata)             # <<<<<<<<<<<<<<
 * 
 *     if error_code == c.Success:
 */
  __pyx_v_error_code = __pyx_f_7cyquant_6ctypes_min_udata(__pyx_v_ret->udata, __pyx_v_y->udata, __pyx_v_x->udata);

  /* "cyquant/qmath.pyx":86
 *     error_code = c.min_udata(ret.udata, y.udata, x.udata)
 * 
 *     if error_code == c.Success:             # <<<<<<<<<<<<<<
 *         x_norm = x.rescale(ret.udata) * (x.c_value if x.py_value is None else float(x.py_value))
 *         y_norm = y.rescale(ret.udata) * (y.c_value if y.py_value is None else float(y.py_value))
 */
  __pyx_t_2 = ((__pyx_v_error_code == __pyx_e_7cyquant_6ctypes_Success) != 0);
  if (__pyx_t_2) {

    /* "cyquant/qmath.pyx":87
 * 
 *     if error_code == c.Success:
 *         x_norm = x.rescale(ret.udata) * (x.c_value if x.py_value is None else float(x.py_value))             # <<<<<<<<<<<<<<
 *         y_norm = y.rescale(ret.udata) * (y.c_value if y.py_value is None else float(y.py_value))
 * 
 */
    __pyx_t_3 = ((struct __pyx_vtabstruct_7cyquant_10quantities_Quantity *)__pyx_v_x->__pyx_vtab)->rescale(__pyx_v_x, __pyx_v_ret->udata); if (unlikely(__pyx_t_3 == ((double)(-1.0)))) __PYX_ERR(0, 87, __pyx_L1_error)
    __pyx_t_2 = (__pyx_v_x->py_value == Py_None);
    if ((__pyx_t_2 != 0)) {
      __pyx_t_4 = __pyx_v_x->c_value;
    } else {
      __pyx_t_5 = __Pyx_PyObject_AsDouble(__pyx_v_x->py_value); if (unlikely(__pyx_t_5 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 87, __pyx_L1_error)
      __pyx_t_4 = __pyx_t_5;
    }
    __pyx_v_x_norm = (__pyx_t_3 * __pyx_t_4);

    /* "cyquant/qmath.pyx":88
 *     if error_code == c.Success:
 *         x_norm = x.rescale(ret.udata) * (x.c_value if x.py_value is None else float(x.py_value))
 *         y_norm = y.rescale(ret.udata) * (y.c_value if y.py_value is None else float(y.py_value))             # <<<<<<<<<<<<<<
 * 
 *         ret.py_value = None
 */
    __pyx_t_4 = ((struct __pyx_vtabstruct_7cyquant_10quantities_Quantity *)__pyx_v_y->__pyx_vtab)->rescale(__pyx_v_y, __pyx_v_ret->udata); if (unlikely(__pyx_t_4 == ((double)(-1.0)))) __PYX_ERR(0, 88, __pyx_L1_error)
    __pyx_t_2 = (__pyx_v_y->py_value == Py_None);
    if ((__pyx_t_2 != 0)) {
      __pyx_t_3 = __pyx_v_y->c_value;
    } else {
      __pyx_t_5 = __Pyx_PyObject_AsDouble(__pyx_v_y->py_value); if (unlikely(__pyx_t_5 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 88, __pyx_L1_error)
      __pyx_t_3 = __pyx_t_5;
    }
    __pyx_v_y_norm = (__pyx_t_4 * __pyx_t_3);

    /* "cyquant/qmath.pyx":90
 *         y_norm = y.rescale(ret.udata) * (y.c_value if y.py_value is None else float(y.py_value))
 * 
 *         ret.py_value = None             # <<<<<<<<<<<<<<
 *         ret.c_value = math.hypot(x_norm, y_norm)
 *         return ret
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_ret->py_value);
    __Pyx_DECREF(__pyx_v_ret->py_value);
    __pyx_v_ret->py_value = Py_None;

    /* "cyquant/qmath.pyx":91
 * 
 *         ret.py_value = None
 *         ret.c_value = math.hypot(x_norm, y_norm)             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
    __pyx_v_ret->c_value = hypot(__pyx_v_x_norm, __pyx_v_y_norm);

    /* "cyquant/qmath.pyx":92
 *         ret.py_value = None
 *         ret.c_value = math.hypot(x_norm, y_norm)
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     if error_code == c.DimensionMismatch:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_ret));
    __pyx_r = ((PyObject *)__pyx_v_ret);
    goto __pyx_L0;

    /* "cyquant/qmath.pyx":86
 *     error_code = c.min_udata(ret.udata, y.udata, x.udata)
 * 
 *     if error_code == c.Success:             # <<<<<<<<<<<<<<
 *         x_norm = x.rescale(ret.udata) * (x.c_value if x.py_value is None else float(x.py_value))
 *         y_norm = y.rescale(ret.udata) * (y.c_value if y.py_value is None else float(y.py_value))
 */
  }

  /* "cyquant/qmath.pyx":94
 *         return ret
 * 
 *     if error_code == c.DimensionMismatch:             # <<<<<<<<<<<<<<
 *         raise ValueError("unit mismatch")
 * 
 */
  __pyx_t_2 = ((__pyx_v_error_code == __pyx_e_7cyquant_6ctypes_DimensionMismatch) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "cyquant/qmath.pyx":95
 * 
 *     if error_code == c.DimensionMismatch:
 *         raise ValueError("unit mismatch")             # <<<<<<<<<<<<<<
 * 
 *     raise RuntimeError("Unknown Error Occurred: %i" % error_code)
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 95, __pyx_L1_error)

    /* "cyquant/qmath.pyx":94
 *         return ret
 * 
 *     if error_code == c.DimensionMismatch:             # <<<<<<<<<<<<<<
 *         raise ValueError("unit mismatch")
 * 
 */
  }

  /* "cyquant/qmath.pyx":97
 *         raise ValueError("unit mismatch")
 * 
 *     raise RuntimeError("Unknown Error Occurred: %i" % error_code)             # <<<<<<<<<<<<<<
 * 
 * #todo: exp/log/etc
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_error_code); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_Unknown_Error_Occurred_i, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_RuntimeError, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 97, __pyx_L1_error)

  /* "cyquant/qmath.pyx":79
 * 
 * 
 * cpdef hypot(q.Quantity x, q.Quantity y):             # <<<<<<<<<<<<<<
 *     cdef q.Quantity ret = q.Quantity.__new__(q.Quantity)
 *     cdef int error_code
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("cyquant.qmath.hypot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7cyquant_5qmath_17hypot(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7cyquant_5qmath_17hypot(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_x = 0;
  struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_y = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("hypot (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("hypot", 1, 2, 2, 1); __PYX_ERR(0, 79, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "hypot") < 0)) __PYX_ERR(0, 79, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = ((struct __pyx_obj_7cyquant_10quantities_Quantity *)values[0]);
    __pyx_v_y = ((struct __pyx_obj_7cyquant_10quantities_Quantity *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("hypot", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 79, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cyquant.qmath.hypot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_7cyquant_10quantities_Quantity, 1, "x", 0))) __PYX_ERR(0, 79, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_y), __pyx_ptype_7cyquant_10quantities_Quantity, 1, "y", 0))) __PYX_ERR(0, 79, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cyquant_5qmath_16hypot(__pyx_self, __pyx_v_x, __pyx_v_y);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cyquant_5qmath_16hypot(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_x, struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_y) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("hypot", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7cyquant_5qmath_hypot(__pyx_v_x, __pyx_v_y, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cyquant.qmath.hypot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyquant/ctypes.pxd":11
 *     DData dimensions
 * 
 * cdef inline bint fapprox(double a, double b, double rtol, double atol):             # <<<<<<<<<<<<<<
 *     cdef double epsilon = fabs(fmax(atol, rtol * fmax(1, fmax(a, b))))
 *     return fabs(a - b) <= epsilon
 */

static CYTHON_INLINE int __pyx_f_7cyquant_6ctypes_fapprox(double __pyx_v_a, double __pyx_v_b, double __pyx_v_rtol, double __pyx_v_atol) {
  double __pyx_v_epsilon;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fapprox", 0);

  /* "cyquant/ctypes.pxd":12
 * 
 * cdef inline bint fapprox(double a, double b, double rtol, double atol):
 *     cdef double epsilon = fabs(fmax(atol, rtol * fmax(1, fmax(a, b))))             # <<<<<<<<<<<<<<
 *     return fabs(a - b) <= epsilon
 * 
 */
  __pyx_v_epsilon = fabs(fmax(__pyx_v_atol, (__pyx_v_rtol * fmax(1.0, fmax(__pyx_v_a, __pyx_v_b)))));

  /* "cyquant/ctypes.pxd":13
 * cdef inline bint fapprox(double a, double b, double rtol, double atol):
 *     cdef double epsilon = fabs(fmax(atol, rtol * fmax(1, fmax(a, b))))
 *     return fabs(a - b) <= epsilon             # <<<<<<<<<<<<<<
 * 
 * cdef inline bint eq_ddata(const DData& lhs, const DData& rhs, float atol=1e-9):
 */
  __pyx_r = (fabs((__pyx_v_a - __pyx_v_b)) <= __pyx_v_epsilon);
  goto __pyx_L0;

  /* "cyquant/ctypes.pxd":11
 *     DData dimensions
 * 
 * cdef inline bint fapprox(double a, double b, double rtol, double atol):             # <<<<<<<<<<<<<<
 *     cdef double epsilon = fabs(fmax(atol, rtol * fmax(1, fmax(a, b))))
 *     return fabs(a - b) <= epsilon
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyquant/ctypes.pxd":15
 *     return fabs(a - b) <= epsilon
 * 
 * cdef inline bint eq_ddata(const DData& lhs, const DData& rhs, float atol=1e-9):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     for i in range(7):
 */

static CYTHON_INLINE int __pyx_f_7cyquant_6ctypes_eq_ddata(struct __pyx_t_7cyquant_6ctypes_DData const &__pyx_v_lhs, struct __pyx_t_7cyquant_6ctypes_DData const &__pyx_v_rhs, struct __pyx_opt_args_7cyquant_6ctypes_eq_ddata *__pyx_optional_args) {
  float __pyx_v_atol = ((float)1e-9);
  size_t __pyx_v_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("eq_ddata", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_atol = __pyx_optional_args->atol;
    }
  }

  /* "cyquant/ctypes.pxd":17
 * cdef inline bint eq_ddata(const DData& lhs, const DData& rhs, float atol=1e-9):
 *     cdef size_t i
 *     for i in range(7):             # <<<<<<<<<<<<<<
 *         if fabs(lhs.exponents[i] - rhs.exponents[i]) > atol:
 *             return False
 */
  for (__pyx_t_1 = 0; __pyx_t_1 < 7; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "cyquant/ctypes.pxd":18
 *     cdef size_t i
 *     for i in range(7):
 *         if fabs(lhs.exponents[i] - rhs.exponents[i]) > atol:             # <<<<<<<<<<<<<<
 *             return False
 *     return True
 */
    __pyx_t_2 = ((fabs(((__pyx_v_lhs.exponents[__pyx_v_i]) - (__pyx_v_rhs.exponents[__pyx_v_i]))) > __pyx_v_atol) != 0);
    if (__pyx_t_2) {

      /* "cyquant/ctypes.pxd":19
 *     for i in range(7):
 *         if fabs(lhs.exponents[i] - rhs.exponents[i]) > atol:
 *             return False             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "cyquant/ctypes.pxd":18
 *     cdef size_t i
 *     for i in range(7):
 *         if fabs(lhs.exponents[i] - rhs.exponents[i]) > atol:             # <<<<<<<<<<<<<<
 *             return False
 *     return True
 */
    }
  }

  /* "cyquant/ctypes.pxd":20
 *         if fabs(lhs.exponents[i] - rhs.exponents[i]) > atol:
 *             return False
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef inline bint eq_udata(const UData& lhs, const UData& rhs, double atol=1e-9):
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "cyquant/ctypes.pxd":15
 *     return fabs(a - b) <= epsilon
 * 
 * cdef inline bint eq_ddata(const DData& lhs, const DData& rhs, float atol=1e-9):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     for i in range(7):
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyquant/ctypes.pxd":22
 *     return True
 * 
 * cdef inline bint eq_udata(const UData& lhs, const UData& rhs, double atol=1e-9):             # <<<<<<<<<<<<<<
 *     if fabs(lhs.scale - rhs.scale) > atol:
 *         return False
 */

static CYTHON_INLINE int __pyx_f_7cyquant_6ctypes_eq_udata(struct __pyx_t_7cyquant_6ctypes_UData const &__pyx_v_lhs, struct __pyx_t_7cyquant_6ctypes_UData const &__pyx_v_rhs, struct __pyx_opt_args_7cyquant_6ctypes_eq_udata *__pyx_optional_args) {
  double __pyx_v_atol = ((double)1e-9);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  struct __pyx_opt_args_7cyquant_6ctypes_eq_ddata __pyx_t_2;
  __Pyx_RefNannySetupContext("eq_udata", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_atol = __pyx_optional_args->atol;
    }
  }

  /* "cyquant/ctypes.pxd":23
 * 
 * cdef inline bint eq_udata(const UData& lhs, const UData& rhs, double atol=1e-9):
 *     if fabs(lhs.scale - rhs.scale) > atol:             # <<<<<<<<<<<<<<
 *         return False
 *     return eq_ddata(lhs.dimensions, rhs.dimensions, atol)
 */
  __pyx_t_1 = ((fabs((__pyx_v_lhs.scale - __pyx_v_rhs.scale)) > __pyx_v_atol) != 0);
  if (__pyx_t_1) {

    /* "cyquant/ctypes.pxd":24
 * cdef inline bint eq_udata(const UData& lhs, const UData& rhs, double atol=1e-9):
 *     if fabs(lhs.scale - rhs.scale) > atol:
 *         return False             # <<<<<<<<<<<<<<
 *     return eq_ddata(lhs.dimensions, rhs.dimensions, atol)
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "cyquant/ctypes.pxd":23
 * 
 * cdef inline bint eq_udata(const UData& lhs, const UData& rhs, double atol=1e-9):
 *     if fabs(lhs.scale - rhs.scale) > atol:             # <<<<<<<<<<<<<<
 *         return False
 *     return eq_ddata(lhs.dimensions, rhs.dimensions, atol)
 */
  }

  /* "cyquant/ctypes.pxd":25
 *     if fabs(lhs.scale - rhs.scale) > atol:
 *         return False
 *     return eq_ddata(lhs.dimensions, rhs.dimensions, atol)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.atol = __pyx_v_atol;
  __pyx_t_1 = __pyx_f_7cyquant_6ctypes_eq_ddata(__pyx_v_lhs.dimensions, __pyx_v_rhs.dimensions, &__pyx_t_2); 
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cyquant/ctypes.pxd":22
 *     return True
 * 
 * cdef inline bint eq_udata(const UData& lhs, const UData& rhs, double atol=1e-9):             # <<<<<<<<<<<<<<
 *     if fabs(lhs.scale - rhs.scale) > atol:
 *         return False
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyquant/ctypes.pxd":40
 * 
 * #Success
 * cdef inline Error mul_ddata(DData& out, const DData& lhs, const DData& rhs):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     for i in range(7):
 */

static CYTHON_INLINE enum __pyx_t_7cyquant_6ctypes_Error __pyx_f_7cyquant_6ctypes_mul_ddata(struct __pyx_t_7cyquant_6ctypes_DData &__pyx_v_out, struct __pyx_t_7cyquant_6ctypes_DData const &__pyx_v_lhs, struct __pyx_t_7cyquant_6ctypes_DData const &__pyx_v_rhs) {
  size_t __pyx_v_i;
  enum __pyx_t_7cyquant_6ctypes_Error __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  __Pyx_RefNannySetupContext("mul_ddata", 0);

  /* "cyquant/ctypes.pxd":42
 * cdef inline Error mul_ddata(DData& out, const DData& lhs, const DData& rhs):
 *     cdef size_t i
 *     for i in range(7):             # <<<<<<<<<<<<<<
 *         out.exponents[i] = lhs.exponents[i] + rhs.exponents[i]
 *     return Success
 */
  for (__pyx_t_1 = 0; __pyx_t_1 < 7; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "cyquant/ctypes.pxd":43
 *     cdef size_t i
 *     for i in range(7):
 *         out.exponents[i] = lhs.exponents[i] + rhs.exponents[i]             # <<<<<<<<<<<<<<
 *     return Success
 * 
 */
    (__pyx_v_out.exponents[__pyx_v_i]) = ((__pyx_v_lhs.exponents[__pyx_v_i]) + (__pyx_v_rhs.exponents[__pyx_v_i]));
  }

  /* "cyquant/ctypes.pxd":44
 *     for i in range(7):
 *         out.exponents[i] = lhs.exponents[i] + rhs.exponents[i]
 *     return Success             # <<<<<<<<<<<<<<
 * 
 * #Success
 */
  __pyx_r = __pyx_e_7cyquant_6ctypes_Success;
  goto __pyx_L0;

  /* "cyquant/ctypes.pxd":40
 * 
 * #Success
 * cdef inline Error mul_ddata(DData& out, const DData& lhs, const DData& rhs):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     for i in range(7):
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyquant/ctypes.pxd":47
 * 
 * #Success
 * cdef inline Error div_ddata(DData& out, const DData& lhs, const DData& rhs):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     for i in range(7):
 */

static CYTHON_INLINE enum __pyx_t_7cyquant_6ctypes_Error __pyx_f_7cyquant_6ctypes_div_ddata(struct __pyx_t_7cyquant_6ctypes_DData &__pyx_v_out, struct __pyx_t_7cyquant_6ctypes_DData const &__pyx_v_lhs, struct __pyx_t_7cyquant_6ctypes_DData const &__pyx_v_rhs) {
  size_t __pyx_v_i;
  enum __pyx_t_7cyquant_6ctypes_Error __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  __Pyx_RefNannySetupContext("div_ddata", 0);

  /* "cyquant/ctypes.pxd":49
 * cdef inline Error div_ddata(DData& out, const DData& lhs, const DData& rhs):
 *     cdef size_t i
 *     for i in range(7):             # <<<<<<<<<<<<<<
 *         out.exponents[i] = lhs.exponents[i] - rhs.exponents[i]
 *     return Success
 */
  for (__pyx_t_1 = 0; __pyx_t_1 < 7; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "cyquant/ctypes.pxd":50
 *     cdef size_t i
 *     for i in range(7):
 *         out.exponents[i] = lhs.exponents[i] - rhs.exponents[i]             # <<<<<<<<<<<<<<
 *     return Success
 * 
 */
    (__pyx_v_out.exponents[__pyx_v_i]) = ((__pyx_v_lhs.exponents[__pyx_v_i]) - (__pyx_v_rhs.exponents[__pyx_v_i]));
  }

  /* "cyquant/ctypes.pxd":51
 *     for i in range(7):
 *         out.exponents[i] = lhs.exponents[i] - rhs.exponents[i]
 *     return Success             # <<<<<<<<<<<<<<
 * 
 * #Success
 */
  __pyx_r = __pyx_e_7cyquant_6ctypes_Success;
  goto __pyx_L0;

  /* "cyquant/ctypes.pxd":47
 * 
 * #Success
 * cdef inline Error div_ddata(DData& out, const DData& lhs, const DData& rhs):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     for i in range(7):
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyquant/ctypes.pxd":54
 * 
 * #Success
 * cdef inline Error pow_ddata(DData& out, const DData& lhs, double power):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     for i in range(7):
 */

static CYTHON_INLINE enum __pyx_t_7cyquant_6ctypes_Error __pyx_f_7cyquant_6ctypes_pow_ddata(struct __pyx_t_7cyquant_6ctypes_DData &__pyx_v_out, struct __pyx_t_7cyquant_6ctypes_DData const &__pyx_v_lhs, double __pyx_v_power) {
  size_t __pyx_v_i;
  enum __pyx_t_7cyquant_6ctypes_Error __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  __Pyx_RefNannySetupContext("pow_ddata", 0);

  /* "cyquant/ctypes.pxd":56
 * cdef inline Error pow_ddata(DData& out, const DData& lhs, double power):
 *     cdef size_t i
 *     for i in range(7):             # <<<<<<<<<<<<<<
 *         out.exponents[i] = lhs.exponents[i] * power
 *     return Success
 */
  for (__pyx_t_1 = 0; __pyx_t_1 < 7; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "cyquant/ctypes.pxd":57
 *     cdef size_t i
 *     for i in range(7):
 *         out.exponents[i] = lhs.exponents[i] * power             # <<<<<<<<<<<<<<
 *     return Success
 * 
 */
    (__pyx_v_out.exponents[__pyx_v_i]) = ((__pyx_v_lhs.exponents[__pyx_v_i]) * __pyx_v_power);
  }

  /* "cyquant/ctypes.pxd":58
 *     for i in range(7):
 *         out.exponents[i] = lhs.exponents[i] * power
 *     return Success             # <<<<<<<<<<<<<<
 * 
 * cdef inline Error inv_ddata(DData& out, const DData& src):
 */
  __pyx_r = __pyx_e_7cyquant_6ctypes_Success;
  goto __pyx_L0;

  /* "cyquant/ctypes.pxd":54
 * 
 * #Success
 * cdef inline Error pow_ddata(DData& out, const DData& lhs, double power):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     for i in range(7):
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyquant/ctypes.pxd":60
 *     return Success
 * 
 * cdef inline Error inv_ddata(DData& out, const DData& src):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     for i in range(7):
 */

static CYTHON_INLINE enum __pyx_t_7cyquant_6ctypes_Error __pyx_f_7cyquant_6ctypes_inv_ddata(struct __pyx_t_7cyquant_6ctypes_DData &__pyx_v_out, struct __pyx_t_7cyquant_6ctypes_DData const &__pyx_v_src) {
  size_t __pyx_v_i;
  enum __pyx_t_7cyquant_6ctypes_Error __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  __Pyx_RefNannySetupContext("inv_ddata", 0);

  /* "cyquant/ctypes.pxd":62
 * cdef inline Error inv_ddata(DData& out, const DData& src):
 *     cdef size_t i
 *     for i in range(7):             # <<<<<<<<<<<<<<
 *         out.exponents[i] = -src.exponents[i]
 *     return Success
 */
  for (__pyx_t_1 = 0; __pyx_t_1 < 7; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "cyquant/ctypes.pxd":63
 *     cdef size_t i
 *     for i in range(7):
 *         out.exponents[i] = -src.exponents[i]             # <<<<<<<<<<<<<<
 *     return Success
 * 
 */
    (__pyx_v_out.exponents[__pyx_v_i]) = (-(__pyx_v_src.exponents[__pyx_v_i]));
  }

  /* "cyquant/ctypes.pxd":64
 *     for i in range(7):
 *         out.exponents[i] = -src.exponents[i]
 *     return Success             # <<<<<<<<<<<<<<
 * 
 * # begin udata functions
 */
  __pyx_r = __pyx_e_7cyquant_6ctypes_Success;
  goto __pyx_L0;

  /* "cyquant/ctypes.pxd":60
 *     return Success
 * 
 * cdef inline Error inv_ddata(DData& out, const DData& src):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     for i in range(7):
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyquant/ctypes.pxd":69
 * 
 * #Success
 * cdef inline Error mul_udata(UData& out, const UData& lhs, const UData& rhs):             # <<<<<<<<<<<<<<
 *     #todo: overflow checks
 *     out.scale = lhs.scale * rhs.scale
 */

static CYTHON_INLINE enum __pyx_t_7cyquant_6ctypes_Error __pyx_f_7cyquant_6ctypes_mul_udata(struct __pyx_t_7cyquant_6ctypes_UData &__pyx_v_out, struct __pyx_t_7cyquant_6ctypes_UData const &__pyx_v_lhs, struct __pyx_t_7cyquant_6ctypes_UData const &__pyx_v_rhs) {
  enum __pyx_t_7cyquant_6ctypes_Error __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mul_udata", 0);

  /* "cyquant/ctypes.pxd":71
 * cdef inline Error mul_udata(UData& out, const UData& lhs, const UData& rhs):
 *     #todo: overflow checks
 *     out.scale = lhs.scale * rhs.scale             # <<<<<<<<<<<<<<
 *     return mul_ddata(out.dimensions, lhs.dimensions, rhs.dimensions)
 * 
 */
  __pyx_v_out.scale = (__pyx_v_lhs.scale * __pyx_v_rhs.scale);

  /* "cyquant/ctypes.pxd":72
 *     #todo: overflow checks
 *     out.scale = lhs.scale * rhs.scale
 *     return mul_ddata(out.dimensions, lhs.dimensions, rhs.dimensions)             # <<<<<<<<<<<<<<
 * 
 * #Success
 */
  __pyx_r = __pyx_f_7cyquant_6ctypes_mul_ddata(__pyx_v_out.dimensions, __pyx_v_lhs.dimensions, __pyx_v_rhs.dimensions);
  goto __pyx_L0;

  /* "cyquant/ctypes.pxd":69
 * 
 * #Success
 * cdef inline Error mul_udata(UData& out, const UData& lhs, const UData& rhs):             # <<<<<<<<<<<<<<
 *     #todo: overflow checks
 *     out.scale = lhs.scale * rhs.scale
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyquant/ctypes.pxd":76
 * #Success
 * #ZeroDiv
 * cdef inline Error div_udata(UData& out, const UData& lhs, const UData& rhs):             # <<<<<<<<<<<<<<
 *     if rhs.scale == 0:
 *         return ZeroDiv
 */

static CYTHON_INLINE enum __pyx_t_7cyquant_6ctypes_Error __pyx_f_7cyquant_6ctypes_div_udata(struct __pyx_t_7cyquant_6ctypes_UData &__pyx_v_out, struct __pyx_t_7cyquant_6ctypes_UData const &__pyx_v_lhs, struct __pyx_t_7cyquant_6ctypes_UData const &__pyx_v_rhs) {
  enum __pyx_t_7cyquant_6ctypes_Error __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("div_udata", 0);

  /* "cyquant/ctypes.pxd":77
 * #ZeroDiv
 * cdef inline Error div_udata(UData& out, const UData& lhs, const UData& rhs):
 *     if rhs.scale == 0:             # <<<<<<<<<<<<<<
 *         return ZeroDiv
 *     out.scale = lhs.scale / rhs.scale
 */
  __pyx_t_1 = ((__pyx_v_rhs.scale == 0.0) != 0);
  if (__pyx_t_1) {

    /* "cyquant/ctypes.pxd":78
 * cdef inline Error div_udata(UData& out, const UData& lhs, const UData& rhs):
 *     if rhs.scale == 0:
 *         return ZeroDiv             # <<<<<<<<<<<<<<
 *     out.scale = lhs.scale / rhs.scale
 *     return div_ddata(out.dimensions, lhs.dimensions, rhs.dimensions)
 */
    __pyx_r = __pyx_e_7cyquant_6ctypes_ZeroDiv;
    goto __pyx_L0;

    /* "cyquant/ctypes.pxd":77
 * #ZeroDiv
 * cdef inline Error div_udata(UData& out, const UData& lhs, const UData& rhs):
 *     if rhs.scale == 0:             # <<<<<<<<<<<<<<
 *         return ZeroDiv
 *     out.scale = lhs.scale / rhs.scale
 */
  }

  /* "cyquant/ctypes.pxd":79
 *     if rhs.scale == 0:
 *         return ZeroDiv
 *     out.scale = lhs.scale / rhs.scale             # <<<<<<<<<<<<<<
 *     return div_ddata(out.dimensions, lhs.dimensions, rhs.dimensions)
 * 
 */
  if (unlikely(__pyx_v_rhs.scale == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(1, 79, __pyx_L1_error)
  }
  __pyx_v_out.scale = (__pyx_v_lhs.scale / __pyx_v_rhs.scale);

  /* "cyquant/ctypes.pxd":80
 *         return ZeroDiv
 *     out.scale = lhs.scale / rhs.scale
 *     return div_ddata(out.dimensions, lhs.dimensions, rhs.dimensions)             # <<<<<<<<<<<<<<
 * 
 * #Success
 */
  __pyx_r = __pyx_f_7cyquant_6ctypes_div_ddata(__pyx_v_out.dimensions, __pyx_v_lhs.dimensions, __pyx_v_rhs.dimensions);
  goto __pyx_L0;

  /* "cyquant/ctypes.pxd":76
 * #Success
 * #ZeroDiv
 * cdef inline Error div_udata(UData& out, const UData& lhs, const UData& rhs):             # <<<<<<<<<<<<<<
 *     if rhs.scale == 0:
 *         return ZeroDiv
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cyquant.ctypes.div_udata", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = (enum __pyx_t_7cyquant_6ctypes_Error) 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyquant/ctypes.pxd":83
 * 
 * #Success
 * cdef inline Error pow_udata(UData& out, const UData& lhs, double power):             # <<<<<<<<<<<<<<
 *     #todo: overflow checks
 *     out.scale = lhs.scale ** power
 */

static CYTHON_INLINE enum __pyx_t_7cyquant_6ctypes_Error __pyx_f_7cyquant_6ctypes_pow_udata(struct __pyx_t_7cyquant_6ctypes_UData &__pyx_v_out, struct __pyx_t_7cyquant_6ctypes_UData const &__pyx_v_lhs, double __pyx_v_power) {
  enum __pyx_t_7cyquant_6ctypes_Error __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pow_udata", 0);

  /* "cyquant/ctypes.pxd":85
 * cdef inline Error pow_udata(UData& out, const UData& lhs, double power):
 *     #todo: overflow checks
 *     out.scale = lhs.scale ** power             # <<<<<<<<<<<<<<
 *     return pow_ddata(out.dimensions, lhs.dimensions, power)
 * 
 */
  __pyx_v_out.scale = pow(((double)__pyx_v_lhs.scale), __pyx_v_power);

  /* "cyquant/ctypes.pxd":86
 *     #todo: overflow checks
 *     out.scale = lhs.scale ** power
 *     return pow_ddata(out.dimensions, lhs.dimensions, power)             # <<<<<<<<<<<<<<
 * 
 * #Success
 */
  __pyx_r = __pyx_f_7cyquant_6ctypes_pow_ddata(__pyx_v_out.dimensions, __pyx_v_lhs.dimensions, __pyx_v_power);
  goto __pyx_L0;

  /* "cyquant/ctypes.pxd":83
 * 
 * #Success
 * cdef inline Error pow_udata(UData& out, const UData& lhs, double power):             # <<<<<<<<<<<<<<
 *     #todo: overflow checks
 *     out.scale = lhs.scale ** power
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyquant/ctypes.pxd":90
 * #Success
 * #DimensionMismatch
 * cdef inline Error cmp_udata(int& out, const UData& lhs, const UData& rhs):             # <<<<<<<<<<<<<<
 *     if not eq_ddata(lhs.dimensions, rhs.dimensions):
 *         return DimensionMismatch
 */

static CYTHON_INLINE enum __pyx_t_7cyquant_6ctypes_Error __pyx_f_7cyquant_6ctypes_cmp_udata(int &__pyx_v_out, struct __pyx_t_7cyquant_6ctypes_UData const &__pyx_v_lhs, struct __pyx_t_7cyquant_6ctypes_UData const &__pyx_v_rhs) {
  enum __pyx_t_7cyquant_6ctypes_Error __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("cmp_udata", 0);

  /* "cyquant/ctypes.pxd":91
 * #DimensionMismatch
 * cdef inline Error cmp_udata(int& out, const UData& lhs, const UData& rhs):
 *     if not eq_ddata(lhs.dimensions, rhs.dimensions):             # <<<<<<<<<<<<<<
 *         return DimensionMismatch
 * 
 */
  __pyx_t_1 = ((!(__pyx_f_7cyquant_6ctypes_eq_ddata(__pyx_v_lhs.dimensions, __pyx_v_rhs.dimensions, NULL) != 0)) != 0);
  if (__pyx_t_1) {

    /* "cyquant/ctypes.pxd":92
 * cdef inline Error cmp_udata(int& out, const UData& lhs, const UData& rhs):
 *     if not eq_ddata(lhs.dimensions, rhs.dimensions):
 *         return DimensionMismatch             # <<<<<<<<<<<<<<
 * 
 *     if lhs.scale > rhs.scale:
 */
    __pyx_r = __pyx_e_7cyquant_6ctypes_DimensionMismatch;
    goto __pyx_L0;

    /* "cyquant/ctypes.pxd":91
 * #DimensionMismatch
 * cdef inline Error cmp_udata(int& out, const UData& lhs, const UData& rhs):
 *     if not eq_ddata(lhs.dimensions, rhs.dimensions):             # <<<<<<<<<<<<<<
 *         return DimensionMismatch
 * 
 */
  }

  /* "cyquant/ctypes.pxd":94
 *         return DimensionMismatch
 * 
 *     if lhs.scale > rhs.scale:             # <<<<<<<<<<<<<<
 *         (&out)[0] = 1
 *     elif lhs.scale < rhs.scale:
 */
  __pyx_t_1 = ((__pyx_v_lhs.scale > __pyx_v_rhs.scale) != 0);
  if (__pyx_t_1) {

    /* "cyquant/ctypes.pxd":95
 * 
 *     if lhs.scale > rhs.scale:
 *         (&out)[0] = 1             # <<<<<<<<<<<<<<
 *     elif lhs.scale < rhs.scale:
 *         (&out)[0] = -1
 */
    ((&__pyx_v_out)[0]) = 1;

    /* "cyquant/ctypes.pxd":94
 *         return DimensionMismatch
 * 
 *     if lhs.scale > rhs.scale:             # <<<<<<<<<<<<<<
 *         (&out)[0] = 1
 *     elif lhs.scale < rhs.scale:
 */
    goto __pyx_L4;
  }

  /* "cyquant/ctypes.pxd":96
 *     if lhs.scale > rhs.scale:
 *         (&out)[0] = 1
 *     elif lhs.scale < rhs.scale:             # <<<<<<<<<<<<<<
 *         (&out)[0] = -1
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_lhs.scale < __pyx_v_rhs.scale) != 0);
  if (__pyx_t_1) {

    /* "cyquant/ctypes.pxd":97
 *         (&out)[0] = 1
 *     elif lhs.scale < rhs.scale:
 *         (&out)[0] = -1             # <<<<<<<<<<<<<<
 *     else:
 *         (&out)[0] = 0
 */
    ((&__pyx_v_out)[0]) = -1;

    /* "cyquant/ctypes.pxd":96
 *     if lhs.scale > rhs.scale:
 *         (&out)[0] = 1
 *     elif lhs.scale < rhs.scale:             # <<<<<<<<<<<<<<
 *         (&out)[0] = -1
 *     else:
 */
    goto __pyx_L4;
  }

  /* "cyquant/ctypes.pxd":99
 *         (&out)[0] = -1
 *     else:
 *         (&out)[0] = 0             # <<<<<<<<<<<<<<
 * 
 *     return Success
 */
  /*else*/ {
    ((&__pyx_v_out)[0]) = 0;
  }
  __pyx_L4:;

  /* "cyquant/ctypes.pxd":101
 *         (&out)[0] = 0
 * 
 *     return Success             # <<<<<<<<<<<<<<
 * 
 * cdef inline Error inv_udata(UData& out, const UData& src):
 */
  __pyx_r = __pyx_e_7cyquant_6ctypes_Success;
  goto __pyx_L0;

  /* "cyquant/ctypes.pxd":90
 * #Success
 * #DimensionMismatch
 * cdef inline Error cmp_udata(int& out, const UData& lhs, const UData& rhs):             # <<<<<<<<<<<<<<
 *     if not eq_ddata(lhs.dimensions, rhs.dimensions):
 *         return DimensionMismatch
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyquant/ctypes.pxd":103
 *     return Success
 * 
 * cdef inline Error inv_udata(UData& out, const UData& src):             # <<<<<<<<<<<<<<
 *     # if src.scale == 0:
 *     #     return c.ZeroDiv
 */

static CYTHON_INLINE enum __pyx_t_7cyquant_6ctypes_Error __pyx_f_7cyquant_6ctypes_inv_udata(struct __pyx_t_7cyquant_6ctypes_UData &__pyx_v_out, struct __pyx_t_7cyquant_6ctypes_UData const &__pyx_v_src) {
  enum __pyx_t_7cyquant_6ctypes_Error __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inv_udata", 0);

  /* "cyquant/ctypes.pxd":106
 *     # if src.scale == 0:
 *     #     return c.ZeroDiv
 *     out.scale = 1.0 / src.scale             # <<<<<<<<<<<<<<
 *     return inv_ddata(out.dimensions, src.dimensions)
 * 
 */
  if (unlikely(__pyx_v_src.scale == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(1, 106, __pyx_L1_error)
  }
  __pyx_v_out.scale = (1.0 / __pyx_v_src.scale);

  /* "cyquant/ctypes.pxd":107
 *     #     return c.ZeroDiv
 *     out.scale = 1.0 / src.scale
 *     return inv_ddata(out.dimensions, src.dimensions)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_f_7cyquant_6ctypes_inv_ddata(__pyx_v_out.dimensions, __pyx_v_src.dimensions);
  goto __pyx_L0;

  /* "cyquant/ctypes.pxd":103
 *     return Success
 * 
 * cdef inline Error inv_udata(UData& out, const UData& src):             # <<<<<<<<<<<<<<
 *     # if src.scale == 0:
 *     #     return c.ZeroDiv
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cyquant.ctypes.inv_udata", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = (enum __pyx_t_7cyquant_6ctypes_Error) 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyquant/ctypes.pxd":112
 * #Success
 * #DimensionMismatch
 * cdef inline Error min_udata(UData& out, const UData& lhs, const UData& rhs):             # <<<<<<<<<<<<<<
 *     if not eq_ddata(lhs.dimensions, rhs.dimensions):
 *         return DimensionMismatch
 */

static CYTHON_INLINE enum __pyx_t_7cyquant_6ctypes_Error __pyx_f_7cyquant_6ctypes_min_udata(struct __pyx_t_7cyquant_6ctypes_UData &__pyx_v_out, struct __pyx_t_7cyquant_6ctypes_UData const &__pyx_v_lhs, struct __pyx_t_7cyquant_6ctypes_UData const &__pyx_v_rhs) {
  enum __pyx_t_7cyquant_6ctypes_Error __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("min_udata", 0);

  /* "cyquant/ctypes.pxd":113
 * #DimensionMismatch
 * cdef inline Error min_udata(UData& out, const UData& lhs, const UData& rhs):
 *     if not eq_ddata(lhs.dimensions, rhs.dimensions):             # <<<<<<<<<<<<<<
 *         return DimensionMismatch
 * 
 */
  __pyx_t_1 = ((!(__pyx_f_7cyquant_6ctypes_eq_ddata(__pyx_v_lhs.dimensions, __pyx_v_rhs.dimensions, NULL) != 0)) != 0);
  if (__pyx_t_1) {

    /* "cyquant/ctypes.pxd":114
 * cdef inline Error min_udata(UData& out, const UData& lhs, const UData& rhs):
 *     if not eq_ddata(lhs.dimensions, rhs.dimensions):
 *         return DimensionMismatch             # <<<<<<<<<<<<<<
 * 
 *     if lhs.scale < rhs.scale:
 */
    __pyx_r = __pyx_e_7cyquant_6ctypes_DimensionMismatch;
    goto __pyx_L0;

    /* "cyquant/ctypes.pxd":113
 * #DimensionMismatch
 * cdef inline Error min_udata(UData& out, const UData& lhs, const UData& rhs):
 *     if not eq_ddata(lhs.dimensions, rhs.dimensions):             # <<<<<<<<<<<<<<
 *         return DimensionMismatch
 * 
 */
  }

  /* "cyquant/ctypes.pxd":116
 *         return DimensionMismatch
 * 
 *     if lhs.scale < rhs.scale:             # <<<<<<<<<<<<<<
 *         (&out)[0] = lhs
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_lhs.scale < __pyx_v_rhs.scale) != 0);
  if (__pyx_t_1) {

    /* "cyquant/ctypes.pxd":117
 * 
 *     if lhs.scale < rhs.scale:
 *         (&out)[0] = lhs             # <<<<<<<<<<<<<<
 *     else:
 *         (&out)[0] = rhs
 */
    ((&__pyx_v_out)[0]) = __pyx_v_lhs;

    /* "cyquant/ctypes.pxd":116
 *         return DimensionMismatch
 * 
 *     if lhs.scale < rhs.scale:             # <<<<<<<<<<<<<<
 *         (&out)[0] = lhs
 *     else:
 */
    goto __pyx_L4;
  }

  /* "cyquant/ctypes.pxd":119
 *         (&out)[0] = lhs
 *     else:
 *         (&out)[0] = rhs             # <<<<<<<<<<<<<<
 * 
 *     return Success
 */
  /*else*/ {
    ((&__pyx_v_out)[0]) = __pyx_v_rhs;
  }
  __pyx_L4:;

  /* "cyquant/ctypes.pxd":121
 *         (&out)[0] = rhs
 * 
 *     return Success             # <<<<<<<<<<<<<<
 */
  __pyx_r = __pyx_e_7cyquant_6ctypes_Success;
  goto __pyx_L0;

  /* "cyquant/ctypes.pxd":112
 * #Success
 * #DimensionMismatch
 * cdef inline Error min_udata(UData& out, const UData& lhs, const UData& rhs):             # <<<<<<<<<<<<<<
 *     if not eq_ddata(lhs.dimensions, rhs.dimensions):
 *         return DimensionMismatch
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyquant/quantities.pxd":49
 * 
 * 
 * cdef inline mul_units(SIUnit lhs, SIUnit rhs):             # <<<<<<<<<<<<<<
 *     cdef c.Error error_code
 *     cdef SIUnit ret = SIUnit.__new__(SIUnit)
 */

static CYTHON_INLINE PyObject *__pyx_f_7cyquant_10quantities_mul_units(struct __pyx_obj_7cyquant_10quantities_SIUnit *__pyx_v_lhs, struct __pyx_obj_7cyquant_10quantities_SIUnit *__pyx_v_rhs) {
  enum __pyx_t_7cyquant_6ctypes_Error __pyx_v_error_code;
  struct __pyx_obj_7cyquant_10quantities_SIUnit *__pyx_v_ret = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("mul_units", 0);

  /* "cyquant/quantities.pxd":51
 * cdef inline mul_units(SIUnit lhs, SIUnit rhs):
 *     cdef c.Error error_code
 *     cdef SIUnit ret = SIUnit.__new__(SIUnit)             # <<<<<<<<<<<<<<
 *     error_code = c.mul_udata(ret.data, lhs.data, rhs.data)
 *     if error_code == c.Success:
 */
  __pyx_t_1 = __Pyx_tp_new(((PyObject *)__pyx_ptype_7cyquant_10quantities_SIUnit), __pyx_empty_tuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_7cyquant_10quantities_SIUnit)))) __PYX_ERR(2, 51, __pyx_L1_error)
  __pyx_v_ret = ((struct __pyx_obj_7cyquant_10quantities_SIUnit *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cyquant/quantities.pxd":52
 *     cdef c.Error error_code
 *     cdef SIUnit ret = SIUnit.__new__(SIUnit)
 *     error_code = c.mul_udata(ret.data, lhs.data, rhs.data)             # <<<<<<<<<<<<<<
 *     if error_code == c.Success:
 *         return ret
 */
  __pyx_v_error_code = __pyx_f_7cyquant_6ctypes_mul_udata(__pyx_v_ret->data, __pyx_v_lhs->data, __pyx_v_rhs->data);

  /* "cyquant/quantities.pxd":53
 *     cdef SIUnit ret = SIUnit.__new__(SIUnit)
 *     error_code = c.mul_udata(ret.data, lhs.data, rhs.data)
 *     if error_code == c.Success:             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
  __pyx_t_2 = ((__pyx_v_error_code == __pyx_e_7cyquant_6ctypes_Success) != 0);
  if (__pyx_t_2) {

    /* "cyquant/quantities.pxd":54
 *     error_code = c.mul_udata(ret.data, lhs.data, rhs.data)
 *     if error_code == c.Success:
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     raise RuntimeError("Unknow Error Occurred: %i" % error_code)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_ret));
    __pyx_r = ((PyObject *)__pyx_v_ret);
    goto __pyx_L0;

    /* "cyquant/quantities.pxd":53
 *     cdef SIUnit ret = SIUnit.__new__(SIUnit)
 *     error_code = c.mul_udata(ret.data, lhs.data, rhs.data)
 *     if error_code == c.Success:             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
  }

  /* "cyquant/quantities.pxd":56
 *         return ret
 * 
 *     raise RuntimeError("Unknow Error Occurred: %i" % error_code)             # <<<<<<<<<<<<<<
 * 
 * cdef inline div_units(SIUnit lhs, SIUnit rhs):
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_7cyquant_6ctypes_Error(__pyx_v_error_code); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_Unknow_Error_Occurred_i, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_RuntimeError, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 56, __pyx_L1_error)

  /* "cyquant/quantities.pxd":49
 * 
 * 
 * cdef inline mul_units(SIUnit lhs, SIUnit rhs):             # <<<<<<<<<<<<<<
 *     cdef c.Error error_code
 *     cdef SIUnit ret = SIUnit.__new__(SIUnit)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cyquant.quantities.mul_units", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyquant/quantities.pxd":58
 *     raise RuntimeError("Unknow Error Occurred: %i" % error_code)
 * 
 * cdef inline div_units(SIUnit lhs, SIUnit rhs):             # <<<<<<<<<<<<<<
 *     cdef c.Error error_code
 *     cdef SIUnit ret = SIUnit.__new__(SIUnit)
 */

static CYTHON_INLINE PyObject *__pyx_f_7cyquant_10quantities_div_units(struct __pyx_obj_7cyquant_10quantities_SIUnit *__pyx_v_lhs, struct __pyx_obj_7cyquant_10quantities_SIUnit *__pyx_v_rhs) {
  enum __pyx_t_7cyquant_6ctypes_Error __pyx_v_error_code;
  struct __pyx_obj_7cyquant_10quantities_SIUnit *__pyx_v_ret = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("div_units", 0);

  /* "cyquant/quantities.pxd":60
 * cdef inline div_units(SIUnit lhs, SIUnit rhs):
 *     cdef c.Error error_code
 *     cdef SIUnit ret = SIUnit.__new__(SIUnit)             # <<<<<<<<<<<<<<
 *     error_code = c.div_udata(ret.data, lhs.data, rhs.data)
 *     if error_code == c.Success:
 */
  __pyx_t_1 = __Pyx_tp_new(((PyObject *)__pyx_ptype_7cyquant_10quantities_SIUnit), __pyx_empty_tuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_7cyquant_10quantities_SIUnit)))) __PYX_ERR(2, 60, __pyx_L1_error)
  __pyx_v_ret = ((struct __pyx_obj_7cyquant_10quantities_SIUnit *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cyquant/quantities.pxd":61
 *     cdef c.Error error_code
 *     cdef SIUnit ret = SIUnit.__new__(SIUnit)
 *     error_code = c.div_udata(ret.data, lhs.data, rhs.data)             # <<<<<<<<<<<<<<
 *     if error_code == c.Success:
 *         return ret
 */
  __pyx_v_error_code = __pyx_f_7cyquant_6ctypes_div_udata(__pyx_v_ret->data, __pyx_v_lhs->data, __pyx_v_rhs->data);

  /* "cyquant/quantities.pxd":62
 *     cdef SIUnit ret = SIUnit.__new__(SIUnit)
 *     error_code = c.div_udata(ret.data, lhs.data, rhs.data)
 *     if error_code == c.Success:             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
  __pyx_t_2 = ((__pyx_v_error_code == __pyx_e_7cyquant_6ctypes_Success) != 0);
  if (__pyx_t_2) {

    /* "cyquant/quantities.pxd":63
 *     error_code = c.div_udata(ret.data, lhs.data, rhs.data)
 *     if error_code == c.Success:
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     if error_code == c.ZeroDiv:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_ret));
    __pyx_r = ((PyObject *)__pyx_v_ret);
    goto __pyx_L0;

    /* "cyquant/quantities.pxd":62
 *     cdef SIUnit ret = SIUnit.__new__(SIUnit)
 *     error_code = c.div_udata(ret.data, lhs.data, rhs.data)
 *     if error_code == c.Success:             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
  }

  /* "cyquant/quantities.pxd":65
 *         return ret
 * 
 *     if error_code == c.ZeroDiv:             # <<<<<<<<<<<<<<
 *         raise ZeroDivisionError()
 * 
 */
  __pyx_t_2 = ((__pyx_v_error_code == __pyx_e_7cyquant_6ctypes_ZeroDiv) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "cyquant/quantities.pxd":66
 * 
 *     if error_code == c.ZeroDiv:
 *         raise ZeroDivisionError()             # <<<<<<<<<<<<<<
 * 
 *     raise RuntimeError("Unknown Error Occurred: %d" % error_code)
 */
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_builtin_ZeroDivisionError); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 66, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(2, 66, __pyx_L1_error)

    /* "cyquant/quantities.pxd":65
 *         return ret
 * 
 *     if error_code == c.ZeroDiv:             # <<<<<<<<<<<<<<
 *         raise ZeroDivisionError()
 * 
 */
  }

  /* "cyquant/quantities.pxd":68
 *         raise ZeroDivisionError()
 * 
 *     raise RuntimeError("Unknown Error Occurred: %d" % error_code)             # <<<<<<<<<<<<<<
 * 
 * cdef inline void get_udata(c.UData& out, SIUnit units):
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_7cyquant_6ctypes_Error(__pyx_v_error_code); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_Unknown_Error_Occurred_d, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_RuntimeError, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 68, __pyx_L1_error)

  /* "cyquant/quantities.pxd":58
 *     raise RuntimeError("Unknow Error Occurred: %i" % error_code)
 * 
 * cdef inline div_units(SIUnit lhs, SIUnit rhs):             # <<<<<<<<<<<<<<
 *     cdef c.Error error_code
 *     cdef SIUnit ret = SIUnit.__new__(SIUnit)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cyquant.quantities.div_units", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyquant/quantities.pxd":70
 *     raise RuntimeError("Unknown Error Occurred: %d" % error_code)
 * 
 * cdef inline void get_udata(c.UData& out, SIUnit units):             # <<<<<<<<<<<<<<
 *     (&out)[0] = units.data
 * 
 */

static CYTHON_INLINE void __pyx_f_7cyquant_10quantities_get_udata(struct __pyx_t_7cyquant_6ctypes_UData &__pyx_v_out, struct __pyx_obj_7cyquant_10quantities_SIUnit *__pyx_v_units) {
  __Pyx_RefNannyDeclarations
  struct __pyx_t_7cyquant_6ctypes_UData __pyx_t_1;
  __Pyx_RefNannySetupContext("get_udata", 0);

  /* "cyquant/quantities.pxd":71
 * 
 * cdef inline void get_udata(c.UData& out, SIUnit units):
 *     (&out)[0] = units.data             # <<<<<<<<<<<<<<
 * 
 * # parsing functions
 */
  __pyx_t_1 = __pyx_v_units->data;
  ((&__pyx_v_out)[0]) = __pyx_t_1;

  /* "cyquant/quantities.pxd":70
 *     raise RuntimeError("Unknown Error Occurred: %d" % error_code)
 * 
 * cdef inline void get_udata(c.UData& out, SIUnit units):             # <<<<<<<<<<<<<<
 *     (&out)[0] = units.data
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cyquant/quantities.pxd":78
 * 
 * 
 * cdef inline int unsafe_native_cmp(Quantity lhs, Quantity rhs, double eps=0):             # <<<<<<<<<<<<<<
 *     cdef double lhs_norm = lhs.c_value * lhs.udata.scale
 *     cdef double rhs_norm = rhs.c_value * rhs.udata.scale
 */

static CYTHON_INLINE int __pyx_f_7cyquant_10quantities_unsafe_native_cmp(struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_lhs, struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_rhs, struct __pyx_opt_args_7cyquant_10quantities_unsafe_native_cmp *__pyx_optional_args) {
  double __pyx_v_eps = ((double)0.0);
  double __pyx_v_lhs_norm;
  double __pyx_v_rhs_norm;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("unsafe_native_cmp", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_eps = __pyx_optional_args->eps;
    }
  }

  /* "cyquant/quantities.pxd":79
 * 
 * cdef inline int unsafe_native_cmp(Quantity lhs, Quantity rhs, double eps=0):
 *     cdef double lhs_norm = lhs.c_value * lhs.udata.scale             # <<<<<<<<<<<<<<
 *     cdef double rhs_norm = rhs.c_value * rhs.udata.scale
 * 
 */
  __pyx_v_lhs_norm = (__pyx_v_lhs->c_value * __pyx_v_lhs->udata.scale);

  /* "cyquant/quantities.pxd":80
 * cdef inline int unsafe_native_cmp(Quantity lhs, Quantity rhs, double eps=0):
 *     cdef double lhs_norm = lhs.c_value * lhs.udata.scale
 *     cdef double rhs_norm = rhs.c_value * rhs.udata.scale             # <<<<<<<<<<<<<<
 * 
 *     if lhs_norm > rhs_norm + eps:
 */
  __pyx_v_rhs_norm = (__pyx_v_rhs->c_value * __pyx_v_rhs->udata.scale);

  /* "cyquant/quantities.pxd":82
 *     cdef double rhs_norm = rhs.c_value * rhs.udata.scale
 * 
 *     if lhs_norm > rhs_norm + eps:             # <<<<<<<<<<<<<<
 *         return 1
 *     if lhs_norm < rhs_norm - eps:
 */
  __pyx_t_1 = ((__pyx_v_lhs_norm > (__pyx_v_rhs_norm + __pyx_v_eps)) != 0);
  if (__pyx_t_1) {

    /* "cyquant/quantities.pxd":83
 * 
 *     if lhs_norm > rhs_norm + eps:
 *         return 1             # <<<<<<<<<<<<<<
 *     if lhs_norm < rhs_norm - eps:
 *         return -1
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "cyquant/quantities.pxd":82
 *     cdef double rhs_norm = rhs.c_value * rhs.udata.scale
 * 
 *     if lhs_norm > rhs_norm + eps:             # <<<<<<<<<<<<<<
 *         return 1
 *     if lhs_norm < rhs_norm - eps:
 */
  }

  /* "cyquant/quantities.pxd":84
 *     if lhs_norm > rhs_norm + eps:
 *         return 1
 *     if lhs_norm < rhs_norm - eps:             # <<<<<<<<<<<<<<
 *         return -1
 *     return 0
 */
  __pyx_t_1 = ((__pyx_v_lhs_norm < (__pyx_v_rhs_norm - __pyx_v_eps)) != 0);
  if (__pyx_t_1) {

    /* "cyquant/quantities.pxd":85
 *         return 1
 *     if lhs_norm < rhs_norm - eps:
 *         return -1             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
    __pyx_r = -1;
    goto __pyx_L0;

    /* "cyquant/quantities.pxd":84
 *     if lhs_norm > rhs_norm + eps:
 *         return 1
 *     if lhs_norm < rhs_norm - eps:             # <<<<<<<<<<<<<<
 *         return -1
 *     return 0
 */
  }

  /* "cyquant/quantities.pxd":86
 *     if lhs_norm < rhs_norm - eps:
 *         return -1
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "cyquant/quantities.pxd":78
 * 
 * 
 * cdef inline int unsafe_native_cmp(Quantity lhs, Quantity rhs, double eps=0):             # <<<<<<<<<<<<<<
 *     cdef double lhs_norm = lhs.c_value * lhs.udata.scale
 *     cdef double rhs_norm = rhs.c_value * rhs.udata.scale
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyquant/quantities.pxd":89
 * 
 * 
 * cdef inline int parse_q(Quantity out, object py_obj):             # <<<<<<<<<<<<<<
 *     cdef type value_type = type(py_obj)
 * 
 */

static CYTHON_INLINE int __pyx_f_7cyquant_10quantities_parse_q(struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_out, PyObject *__pyx_v_py_obj) {
  PyTypeObject *__pyx_v_value_type = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  float __pyx_t_3[7];
  int __pyx_t_4;
  double __pyx_t_5;
  __Pyx_RefNannySetupContext("parse_q", 0);

  /* "cyquant/quantities.pxd":90
 * 
 * cdef inline int parse_q(Quantity out, object py_obj):
 *     cdef type value_type = type(py_obj)             # <<<<<<<<<<<<<<
 * 
 *     if value_type is Quantity:
 */
  __Pyx_INCREF(((PyObject *)Py_TYPE(__pyx_v_py_obj)));
  __pyx_v_value_type = ((PyTypeObject*)((PyObject *)Py_TYPE(__pyx_v_py_obj)));

  /* "cyquant/quantities.pxd":92
 *     cdef type value_type = type(py_obj)
 * 
 *     if value_type is Quantity:             # <<<<<<<<<<<<<<
 *         return q_to_q(out, py_obj)
 * 
 */
  __pyx_t_1 = (__pyx_v_value_type == __pyx_ptype_7cyquant_10quantities_Quantity);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cyquant/quantities.pxd":93
 * 
 *     if value_type is Quantity:
 *         return q_to_q(out, py_obj)             # <<<<<<<<<<<<<<
 * 
 *     if value_type is SIUnit:
 */
    if (!(likely(((__pyx_v_py_obj) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_py_obj, __pyx_ptype_7cyquant_10quantities_Quantity))))) __PYX_ERR(2, 93, __pyx_L1_error)
    __pyx_r = __pyx_f_7cyquant_10quantities_q_to_q(__pyx_v_out, ((struct __pyx_obj_7cyquant_10quantities_Quantity *)__pyx_v_py_obj));
    goto __pyx_L0;

    /* "cyquant/quantities.pxd":92
 *     cdef type value_type = type(py_obj)
 * 
 *     if value_type is Quantity:             # <<<<<<<<<<<<<<
 *         return q_to_q(out, py_obj)
 * 
 */
  }

  /* "cyquant/quantities.pxd":95
 *         return q_to_q(out, py_obj)
 * 
 *     if value_type is SIUnit:             # <<<<<<<<<<<<<<
 *         return u_to_q(out, py_obj)
 * 
 */
  __pyx_t_2 = (__pyx_v_value_type == __pyx_ptype_7cyquant_10quantities_SIUnit);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "cyquant/quantities.pxd":96
 * 
 *     if value_type is SIUnit:
 *         return u_to_q(out, py_obj)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    if (!(likely(((__pyx_v_py_obj) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_py_obj, __pyx_ptype_7cyquant_10quantities_SIUnit))))) __PYX_ERR(2, 96, __pyx_L1_error)
    __pyx_r = __pyx_f_7cyquant_10quantities_u_to_q(__pyx_v_out, ((struct __pyx_obj_7cyquant_10quantities_SIUnit *)__pyx_v_py_obj));
    goto __pyx_L0;

    /* "cyquant/quantities.pxd":95
 *         return q_to_q(out, py_obj)
 * 
 *     if value_type is SIUnit:             # <<<<<<<<<<<<<<
 *         return u_to_q(out, py_obj)
 * 
 */
  }

  /* "cyquant/quantities.pxd":99
 * 
 * 
 *     out.udata.scale = 1             # <<<<<<<<<<<<<<
 *     out.udata.dimensions.exponents[:] = [0,0,0,0,0,0,0]
 * 
 */
  __pyx_v_out->udata.scale = 1.0;

  /* "cyquant/quantities.pxd":100
 * 
 *     out.udata.scale = 1
 *     out.udata.dimensions.exponents[:] = [0,0,0,0,0,0,0]             # <<<<<<<<<<<<<<
 * 
 *     if value_type is float or value_type is int:
 */
  __pyx_t_3[0] = 0.0;
  __pyx_t_3[1] = 0.0;
  __pyx_t_3[2] = 0.0;
  __pyx_t_3[3] = 0.0;
  __pyx_t_3[4] = 0.0;
  __pyx_t_3[5] = 0.0;
  __pyx_t_3[6] = 0.0;
  memcpy(&(__pyx_v_out->udata.dimensions.exponents[0]), __pyx_t_3, sizeof(__pyx_v_out->udata.dimensions.exponents[0]) * (7));

  /* "cyquant/quantities.pxd":102
 *     out.udata.dimensions.exponents[:] = [0,0,0,0,0,0,0]
 * 
 *     if value_type is float or value_type is int:             # <<<<<<<<<<<<<<
 *         out.py_value = None
 *         out.c_value = py_obj
 */
  __pyx_t_2 = (__pyx_v_value_type == (&PyFloat_Type));
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_4 = (__pyx_v_value_type == (&PyInt_Type));
  __pyx_t_2 = (__pyx_t_4 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L6_bool_binop_done:;
  if (__pyx_t_1) {

    /* "cyquant/quantities.pxd":103
 * 
 *     if value_type is float or value_type is int:
 *         out.py_value = None             # <<<<<<<<<<<<<<
 *         out.c_value = py_obj
 *     else:
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_out->py_value);
    __Pyx_DECREF(__pyx_v_out->py_value);
    __pyx_v_out->py_value = Py_None;

    /* "cyquant/quantities.pxd":104
 *     if value_type is float or value_type is int:
 *         out.py_value = None
 *         out.c_value = py_obj             # <<<<<<<<<<<<<<
 *     else:
 *         out.py_value = py_obj
 */
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_py_obj); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 104, __pyx_L1_error)
    __pyx_v_out->c_value = __pyx_t_5;

    /* "cyquant/quantities.pxd":102
 *     out.udata.dimensions.exponents[:] = [0,0,0,0,0,0,0]
 * 
 *     if value_type is float or value_type is int:             # <<<<<<<<<<<<<<
 *         out.py_value = None
 *         out.c_value = py_obj
 */
    goto __pyx_L5;
  }

  /* "cyquant/quantities.pxd":106
 *         out.c_value = py_obj
 *     else:
 *         out.py_value = py_obj             # <<<<<<<<<<<<<<
 * 
 *     return c.Success
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_v_py_obj);
    __Pyx_GIVEREF(__pyx_v_py_obj);
    __Pyx_GOTREF(__pyx_v_out->py_value);
    __Pyx_DECREF(__pyx_v_out->py_value);
    __pyx_v_out->py_value = __pyx_v_py_obj;
  }
  __pyx_L5:;

  /* "cyquant/quantities.pxd":108
 *         out.py_value = py_obj
 * 
 *     return c.Success             # <<<<<<<<<<<<<<
 * 
 * cdef inline int q_to_q(Quantity out, Quantity py_obj):
 */
  __pyx_r = __pyx_e_7cyquant_6ctypes_Success;
  goto __pyx_L0;

  /* "cyquant/quantities.pxd":89
 * 
 * 
 * cdef inline int parse_q(Quantity out, object py_obj):             # <<<<<<<<<<<<<<
 *     cdef type value_type = type(py_obj)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cyquant.quantities.parse_q", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value_type);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyquant/quantities.pxd":110
 *     return c.Success
 * 
 * cdef inline int q_to_q(Quantity out, Quantity py_obj):             # <<<<<<<<<<<<<<
 *     out.py_value = py_obj.py_value
 *     out.c_value = py_obj.c_value
 */

static CYTHON_INLINE int __pyx_f_7cyquant_10quantities_q_to_q(struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_out, struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_py_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  struct __pyx_t_7cyquant_6ctypes_UData __pyx_t_3;
  __Pyx_RefNannySetupContext("q_to_q", 0);

  /* "cyquant/quantities.pxd":111
 * 
 * cdef inline int q_to_q(Quantity out, Quantity py_obj):
 *     out.py_value = py_obj.py_value             # <<<<<<<<<<<<<<
 *     out.c_value = py_obj.c_value
 *     out.udata = py_obj.udata
 */
  __pyx_t_1 = __pyx_v_py_obj->py_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_out->py_value);
  __Pyx_DECREF(__pyx_v_out->py_value);
  __pyx_v_out->py_value = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cyquant/quantities.pxd":112
 * cdef inline int q_to_q(Quantity out, Quantity py_obj):
 *     out.py_value = py_obj.py_value
 *     out.c_value = py_obj.c_value             # <<<<<<<<<<<<<<
 *     out.udata = py_obj.udata
 *     return c.Success
 */
  __pyx_t_2 = __pyx_v_py_obj->c_value;
  __pyx_v_out->c_value = __pyx_t_2;

  /* "cyquant/quantities.pxd":113
 *     out.py_value = py_obj.py_value
 *     out.c_value = py_obj.c_value
 *     out.udata = py_obj.udata             # <<<<<<<<<<<<<<
 *     return c.Success
 * 
 */
  __pyx_t_3 = __pyx_v_py_obj->udata;
  __pyx_v_out->udata = __pyx_t_3;

  /* "cyquant/quantities.pxd":114
 *     out.c_value = py_obj.c_value
 *     out.udata = py_obj.udata
 *     return c.Success             # <<<<<<<<<<<<<<
 * 
 * cdef inline int u_to_q(Quantity out, SIUnit py_obj):
 */
  __pyx_r = __pyx_e_7cyquant_6ctypes_Success;
  goto __pyx_L0;

  /* "cyquant/quantities.pxd":110
 *     return c.Success
 * 
 * cdef inline int q_to_q(Quantity out, Quantity py_obj):             # <<<<<<<<<<<<<<
 *     out.py_value = py_obj.py_value
 *     out.c_value = py_obj.c_value
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyquant/quantities.pxd":116
 *     return c.Success
 * 
 * cdef inline int u_to_q(Quantity out, SIUnit py_obj):             # <<<<<<<<<<<<<<
 *     out.py_value = None
 *     out.c_value = 1.0
 */

static CYTHON_INLINE int __pyx_f_7cyquant_10quantities_u_to_q(struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_out, struct __pyx_obj_7cyquant_10quantities_SIUnit *__pyx_v_py_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  struct __pyx_t_7cyquant_6ctypes_UData __pyx_t_1;
  __Pyx_RefNannySetupContext("u_to_q", 0);

  /* "cyquant/quantities.pxd":117
 * 
 * cdef inline int u_to_q(Quantity out, SIUnit py_obj):
 *     out.py_value = None             # <<<<<<<<<<<<<<
 *     out.c_value = 1.0
 *     out.udata = py_obj.data
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_out->py_value);
  __Pyx_DECREF(__pyx_v_out->py_value);
  __pyx_v_out->py_value = Py_None;

  /* "cyquant/quantities.pxd":118
 * cdef inline int u_to_q(Quantity out, SIUnit py_obj):
 *     out.py_value = None
 *     out.c_value = 1.0             # <<<<<<<<<<<<<<
 *     out.udata = py_obj.data
 *     return c.Success
 */
  __pyx_v_out->c_value = 1.0;

  /* "cyquant/quantities.pxd":119
 *     out.py_value = None
 *     out.c_value = 1.0
 *     out.udata = py_obj.data             # <<<<<<<<<<<<<<
 *     return c.Success
 * 
 */
  __pyx_t_1 = __pyx_v_py_obj->data;
  __pyx_v_out->udata = __pyx_t_1;

  /* "cyquant/quantities.pxd":120
 *     out.c_value = 1.0
 *     out.udata = py_obj.data
 *     return c.Success             # <<<<<<<<<<<<<<
 * 
 * cdef inline q_assign_mul(Quantity out, object py_obj):
 */
  __pyx_r = __pyx_e_7cyquant_6ctypes_Success;
  goto __pyx_L0;

  /* "cyquant/quantities.pxd":116
 *     return c.Success
 * 
 * cdef inline int u_to_q(Quantity out, SIUnit py_obj):             # <<<<<<<<<<<<<<
 *     out.py_value = None
 *     out.c_value = 1.0
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyquant/quantities.pxd":122
 *     return c.Success
 * 
 * cdef inline q_assign_mul(Quantity out, object py_obj):             # <<<<<<<<<<<<<<
 *     cdef type value_type = type(py_obj)
 *     if value_type is Quantity:
 */

static CYTHON_INLINE PyObject *__pyx_f_7cyquant_10quantities_q_assign_mul(struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_out, PyObject *__pyx_v_py_obj) {
  PyTypeObject *__pyx_v_value_type = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  double __pyx_t_5;
  __Pyx_RefNannySetupContext("q_assign_mul", 0);

  /* "cyquant/quantities.pxd":123
 * 
 * cdef inline q_assign_mul(Quantity out, object py_obj):
 *     cdef type value_type = type(py_obj)             # <<<<<<<<<<<<<<
 *     if value_type is Quantity:
 *         return q_assign_mul_q(out, py_obj)
 */
  __Pyx_INCREF(((PyObject *)Py_TYPE(__pyx_v_py_obj)));
  __pyx_v_value_type = ((PyTypeObject*)((PyObject *)Py_TYPE(__pyx_v_py_obj)));

  /* "cyquant/quantities.pxd":124
 * cdef inline q_assign_mul(Quantity out, object py_obj):
 *     cdef type value_type = type(py_obj)
 *     if value_type is Quantity:             # <<<<<<<<<<<<<<
 *         return q_assign_mul_q(out, py_obj)
 *     if value_type is float or value_type is int:
 */
  __pyx_t_1 = (__pyx_v_value_type == __pyx_ptype_7cyquant_10quantities_Quantity);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cyquant/quantities.pxd":125
 *     cdef type value_type = type(py_obj)
 *     if value_type is Quantity:
 *         return q_assign_mul_q(out, py_obj)             # <<<<<<<<<<<<<<
 *     if value_type is float or value_type is int:
 *         return q_assign_mul_d(out, py_obj)
 */
    __Pyx_XDECREF(__pyx_r);
    if (!(likely(((__pyx_v_py_obj) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_py_obj, __pyx_ptype_7cyquant_10quantities_Quantity))))) __PYX_ERR(2, 125, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_7cyquant_10quantities_q_assign_mul_q(__pyx_v_out, ((struct __pyx_obj_7cyquant_10quantities_Quantity *)__pyx_v_py_obj)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "cyquant/quantities.pxd":124
 * cdef inline q_assign_mul(Quantity out, object py_obj):
 *     cdef type value_type = type(py_obj)
 *     if value_type is Quantity:             # <<<<<<<<<<<<<<
 *         return q_assign_mul_q(out, py_obj)
 *     if value_type is float or value_type is int:
 */
  }

  /* "cyquant/quantities.pxd":126
 *     if value_type is Quantity:
 *         return q_assign_mul_q(out, py_obj)
 *     if value_type is float or value_type is int:             # <<<<<<<<<<<<<<
 *         return q_assign_mul_d(out, py_obj)
 *     if value_type is SIUnit:
 */
  __pyx_t_1 = (__pyx_v_value_type == (&PyFloat_Type));
  __pyx_t_4 = (__pyx_t_1 != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_4 = (__pyx_v_value_type == (&PyInt_Type));
  __pyx_t_1 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_1;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_2) {

    /* "cyquant/quantities.pxd":127
 *         return q_assign_mul_q(out, py_obj)
 *     if value_type is float or value_type is int:
 *         return q_assign_mul_d(out, py_obj)             # <<<<<<<<<<<<<<
 *     if value_type is SIUnit:
 *         return q_assign_mul_u(out, py_obj)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_py_obj); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 127, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_7cyquant_10quantities_q_assign_mul_d(__pyx_v_out, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 127, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "cyquant/quantities.pxd":126
 *     if value_type is Quantity:
 *         return q_assign_mul_q(out, py_obj)
 *     if value_type is float or value_type is int:             # <<<<<<<<<<<<<<
 *         return q_assign_mul_d(out, py_obj)
 *     if value_type is SIUnit:
 */
  }

  /* "cyquant/quantities.pxd":128
 *     if value_type is float or value_type is int:
 *         return q_assign_mul_d(out, py_obj)
 *     if value_type is SIUnit:             # <<<<<<<<<<<<<<
 *         return q_assign_mul_u(out, py_obj)
 *     return q_assign_mul_o(out, py_obj)
 */
  __pyx_t_2 = (__pyx_v_value_type == __pyx_ptype_7cyquant_10quantities_SIUnit);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "cyquant/quantities.pxd":129
 *         return q_assign_mul_d(out, py_obj)
 *     if value_type is SIUnit:
 *         return q_assign_mul_u(out, py_obj)             # <<<<<<<<<<<<<<
 *     return q_assign_mul_o(out, py_obj)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    if (!(likely(((__pyx_v_py_obj) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_py_obj, __pyx_ptype_7cyquant_10quantities_SIUnit))))) __PYX_ERR(2, 129, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_7cyquant_10quantities_q_assign_mul_u(__pyx_v_out, ((struct __pyx_obj_7cyquant_10quantities_SIUnit *)__pyx_v_py_obj)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "cyquant/quantities.pxd":128
 *     if value_type is float or value_type is int:
 *         return q_assign_mul_d(out, py_obj)
 *     if value_type is SIUnit:             # <<<<<<<<<<<<<<
 *         return q_assign_mul_u(out, py_obj)
 *     return q_assign_mul_o(out, py_obj)
 */
  }

  /* "cyquant/quantities.pxd":130
 *     if value_type is SIUnit:
 *         return q_assign_mul_u(out, py_obj)
 *     return q_assign_mul_o(out, py_obj)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __pyx_f_7cyquant_10quantities_q_assign_mul_o(__pyx_v_out, __pyx_v_py_obj); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cyquant/quantities.pxd":122
 *     return c.Success
 * 
 * cdef inline q_assign_mul(Quantity out, object py_obj):             # <<<<<<<<<<<<<<
 *     cdef type value_type = type(py_obj)
 *     if value_type is Quantity:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cyquant.quantities.q_assign_mul", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value_type);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyquant/quantities.pxd":133
 * 
 * 
 * cdef inline q_assign_mul_q(Quantity out, Quantity rhs):             # <<<<<<<<<<<<<<
 *     c.mul_udata(out.udata, out.udata, rhs.udata)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_7cyquant_10quantities_q_assign_mul_q(struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_out, struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_rhs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("q_assign_mul_q", 0);

  /* "cyquant/quantities.pxd":134
 * 
 * cdef inline q_assign_mul_q(Quantity out, Quantity rhs):
 *     c.mul_udata(out.udata, out.udata, rhs.udata)             # <<<<<<<<<<<<<<
 * 
 *     if out.py_value is None and rhs.py_value is None:
 */
  (void)(__pyx_f_7cyquant_6ctypes_mul_udata(__pyx_v_out->udata, __pyx_v_out->udata, __pyx_v_rhs->udata));

  /* "cyquant/quantities.pxd":136
 *     c.mul_udata(out.udata, out.udata, rhs.udata)
 * 
 *     if out.py_value is None and rhs.py_value is None:             # <<<<<<<<<<<<<<
 *         out.c_value = out.c_value * rhs.c_value
 *         return c.Success
 */
  __pyx_t_2 = (__pyx_v_out->py_value == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_rhs->py_value == Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "cyquant/quantities.pxd":137
 * 
 *     if out.py_value is None and rhs.py_value is None:
 *         out.c_value = out.c_value * rhs.c_value             # <<<<<<<<<<<<<<
 *         return c.Success
 * 
 */
    __pyx_v_out->c_value = (__pyx_v_out->c_value * __pyx_v_rhs->c_value);

    /* "cyquant/quantities.pxd":138
 *     if out.py_value is None and rhs.py_value is None:
 *         out.c_value = out.c_value * rhs.c_value
 *         return c.Success             # <<<<<<<<<<<<<<
 * 
 *     if out.py_value is None:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyInt_From_enum____pyx_t_7cyquant_6ctypes_Error(__pyx_e_7cyquant_6ctypes_Success); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 138, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "cyquant/quantities.pxd":136
 *     c.mul_udata(out.udata, out.udata, rhs.udata)
 * 
 *     if out.py_value is None and rhs.py_value is None:             # <<<<<<<<<<<<<<
 *         out.c_value = out.c_value * rhs.c_value
 *         return c.Success
 */
  }

  /* "cyquant/quantities.pxd":140
 *         return c.Success
 * 
 *     if out.py_value is None:             # <<<<<<<<<<<<<<
 *         out.py_value = out.c_value
 * 
 */
  __pyx_t_1 = (__pyx_v_out->py_value == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cyquant/quantities.pxd":141
 * 
 *     if out.py_value is None:
 *         out.py_value = out.c_value             # <<<<<<<<<<<<<<
 * 
 *     if rhs.py_value is None:
 */
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_out->c_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __Pyx_GOTREF(__pyx_v_out->py_value);
    __Pyx_DECREF(__pyx_v_out->py_value);
    __pyx_v_out->py_value = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "cyquant/quantities.pxd":140
 *         return c.Success
 * 
 *     if out.py_value is None:             # <<<<<<<<<<<<<<
 *         out.py_value = out.c_value
 * 
 */
  }

  /* "cyquant/quantities.pxd":143
 *         out.py_value = out.c_value
 * 
 *     if rhs.py_value is None:             # <<<<<<<<<<<<<<
 *         out.py_value = out.py_value * rhs.c_value
 *     else:
 */
  __pyx_t_2 = (__pyx_v_rhs->py_value == Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "cyquant/quantities.pxd":144
 * 
 *     if rhs.py_value is None:
 *         out.py_value = out.py_value * rhs.c_value             # <<<<<<<<<<<<<<
 *     else:
 *         out.py_value = out.py_value * rhs.py_value
 */
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_rhs->c_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyNumber_Multiply(__pyx_v_out->py_value, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GIVEREF(__pyx_t_5);
    __Pyx_GOTREF(__pyx_v_out->py_value);
    __Pyx_DECREF(__pyx_v_out->py_value);
    __pyx_v_out->py_value = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "cyquant/quantities.pxd":143
 *         out.py_value = out.c_value
 * 
 *     if rhs.py_value is None:             # <<<<<<<<<<<<<<
 *         out.py_value = out.py_value * rhs.c_value
 *     else:
 */
    goto __pyx_L7;
  }

  /* "cyquant/quantities.pxd":146
 *         out.py_value = out.py_value * rhs.c_value
 *     else:
 *         out.py_value = out.py_value * rhs.py_value             # <<<<<<<<<<<<<<
 * 
 *     return q_norm(out)
 */
  /*else*/ {
    __pyx_t_5 = PyNumber_Multiply(__pyx_v_out->py_value, __pyx_v_rhs->py_value); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __Pyx_GOTREF(__pyx_v_out->py_value);
    __Pyx_DECREF(__pyx_v_out->py_value);
    __pyx_v_out->py_value = __pyx_t_5;
    __pyx_t_5 = 0;
  }
  __pyx_L7:;

  /* "cyquant/quantities.pxd":148
 *         out.py_value = out.py_value * rhs.py_value
 * 
 *     return q_norm(out)             # <<<<<<<<<<<<<<
 * 
 * cdef inline q_assign_mul_u(Quantity out, SIUnit rhs):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __pyx_f_7cyquant_10quantities_q_norm(__pyx_v_out); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "cyquant/quantities.pxd":133
 * 
 * 
 * cdef inline q_assign_mul_q(Quantity out, Quantity rhs):             # <<<<<<<<<<<<<<
 *     c.mul_udata(out.udata, out.udata, rhs.udata)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cyquant.quantities.q_assign_mul_q", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyquant/quantities.pxd":150
 *     return q_norm(out)
 * 
 * cdef inline q_assign_mul_u(Quantity out, SIUnit rhs):             # <<<<<<<<<<<<<<
 *     return c.mul_udata(out.udata, out.udata, rhs.data)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_7cyquant_10quantities_q_assign_mul_u(struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_out, struct __pyx_obj_7cyquant_10quantities_SIUnit *__pyx_v_rhs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("q_assign_mul_u", 0);

  /* "cyquant/quantities.pxd":151
 * 
 * cdef inline q_assign_mul_u(Quantity out, SIUnit rhs):
 *     return c.mul_udata(out.udata, out.udata, rhs.data)             # <<<<<<<<<<<<<<
 * 
 * cdef inline q_assign_mul_d(Quantity out, double rhs):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_7cyquant_6ctypes_Error(__pyx_f_7cyquant_6ctypes_mul_udata(__pyx_v_out->udata, __pyx_v_out->udata, __pyx_v_rhs->data)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cyquant/quantities.pxd":150
 *     return q_norm(out)
 * 
 * cdef inline q_assign_mul_u(Quantity out, SIUnit rhs):             # <<<<<<<<<<<<<<
 *     return c.mul_udata(out.udata, out.udata, rhs.data)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cyquant.quantities.q_assign_mul_u", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyquant/quantities.pxd":153
 *     return c.mul_udata(out.udata, out.udata, rhs.data)
 * 
 * cdef inline q_assign_mul_d(Quantity out, double rhs):             # <<<<<<<<<<<<<<
 *     if out.py_value is None:
 *         out.c_value = out.c_value * rhs
 */

static CYTHON_INLINE PyObject *__pyx_f_7cyquant_10quantities_q_assign_mul_d(struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_out, double __pyx_v_rhs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("q_assign_mul_d", 0);

  /* "cyquant/quantities.pxd":154
 * 
 * cdef inline q_assign_mul_d(Quantity out, double rhs):
 *     if out.py_value is None:             # <<<<<<<<<<<<<<
 *         out.c_value = out.c_value * rhs
 *     else:
 */
  __pyx_t_1 = (__pyx_v_out->py_value == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cyquant/quantities.pxd":155
 * cdef inline q_assign_mul_d(Quantity out, double rhs):
 *     if out.py_value is None:
 *         out.c_value = out.c_value * rhs             # <<<<<<<<<<<<<<
 *     else:
 *         out.py_value = out.py_value * rhs
 */
    __pyx_v_out->c_value = (__pyx_v_out->c_value * __pyx_v_rhs);

    /* "cyquant/quantities.pxd":154
 * 
 * cdef inline q_assign_mul_d(Quantity out, double rhs):
 *     if out.py_value is None:             # <<<<<<<<<<<<<<
 *         out.c_value = out.c_value * rhs
 *     else:
 */
    goto __pyx_L3;
  }

  /* "cyquant/quantities.pxd":157
 *         out.c_value = out.c_value * rhs
 *     else:
 *         out.py_value = out.py_value * rhs             # <<<<<<<<<<<<<<
 *     return c.Success
 * 
 */
  /*else*/ {
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_rhs); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyNumber_Multiply(__pyx_v_out->py_value, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GIVEREF(__pyx_t_4);
    __Pyx_GOTREF(__pyx_v_out->py_value);
    __Pyx_DECREF(__pyx_v_out->py_value);
    __pyx_v_out->py_value = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_L3:;

  /* "cyquant/quantities.pxd":158
 *     else:
 *         out.py_value = out.py_value * rhs
 *     return c.Success             # <<<<<<<<<<<<<<
 * 
 * cdef inline q_assign_mul_o(Quantity out, object rhs):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyInt_From_enum____pyx_t_7cyquant_6ctypes_Error(__pyx_e_7cyquant_6ctypes_Success); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "cyquant/quantities.pxd":153
 *     return c.mul_udata(out.udata, out.udata, rhs.data)
 * 
 * cdef inline q_assign_mul_d(Quantity out, double rhs):             # <<<<<<<<<<<<<<
 *     if out.py_value is None:
 *         out.c_value = out.c_value * rhs
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cyquant.quantities.q_assign_mul_d", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyquant/quantities.pxd":160
 *     return c.Success
 * 
 * cdef inline q_assign_mul_o(Quantity out, object rhs):             # <<<<<<<<<<<<<<
 *     if out.py_value is None:
 *         out.py_value = out.c_value * rhs
 */

static CYTHON_INLINE PyObject *__pyx_f_7cyquant_10quantities_q_assign_mul_o(struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_out, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("q_assign_mul_o", 0);

  /* "cyquant/quantities.pxd":161
 * 
 * cdef inline q_assign_mul_o(Quantity out, object rhs):
 *     if out.py_value is None:             # <<<<<<<<<<<<<<
 *         out.py_value = out.c_value * rhs
 *     else:
 */
  __pyx_t_1 = (__pyx_v_out->py_value == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cyquant/quantities.pxd":162
 * cdef inline q_assign_mul_o(Quantity out, object rhs):
 *     if out.py_value is None:
 *         out.py_value = out.c_value * rhs             # <<<<<<<<<<<<<<
 *     else:
 *         out.py_value = out.py_value * rhs
 */
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_out->c_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyNumber_Multiply(__pyx_t_3, __pyx_v_rhs); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GIVEREF(__pyx_t_4);
    __Pyx_GOTREF(__pyx_v_out->py_value);
    __Pyx_DECREF(__pyx_v_out->py_value);
    __pyx_v_out->py_value = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "cyquant/quantities.pxd":161
 * 
 * cdef inline q_assign_mul_o(Quantity out, object rhs):
 *     if out.py_value is None:             # <<<<<<<<<<<<<<
 *         out.py_value = out.c_value * rhs
 *     else:
 */
    goto __pyx_L3;
  }

  /* "cyquant/quantities.pxd":164
 *         out.py_value = out.c_value * rhs
 *     else:
 *         out.py_value = out.py_value * rhs             # <<<<<<<<<<<<<<
 *     return c.Success
 * 
 */
  /*else*/ {
    __pyx_t_4 = PyNumber_Multiply(__pyx_v_out->py_value, __pyx_v_rhs); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __Pyx_GOTREF(__pyx_v_out->py_value);
    __Pyx_DECREF(__pyx_v_out->py_value);
    __pyx_v_out->py_value = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_L3:;

  /* "cyquant/quantities.pxd":165
 *     else:
 *         out.py_value = out.py_value * rhs
 *     return c.Success             # <<<<<<<<<<<<<<
 * 
 * cdef inline q_assign_div(Quantity out, object rhs):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyInt_From_enum____pyx_t_7cyquant_6ctypes_Error(__pyx_e_7cyquant_6ctypes_Success); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "cyquant/quantities.pxd":160
 *     return c.Success
 * 
 * cdef inline q_assign_mul_o(Quantity out, object rhs):             # <<<<<<<<<<<<<<
 *     if out.py_value is None:
 *         out.py_value = out.c_value * rhs
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cyquant.quantities.q_assign_mul_o", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyquant/quantities.pxd":167
 *     return c.Success
 * 
 * cdef inline q_assign_div(Quantity out, object rhs):             # <<<<<<<<<<<<<<
 *     cdef type value_type = type(rhs)
 *     if value_type is Quantity:
 */

static CYTHON_INLINE PyObject *__pyx_f_7cyquant_10quantities_q_assign_div(struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_out, PyObject *__pyx_v_rhs) {
  PyTypeObject *__pyx_v_value_type = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  double __pyx_t_5;
  __Pyx_RefNannySetupContext("q_assign_div", 0);

  /* "cyquant/quantities.pxd":168
 * 
 * cdef inline q_assign_div(Quantity out, object rhs):
 *     cdef type value_type = type(rhs)             # <<<<<<<<<<<<<<
 *     if value_type is Quantity:
 *         return q_assign_div_q(out, rhs)
 */
  __Pyx_INCREF(((PyObject *)Py_TYPE(__pyx_v_rhs)));
  __pyx_v_value_type = ((PyTypeObject*)((PyObject *)Py_TYPE(__pyx_v_rhs)));

  /* "cyquant/quantities.pxd":169
 * cdef inline q_assign_div(Quantity out, object rhs):
 *     cdef type value_type = type(rhs)
 *     if value_type is Quantity:             # <<<<<<<<<<<<<<
 *         return q_assign_div_q(out, rhs)
 *     if value_type is float or value_type is int:
 */
  __pyx_t_1 = (__pyx_v_value_type == __pyx_ptype_7cyquant_10quantities_Quantity);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cyquant/quantities.pxd":170
 *     cdef type value_type = type(rhs)
 *     if value_type is Quantity:
 *         return q_assign_div_q(out, rhs)             # <<<<<<<<<<<<<<
 *     if value_type is float or value_type is int:
 *         return q_assign_div_d(out, rhs)
 */
    __Pyx_XDECREF(__pyx_r);
    if (!(likely(((__pyx_v_rhs) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_rhs, __pyx_ptype_7cyquant_10quantities_Quantity))))) __PYX_ERR(2, 170, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_7cyquant_10quantities_q_assign_div_q(__pyx_v_out, ((struct __pyx_obj_7cyquant_10quantities_Quantity *)__pyx_v_rhs)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 170, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "cyquant/quantities.pxd":169
 * cdef inline q_assign_div(Quantity out, object rhs):
 *     cdef type value_type = type(rhs)
 *     if value_type is Quantity:             # <<<<<<<<<<<<<<
 *         return q_assign_div_q(out, rhs)
 *     if value_type is float or value_type is int:
 */
  }

  /* "cyquant/quantities.pxd":171
 *     if value_type is Quantity:
 *         return q_assign_div_q(out, rhs)
 *     if value_type is float or value_type is int:             # <<<<<<<<<<<<<<
 *         return q_assign_div_d(out, rhs)
 *     if value_type is SIUnit:
 */
  __pyx_t_1 = (__pyx_v_value_type == (&PyFloat_Type));
  __pyx_t_4 = (__pyx_t_1 != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_4 = (__pyx_v_value_type == (&PyInt_Type));
  __pyx_t_1 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_1;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_2) {

    /* "cyquant/quantities.pxd":172
 *         return q_assign_div_q(out, rhs)
 *     if value_type is float or value_type is int:
 *         return q_assign_div_d(out, rhs)             # <<<<<<<<<<<<<<
 *     if value_type is SIUnit:
 *         return q_assign_div_u(out, rhs)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_rhs); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 172, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_7cyquant_10quantities_q_assign_div_d(__pyx_v_out, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "cyquant/quantities.pxd":171
 *     if value_type is Quantity:
 *         return q_assign_div_q(out, rhs)
 *     if value_type is float or value_type is int:             # <<<<<<<<<<<<<<
 *         return q_assign_div_d(out, rhs)
 *     if value_type is SIUnit:
 */
  }

  /* "cyquant/quantities.pxd":173
 *     if value_type is float or value_type is int:
 *         return q_assign_div_d(out, rhs)
 *     if value_type is SIUnit:             # <<<<<<<<<<<<<<
 *         return q_assign_div_u(out, rhs)
 *     return q_assign_div_o(out, rhs)
 */
  __pyx_t_2 = (__pyx_v_value_type == __pyx_ptype_7cyquant_10quantities_SIUnit);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "cyquant/quantities.pxd":174
 *         return q_assign_div_d(out, rhs)
 *     if value_type is SIUnit:
 *         return q_assign_div_u(out, rhs)             # <<<<<<<<<<<<<<
 *     return q_assign_div_o(out, rhs)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    if (!(likely(((__pyx_v_rhs) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_rhs, __pyx_ptype_7cyquant_10quantities_SIUnit))))) __PYX_ERR(2, 174, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_7cyquant_10quantities_q_assign_div_u(__pyx_v_out, ((struct __pyx_obj_7cyquant_10quantities_SIUnit *)__pyx_v_rhs)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "cyquant/quantities.pxd":173
 *     if value_type is float or value_type is int:
 *         return q_assign_div_d(out, rhs)
 *     if value_type is SIUnit:             # <<<<<<<<<<<<<<
 *         return q_assign_div_u(out, rhs)
 *     return q_assign_div_o(out, rhs)
 */
  }

  /* "cyquant/quantities.pxd":175
 *     if value_type is SIUnit:
 *         return q_assign_div_u(out, rhs)
 *     return q_assign_div_o(out, rhs)             # <<<<<<<<<<<<<<
 * 
 * cdef inline q_assign_div_q(Quantity out, Quantity rhs):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __pyx_f_7cyquant_10quantities_q_assign_div_o(__pyx_v_out, __pyx_v_rhs); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cyquant/quantities.pxd":167
 *     return c.Success
 * 
 * cdef inline q_assign_div(Quantity out, object rhs):             # <<<<<<<<<<<<<<
 *     cdef type value_type = type(rhs)
 *     if value_type is Quantity:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cyquant.quantities.q_assign_div", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value_type);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyquant/quantities.pxd":177
 *     return q_assign_div_o(out, rhs)
 * 
 * cdef inline q_assign_div_q(Quantity out, Quantity rhs):             # <<<<<<<<<<<<<<
 *     c.div_udata(out.udata, out.udata, rhs.udata)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_7cyquant_10quantities_q_assign_div_q(struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_out, struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_rhs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("q_assign_div_q", 0);

  /* "cyquant/quantities.pxd":178
 * 
 * cdef inline q_assign_div_q(Quantity out, Quantity rhs):
 *     c.div_udata(out.udata, out.udata, rhs.udata)             # <<<<<<<<<<<<<<
 * 
 *     if out.py_value is None and rhs.py_value is None:
 */
  (void)(__pyx_f_7cyquant_6ctypes_div_udata(__pyx_v_out->udata, __pyx_v_out->udata, __pyx_v_rhs->udata));

  /* "cyquant/quantities.pxd":180
 *     c.div_udata(out.udata, out.udata, rhs.udata)
 * 
 *     if out.py_value is None and rhs.py_value is None:             # <<<<<<<<<<<<<<
 *         if rhs.c_value == 0:
 *             return c.ZeroDiv
 */
  __pyx_t_2 = (__pyx_v_out->py_value == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_rhs->py_value == Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "cyquant/quantities.pxd":181
 * 
 *     if out.py_value is None and rhs.py_value is None:
 *         if rhs.c_value == 0:             # <<<<<<<<<<<<<<
 *             return c.ZeroDiv
 *         out.c_value = out.c_value / rhs.c_value
 */
    __pyx_t_1 = ((__pyx_v_rhs->c_value == 0.0) != 0);
    if (__pyx_t_1) {

      /* "cyquant/quantities.pxd":182
 *     if out.py_value is None and rhs.py_value is None:
 *         if rhs.c_value == 0:
 *             return c.ZeroDiv             # <<<<<<<<<<<<<<
 *         out.c_value = out.c_value / rhs.c_value
 *         return c.Success
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = __Pyx_PyInt_From_enum____pyx_t_7cyquant_6ctypes_Error(__pyx_e_7cyquant_6ctypes_ZeroDiv); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 182, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L0;

      /* "cyquant/quantities.pxd":181
 * 
 *     if out.py_value is None and rhs.py_value is None:
 *         if rhs.c_value == 0:             # <<<<<<<<<<<<<<
 *             return c.ZeroDiv
 *         out.c_value = out.c_value / rhs.c_value
 */
    }

    /* "cyquant/quantities.pxd":183
 *         if rhs.c_value == 0:
 *             return c.ZeroDiv
 *         out.c_value = out.c_value / rhs.c_value             # <<<<<<<<<<<<<<
 *         return c.Success
 * 
 */
    if (unlikely(__pyx_v_rhs->c_value == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(2, 183, __pyx_L1_error)
    }
    __pyx_v_out->c_value = (__pyx_v_out->c_value / __pyx_v_rhs->c_value);

    /* "cyquant/quantities.pxd":184
 *             return c.ZeroDiv
 *         out.c_value = out.c_value / rhs.c_value
 *         return c.Success             # <<<<<<<<<<<<<<
 * 
 *     if out.py_value is None:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyInt_From_enum____pyx_t_7cyquant_6ctypes_Error(__pyx_e_7cyquant_6ctypes_Success); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "cyquant/quantities.pxd":180
 *     c.div_udata(out.udata, out.udata, rhs.udata)
 * 
 *     if out.py_value is None and rhs.py_value is None:             # <<<<<<<<<<<<<<
 *         if rhs.c_value == 0:
 *             return c.ZeroDiv
 */
  }

  /* "cyquant/quantities.pxd":186
 *         return c.Success
 * 
 *     if out.py_value is None:             # <<<<<<<<<<<<<<
 *         out.py_value = out.c_value
 * 
 */
  __pyx_t_1 = (__pyx_v_out->py_value == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cyquant/quantities.pxd":187
 * 
 *     if out.py_value is None:
 *         out.py_value = out.c_value             # <<<<<<<<<<<<<<
 * 
 *     if rhs.py_value is None:
 */
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_out->c_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 187, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __Pyx_GOTREF(__pyx_v_out->py_value);
    __Pyx_DECREF(__pyx_v_out->py_value);
    __pyx_v_out->py_value = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "cyquant/quantities.pxd":186
 *         return c.Success
 * 
 *     if out.py_value is None:             # <<<<<<<<<<<<<<
 *         out.py_value = out.c_value
 * 
 */
  }

  /* "cyquant/quantities.pxd":189
 *         out.py_value = out.c_value
 * 
 *     if rhs.py_value is None:             # <<<<<<<<<<<<<<
 *         if rhs.c_value == 0:
 *             return c.ZeroDiv
 */
  __pyx_t_2 = (__pyx_v_rhs->py_value == Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "cyquant/quantities.pxd":190
 * 
 *     if rhs.py_value is None:
 *         if rhs.c_value == 0:             # <<<<<<<<<<<<<<
 *             return c.ZeroDiv
 *         out.py_value = out.py_value / rhs.c_value
 */
    __pyx_t_1 = ((__pyx_v_rhs->c_value == 0.0) != 0);
    if (__pyx_t_1) {

      /* "cyquant/quantities.pxd":191
 *     if rhs.py_value is None:
 *         if rhs.c_value == 0:
 *             return c.ZeroDiv             # <<<<<<<<<<<<<<
 *         out.py_value = out.py_value / rhs.c_value
 *     else:
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = __Pyx_PyInt_From_enum____pyx_t_7cyquant_6ctypes_Error(__pyx_e_7cyquant_6ctypes_ZeroDiv); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 191, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L0;

      /* "cyquant/quantities.pxd":190
 * 
 *     if rhs.py_value is None:
 *         if rhs.c_value == 0:             # <<<<<<<<<<<<<<
 *             return c.ZeroDiv
 *         out.py_value = out.py_value / rhs.c_value
 */
    }

    /* "cyquant/quantities.pxd":192
 *         if rhs.c_value == 0:
 *             return c.ZeroDiv
 *         out.py_value = out.py_value / rhs.c_value             # <<<<<<<<<<<<<<
 *     else:
 *         out.py_value = out.py_value / rhs.py_value
 */
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_rhs->c_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_v_out->py_value, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GIVEREF(__pyx_t_5);
    __Pyx_GOTREF(__pyx_v_out->py_value);
    __Pyx_DECREF(__pyx_v_out->py_value);
    __pyx_v_out->py_value = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "cyquant/quantities.pxd":189
 *         out.py_value = out.c_value
 * 
 *     if rhs.py_value is None:             # <<<<<<<<<<<<<<
 *         if rhs.c_value == 0:
 *             return c.ZeroDiv
 */
    goto __pyx_L8;
  }

  /* "cyquant/quantities.pxd":194
 *         out.py_value = out.py_value / rhs.c_value
 *     else:
 *         out.py_value = out.py_value / rhs.py_value             # <<<<<<<<<<<<<<
 * 
 *     return q_norm(out)
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_v_out->py_value, __pyx_v_rhs->py_value); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __Pyx_GOTREF(__pyx_v_out->py_value);
    __Pyx_DECREF(__pyx_v_out->py_value);
    __pyx_v_out->py_value = __pyx_t_5;
    __pyx_t_5 = 0;
  }
  __pyx_L8:;

  /* "cyquant/quantities.pxd":196
 *         out.py_value = out.py_value / rhs.py_value
 * 
 *     return q_norm(out)             # <<<<<<<<<<<<<<
 * 
 * cdef inline q_assign_div_u(Quantity out, SIUnit rhs):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __pyx_f_7cyquant_10quantities_q_norm(__pyx_v_out); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "cyquant/quantities.pxd":177
 *     return q_assign_div_o(out, rhs)
 * 
 * cdef inline q_assign_div_q(Quantity out, Quantity rhs):             # <<<<<<<<<<<<<<
 *     c.div_udata(out.udata, out.udata, rhs.udata)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cyquant.quantities.q_assign_div_q", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyquant/quantities.pxd":198
 *     return q_norm(out)
 * 
 * cdef inline q_assign_div_u(Quantity out, SIUnit rhs):             # <<<<<<<<<<<<<<
 *     c.div_udata(out.udata, out.udata, rhs.data)
 *     return c.Success
 */

static CYTHON_INLINE PyObject *__pyx_f_7cyquant_10quantities_q_assign_div_u(struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_out, struct __pyx_obj_7cyquant_10quantities_SIUnit *__pyx_v_rhs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("q_assign_div_u", 0);

  /* "cyquant/quantities.pxd":199
 * 
 * cdef inline q_assign_div_u(Quantity out, SIUnit rhs):
 *     c.div_udata(out.udata, out.udata, rhs.data)             # <<<<<<<<<<<<<<
 *     return c.Success
 * 
 */
  (void)(__pyx_f_7cyquant_6ctypes_div_udata(__pyx_v_out->udata, __pyx_v_out->udata, __pyx_v_rhs->data));

  /* "cyquant/quantities.pxd":200
 * cdef inline q_assign_div_u(Quantity out, SIUnit rhs):
 *     c.div_udata(out.udata, out.udata, rhs.data)
 *     return c.Success             # <<<<<<<<<<<<<<
 * 
 * cdef inline q_assign_div_d(Quantity out, double rhs):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_7cyquant_6ctypes_Error(__pyx_e_7cyquant_6ctypes_Success); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cyquant/quantities.pxd":198
 *     return q_norm(out)
 * 
 * cdef inline q_assign_div_u(Quantity out, SIUnit rhs):             # <<<<<<<<<<<<<<
 *     c.div_udata(out.udata, out.udata, rhs.data)
 *     return c.Success
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cyquant.quantities.q_assign_div_u", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyquant/quantities.pxd":202
 *     return c.Success
 * 
 * cdef inline q_assign_div_d(Quantity out, double rhs):             # <<<<<<<<<<<<<<
 *     if rhs == 0:
 *         return c.ZeroDiv
 */

static CYTHON_INLINE PyObject *__pyx_f_7cyquant_10quantities_q_assign_div_d(struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_out, double __pyx_v_rhs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("q_assign_div_d", 0);

  /* "cyquant/quantities.pxd":203
 * 
 * cdef inline q_assign_div_d(Quantity out, double rhs):
 *     if rhs == 0:             # <<<<<<<<<<<<<<
 *         return c.ZeroDiv
 * 
 */
  __pyx_t_1 = ((__pyx_v_rhs == 0.0) != 0);
  if (__pyx_t_1) {

    /* "cyquant/quantities.pxd":204
 * cdef inline q_assign_div_d(Quantity out, double rhs):
 *     if rhs == 0:
 *         return c.ZeroDiv             # <<<<<<<<<<<<<<
 * 
 *     if out.py_value is None:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_enum____pyx_t_7cyquant_6ctypes_Error(__pyx_e_7cyquant_6ctypes_ZeroDiv); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 204, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "cyquant/quantities.pxd":203
 * 
 * cdef inline q_assign_div_d(Quantity out, double rhs):
 *     if rhs == 0:             # <<<<<<<<<<<<<<
 *         return c.ZeroDiv
 * 
 */
  }

  /* "cyquant/quantities.pxd":206
 *         return c.ZeroDiv
 * 
 *     if out.py_value is None:             # <<<<<<<<<<<<<<
 *         out.c_value = out.c_value / rhs
 *         return c.Success
 */
  __pyx_t_1 = (__pyx_v_out->py_value == Py_None);
  __pyx_t_3 = (__pyx_t_1 != 0);
  if (__pyx_t_3) {

    /* "cyquant/quantities.pxd":207
 * 
 *     if out.py_value is None:
 *         out.c_value = out.c_value / rhs             # <<<<<<<<<<<<<<
 *         return c.Success
 *     else:
 */
    if (unlikely(__pyx_v_rhs == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(2, 207, __pyx_L1_error)
    }
    __pyx_v_out->c_value = (__pyx_v_out->c_value / __pyx_v_rhs);

    /* "cyquant/quantities.pxd":208
 *     if out.py_value is None:
 *         out.c_value = out.c_value / rhs
 *         return c.Success             # <<<<<<<<<<<<<<
 *     else:
 *         out.py_value = out.py_value / rhs
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_enum____pyx_t_7cyquant_6ctypes_Error(__pyx_e_7cyquant_6ctypes_Success); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 208, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "cyquant/quantities.pxd":206
 *         return c.ZeroDiv
 * 
 *     if out.py_value is None:             # <<<<<<<<<<<<<<
 *         out.c_value = out.c_value / rhs
 *         return c.Success
 */
  }

  /* "cyquant/quantities.pxd":210
 *         return c.Success
 *     else:
 *         out.py_value = out.py_value / rhs             # <<<<<<<<<<<<<<
 *         return q_norm(out)
 * 
 */
  /*else*/ {
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_rhs); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_v_out->py_value, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GIVEREF(__pyx_t_4);
    __Pyx_GOTREF(__pyx_v_out->py_value);
    __Pyx_DECREF(__pyx_v_out->py_value);
    __pyx_v_out->py_value = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "cyquant/quantities.pxd":211
 *     else:
 *         out.py_value = out.py_value / rhs
 *         return q_norm(out)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __pyx_f_7cyquant_10quantities_q_norm(__pyx_v_out); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 211, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "cyquant/quantities.pxd":202
 *     return c.Success
 * 
 * cdef inline q_assign_div_d(Quantity out, double rhs):             # <<<<<<<<<<<<<<
 *     if rhs == 0:
 *         return c.ZeroDiv
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cyquant.quantities.q_assign_div_d", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyquant/quantities.pxd":214
 * 
 * 
 * cdef inline q_assign_div_o(Quantity out, object rhs):             # <<<<<<<<<<<<<<
 *     if out.py_value is None:
 *         out.py_value = out.c_value / rhs
 */

static CYTHON_INLINE PyObject *__pyx_f_7cyquant_10quantities_q_assign_div_o(struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_out, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("q_assign_div_o", 0);

  /* "cyquant/quantities.pxd":215
 * 
 * cdef inline q_assign_div_o(Quantity out, object rhs):
 *     if out.py_value is None:             # <<<<<<<<<<<<<<
 *         out.py_value = out.c_value / rhs
 *     else:
 */
  __pyx_t_1 = (__pyx_v_out->py_value == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cyquant/quantities.pxd":216
 * cdef inline q_assign_div_o(Quantity out, object rhs):
 *     if out.py_value is None:
 *         out.py_value = out.c_value / rhs             # <<<<<<<<<<<<<<
 *     else:
 *         out.py_value = out.py_value / rhs
 */
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_out->c_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_v_rhs); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GIVEREF(__pyx_t_4);
    __Pyx_GOTREF(__pyx_v_out->py_value);
    __Pyx_DECREF(__pyx_v_out->py_value);
    __pyx_v_out->py_value = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "cyquant/quantities.pxd":215
 * 
 * cdef inline q_assign_div_o(Quantity out, object rhs):
 *     if out.py_value is None:             # <<<<<<<<<<<<<<
 *         out.py_value = out.c_value / rhs
 *     else:
 */
    goto __pyx_L3;
  }

  /* "cyquant/quantities.pxd":218
 *         out.py_value = out.c_value / rhs
 *     else:
 *         out.py_value = out.py_value / rhs             # <<<<<<<<<<<<<<
 *     return q_norm(out)
 * 
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_v_out->py_value, __pyx_v_rhs); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __Pyx_GOTREF(__pyx_v_out->py_value);
    __Pyx_DECREF(__pyx_v_out->py_value);
    __pyx_v_out->py_value = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_L3:;

  /* "cyquant/quantities.pxd":219
 *     else:
 *         out.py_value = out.py_value / rhs
 *     return q_norm(out)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __pyx_f_7cyquant_10quantities_q_norm(__pyx_v_out); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "cyquant/quantities.pxd":214
 * 
 * 
 * cdef inline q_assign_div_o(Quantity out, object rhs):             # <<<<<<<<<<<<<<
 *     if out.py_value is None:
 *         out.py_value = out.c_value / rhs
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cyquant.quantities.q_assign_div_o", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyquant/quantities.pxd":222
 * 
 * 
 * cdef inline q_norm(Quantity out):             # <<<<<<<<<<<<<<
 *     cdef type ret_type = type(out.py_value)
 *     if ret_type is float or ret_type is int:
 */

static CYTHON_INLINE PyObject *__pyx_f_7cyquant_10quantities_q_norm(struct __pyx_obj_7cyquant_10quantities_Quantity *__pyx_v_out) {
  PyTypeObject *__pyx_v_ret_type = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  double __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("q_norm", 0);

  /* "cyquant/quantities.pxd":223
 * 
 * cdef inline q_norm(Quantity out):
 *     cdef type ret_type = type(out.py_value)             # <<<<<<<<<<<<<<
 *     if ret_type is float or ret_type is int:
 *         out.c_value = out.py_value
 */
  __Pyx_INCREF(((PyObject *)Py_TYPE(__pyx_v_out->py_value)));
  __pyx_v_ret_type = ((PyTypeObject*)((PyObject *)Py_TYPE(__pyx_v_out->py_value)));

  /* "cyquant/quantities.pxd":224
 * cdef inline q_norm(Quantity out):
 *     cdef type ret_type = type(out.py_value)
 *     if ret_type is float or ret_type is int:             # <<<<<<<<<<<<<<
 *         out.c_value = out.py_value
 *         out.py_value = None
 */
  __pyx_t_2 = (__pyx_v_ret_type == (&PyFloat_Type));
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_ret_type == (&PyInt_Type));
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "cyquant/quantities.pxd":225
 *     cdef type ret_type = type(out.py_value)
 *     if ret_type is float or ret_type is int:
 *         out.c_value = out.py_value             # <<<<<<<<<<<<<<
 *         out.py_value = None
 * 
 */
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_out->py_value); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 225, __pyx_L1_error)
    __pyx_v_out->c_value = __pyx_t_4;

    /* "cyquant/quantities.pxd":226
 *     if ret_type is float or ret_type is int:
 *         out.c_value = out.py_value
 *         out.py_value = None             # <<<<<<<<<<<<<<
 * 
 *     return c.Success
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_out->py_value);
    __Pyx_DECREF(__pyx_v_out->py_value);
    __pyx_v_out->py_value = Py_None;

    /* "cyquant/quantities.pxd":224
 * cdef inline q_norm(Quantity out):
 *     cdef type ret_type = type(out.py_value)
 *     if ret_type is float or ret_type is int:             # <<<<<<<<<<<<<<
 *         out.c_value = out.py_value
 *         out.py_value = None
 */
  }

  /* "cyquant/quantities.pxd":228
 *         out.py_value = None
 * 
 *     return c.Success             # <<<<<<<<<<<<<<
 * 
 * cdef inline c_r_approx(double l, c.UData ul, double r, c.UData ur, double rtol):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyInt_From_enum____pyx_t_7cyquant_6ctypes_Error(__pyx_e_7cyquant_6ctypes_Success); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "cyquant/quantities.pxd":222
 * 
 * 
 * cdef inline q_norm(Quantity out):             # <<<<<<<<<<<<<<
 *     cdef type ret_type = type(out.py_value)
 *     if ret_type is float or ret_type is int:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cyquant.quantities.q_norm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret_type);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyquant/quantities.pxd":230
 *     return c.Success
 * 
 * cdef inline c_r_approx(double l, c.UData ul, double r, c.UData ur, double rtol):             # <<<<<<<<<<<<<<
 *     cdef int error_code
 *     cdef c.UData u_min
 */

static CYTHON_INLINE PyObject *__pyx_f_7cyquant_10quantities_c_r_approx(double __pyx_v_l, struct __pyx_t_7cyquant_6ctypes_UData __pyx_v_ul, double __pyx_v_r, struct __pyx_t_7cyquant_6ctypes_UData __pyx_v_ur, double __pyx_v_rtol) {
  int __pyx_v_error_code;
  struct __pyx_t_7cyquant_6ctypes_UData __pyx_v_u_min;
  double __pyx_v_epsilon;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("c_r_approx", 0);

  /* "cyquant/quantities.pxd":235
 *     cdef double epsilon
 * 
 *     error_code = c.min_udata(u_min, ul, ur)             # <<<<<<<<<<<<<<
 *     if error_code == c.Success:
 *         l = (l * ul.scale / u_min.scale)
 */
  __pyx_v_error_code = __pyx_f_7cyquant_6ctypes_min_udata(__pyx_v_u_min, __pyx_v_ul, __pyx_v_ur);

  /* "cyquant/quantities.pxd":236
 * 
 *     error_code = c.min_udata(u_min, ul, ur)
 *     if error_code == c.Success:             # <<<<<<<<<<<<<<
 *         l = (l * ul.scale / u_min.scale)
 *         r = (r * ur.scale / u_min.scale)
 */
  __pyx_t_1 = ((__pyx_v_error_code == __pyx_e_7cyquant_6ctypes_Success) != 0);
  if (__pyx_t_1) {

    /* "cyquant/quantities.pxd":237
 *     error_code = c.min_udata(u_min, ul, ur)
 *     if error_code == c.Success:
 *         l = (l * ul.scale / u_min.scale)             # <<<<<<<<<<<<<<
 *         r = (r * ur.scale / u_min.scale)
 * 
 */
    __pyx_t_2 = (__pyx_v_l * __pyx_v_ul.scale);
    if (unlikely(__pyx_v_u_min.scale == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(2, 237, __pyx_L1_error)
    }
    __pyx_v_l = (__pyx_t_2 / __pyx_v_u_min.scale);

    /* "cyquant/quantities.pxd":238
 *     if error_code == c.Success:
 *         l = (l * ul.scale / u_min.scale)
 *         r = (r * ur.scale / u_min.scale)             # <<<<<<<<<<<<<<
 * 
 *         epsilon = fmax(1.0, fmax(fabs(l), fabs(r))) * rtol
 */
    __pyx_t_2 = (__pyx_v_r * __pyx_v_ur.scale);
    if (unlikely(__pyx_v_u_min.scale == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(2, 238, __pyx_L1_error)
    }
    __pyx_v_r = (__pyx_t_2 / __pyx_v_u_min.scale);

    /* "cyquant/quantities.pxd":240
 *         r = (r * ur.scale / u_min.scale)
 * 
 *         epsilon = fmax(1.0, fmax(fabs(l), fabs(r))) * rtol             # <<<<<<<<<<<<<<
 *         return fabs(l - r) <= fabs(epsilon)
 * 
 */
    __pyx_v_epsilon = (fmax(1.0, fmax(fabs(__pyx_v_l), fabs(__pyx_v_r))) * __pyx_v_rtol);

    /* "cyquant/quantities.pxd":241
 * 
 *         epsilon = fmax(1.0, fmax(fabs(l), fabs(r))) * rtol
 *         return fabs(l - r) <= fabs(epsilon)             # <<<<<<<<<<<<<<
 * 
 *     if error_code == c.DimensionMismatch:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyBool_FromLong((fabs((__pyx_v_l - __pyx_v_r)) <= fabs(__pyx_v_epsilon))); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 241, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "cyquant/quantities.pxd":236
 * 
 *     error_code = c.min_udata(u_min, ul, ur)
 *     if error_code == c.Success:             # <<<<<<<<<<<<<<
 *         l = (l * ul.scale / u_min.scale)
 *         r = (r * ur.scale / u_min.scale)
 */
  }

  /* "cyquant/quantities.pxd":243
 *         return fabs(l - r) <= fabs(epsilon)
 * 
 *     if error_code == c.DimensionMismatch:             # <<<<<<<<<<<<<<
 *         raise ValueError("Incompatible Units")
 * 
 */
  __pyx_t_1 = ((__pyx_v_error_code == __pyx_e_7cyquant_6ctypes_DimensionMismatch) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "cyquant/quantities.pxd":244
 * 
 *     if error_code == c.DimensionMismatch:
 *         raise ValueError("Incompatible Units")             # <<<<<<<<<<<<<<
 * 
 *     raise RuntimeError("Unknown Error: %i" % error_code)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 244, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 244, __pyx_L1_error)

    /* "cyquant/quantities.pxd":243
 *         return fabs(l - r) <= fabs(epsilon)
 * 
 *     if error_code == c.DimensionMismatch:             # <<<<<<<<<<<<<<
 *         raise ValueError("Incompatible Units")
 * 
 */
  }

  /* "cyquant/quantities.pxd":246
 *         raise ValueError("Incompatible Units")
 * 
 *     raise RuntimeError("Unknown Error: %i" % error_code)             # <<<<<<<<<<<<<<
 * 
 * cdef inline py_r_approx(object lhs, c.UData u_lhs, object rhs, c.UData u_rhs, double rtol):
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_error_code); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Unknown_Error_i, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_RuntimeError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_Raise(__pyx_t_3, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __PYX_ERR(2, 246, __pyx_L1_error)

  /* "cyquant/quantities.pxd":230
 *     return c.Success
 * 
 * cdef inline c_r_approx(double l, c.UData ul, double r, c.UData ur, double rtol):             # <<<<<<<<<<<<<<
 *     cdef int error_code
 *     cdef c.UData u_min
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cyquant.quantities.c_r_approx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyquant/quantities.pxd":248
 *     raise RuntimeError("Unknown Error: %i" % error_code)
 * 
 * cdef inline py_r_approx(object lhs, c.UData u_lhs, object rhs, c.UData u_rhs, double rtol):             # <<<<<<<<<<<<<<
 *     cdef int error_code
 *     cdef c.UData u_min
 */

static CYTHON_INLINE PyObject *__pyx_f_7cyquant_10quantities_py_r_approx(PyObject *__pyx_v_lhs, struct __pyx_t_7cyquant_6ctypes_UData __pyx_v_u_lhs, PyObject *__pyx_v_rhs, struct __pyx_t_7cyquant_6ctypes_UData __pyx_v_u_rhs, double __pyx_v_rtol) {
  int __pyx_v_error_code;
  struct __pyx_t_7cyquant_6ctypes_UData __pyx_v_u_min;
  PyObject *__pyx_v_lhs_norm = 0;
  PyObject *__pyx_v_rhs_norm = 0;
  PyObject *__pyx_v_epsilon = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("py_r_approx", 0);

  /* "cyquant/quantities.pxd":253
 *     cdef object lhs_norm, rhs_norm, epsilon
 * 
 *     error_code = c.min_udata(u_min, u_lhs, u_rhs)             # <<<<<<<<<<<<<<
 *     if error_code == c.Success:
 *         lhs_norm = lhs * (u_lhs.scale / u_min.scale)
 */
  __pyx_v_error_code = __pyx_f_7cyquant_6ctypes_min_udata(__pyx_v_u_min, __pyx_v_u_lhs, __pyx_v_u_rhs);

  /* "cyquant/quantities.pxd":254
 * 
 *     error_code = c.min_udata(u_min, u_lhs, u_rhs)
 *     if error_code == c.Success:             # <<<<<<<<<<<<<<
 *         lhs_norm = lhs * (u_lhs.scale / u_min.scale)
 *         rhs_norm = rhs * (u_rhs.scale / u_min.scale)
 */
  __pyx_t_1 = ((__pyx_v_error_code == __pyx_e_7cyquant_6ctypes_Success) != 0);
  if (__pyx_t_1) {

    /* "cyquant/quantities.pxd":255
 *     error_code = c.min_udata(u_min, u_lhs, u_rhs)
 *     if error_code == c.Success:
 *         lhs_norm = lhs * (u_lhs.scale / u_min.scale)             # <<<<<<<<<<<<<<
 *         rhs_norm = rhs * (u_rhs.scale / u_min.scale)
 * 
 */
    if (unlikely(__pyx_v_u_min.scale == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(2, 255, __pyx_L1_error)
    }
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v_u_lhs.scale / __pyx_v_u_min.scale)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 255, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Multiply(__pyx_v_lhs, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 255, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_lhs_norm = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "cyquant/quantities.pxd":256
 *     if error_code == c.Success:
 *         lhs_norm = lhs * (u_lhs.scale / u_min.scale)
 *         rhs_norm = rhs * (u_rhs.scale / u_min.scale)             # <<<<<<<<<<<<<<
 * 
 *         epsilon = max(1.0, abs(lhs_norm), abs(rhs_norm)) * fabs(rtol)
 */
    if (unlikely(__pyx_v_u_min.scale == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(2, 256, __pyx_L1_error)
    }
    __pyx_t_3 = PyFloat_FromDouble((__pyx_v_u_rhs.scale / __pyx_v_u_min.scale)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 256, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyNumber_Multiply(__pyx_v_rhs, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 256, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_rhs_norm = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "cyquant/quantities.pxd":258
 *         rhs_norm = rhs * (u_rhs.scale / u_min.scale)
 * 
 *         epsilon = max(1.0, abs(lhs_norm), abs(rhs_norm)) * fabs(rtol)             # <<<<<<<<<<<<<<
 *         return abs(lhs_norm - rhs_norm) <= epsilon
 * 
 */
    __pyx_t_2 = __Pyx_PyNumber_Absolute(__pyx_v_lhs_norm); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 258, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyNumber_Absolute(__pyx_v_rhs_norm); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 258, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = 1.0;
    __pyx_t_6 = PyFloat_FromDouble(__pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 258, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyObject_RichCompare(__pyx_t_2, __pyx_t_6, Py_GT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 258, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 258, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_1) {
      __Pyx_INCREF(__pyx_t_2);
      __pyx_t_5 = __pyx_t_2;
    } else {
      __pyx_t_7 = PyFloat_FromDouble(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 258, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_5 = __pyx_t_7;
      __pyx_t_7 = 0;
    }
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_7 = __pyx_t_5;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = PyObject_RichCompare(__pyx_t_3, __pyx_t_7, Py_GT); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 258, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 258, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_1) {
      __Pyx_INCREF(__pyx_t_3);
      __pyx_t_5 = __pyx_t_3;
    } else {
      __Pyx_INCREF(__pyx_t_7);
      __pyx_t_5 = __pyx_t_7;
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyFloat_FromDouble(fabs(__pyx_v_rtol)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 258, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Multiply(__pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 258, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_epsilon = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "cyquant/quantities.pxd":259
 * 
 *         epsilon = max(1.0, abs(lhs_norm), abs(rhs_norm)) * fabs(rtol)
 *         return abs(lhs_norm - rhs_norm) <= epsilon             # <<<<<<<<<<<<<<
 * 
 *     if error_code == c.DimensionMismatch:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_lhs_norm, __pyx_v_rhs_norm); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 259, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyNumber_Absolute(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 259, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_v_epsilon, Py_LE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 259, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "cyquant/quantities.pxd":254
 * 
 *     error_code = c.min_udata(u_min, u_lhs, u_rhs)
 *     if error_code == c.Success:             # <<<<<<<<<<<<<<
 *         lhs_norm = lhs * (u_lhs.scale / u_min.scale)
 *         rhs_norm = rhs * (u_rhs.scale / u_min.scale)
 */
  }

  /* "cyquant/quantities.pxd":261
 *         return abs(lhs_norm - rhs_norm) <= epsilon
 * 
 *     if error_code == c.DimensionMismatch:             # <<<<<<<<<<<<<<
 *         raise ValueError("Incompatible Units")
 * 
 */
  __pyx_t_1 = ((__pyx_v_error_code == __pyx_e_7cyquant_6ctypes_DimensionMismatch) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "cyquant/quantities.pxd":262
 * 
 *     if error_code == c.DimensionMismatch:
 *         raise ValueError("Incompatible Units")             # <<<<<<<<<<<<<<
 * 
 *     raise RuntimeError("Unknown Error: %i" % error_code)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 262, __pyx_L1_error)

    /* "cyquant/quantities.pxd":261
 *         return abs(lhs_norm - rhs_norm) <= epsilon
 * 
 *     if error_code == c.DimensionMismatch:             # <<<<<<<<<<<<<<
 *         raise ValueError("Incompatible Units")
 * 
 */
  }

  /* "cyquant/quantities.pxd":264
 *         raise ValueError("Incompatible Units")
 * 
 *     raise RuntimeError("Unknown Error: %i" % error_code)             # <<<<<<<<<<<<<<
 * 
 * cdef inline c_a_approx(double l, c.UData ul, double r, c.UData ur, double epsilon):
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_error_code); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_Unknown_Error_i, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_RuntimeError, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_Raise(__pyx_t_3, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __PYX_ERR(2, 264, __pyx_L1_error)

  /* "cyquant/quantities.pxd":248
 *     raise RuntimeError("Unknown Error: %i" % error_code)
 * 
 * cdef inline py_r_approx(object lhs, c.UData u_lhs, object rhs, c.UData u_rhs, double rtol):             # <<<<<<<<<<<<<<
 *     cdef int error_code
 *     cdef c.UData u_min
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("cyquant.quantities.py_r_approx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_lhs_norm);
  __Pyx_XDECREF(__pyx_v_rhs_norm);
  __Pyx_XDECREF(__pyx_v_epsilon);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyquant/quantities.pxd":266
 *     raise RuntimeError("Unknown Error: %i" % error_code)
 * 
 * cdef inline c_a_approx(double l, c.UData ul, double r, c.UData ur, double epsilon):             # <<<<<<<<<<<<<<
 *     cdef c.UData u_min
 *     cdef l_norm, r_norm
 */

static CYTHON_INLINE PyObject *__pyx_f_7cyquant_10quantities_c_a_approx(double __pyx_v_l, struct __pyx_t_7cyquant_6ctypes_UData __pyx_v_ul, double __pyx_v_r, struct __pyx_t_7cyquant_6ctypes_UData __pyx_v_ur, double __pyx_v_epsilon) {
  struct __pyx_t_7cyquant_6ctypes_UData __pyx_v_u_min;
  PyObject *__pyx_v_l_norm = 0;
  PyObject *__pyx_v_r_norm = 0;
  PyObject *__pyx_v_error_code = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  double __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("c_a_approx", 0);

  /* "cyquant/quantities.pxd":270
 *     cdef l_norm, r_norm
 * 
 *     cdef error_code = c.min_udata(u_min, ul, ur)             # <<<<<<<<<<<<<<
 *     if error_code == c.Success:
 *         l_norm = l * (ul.scale / u_min.scale)
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_7cyquant_6ctypes_Error(__pyx_f_7cyquant_6ctypes_min_udata(__pyx_v_u_min, __pyx_v_ul, __pyx_v_ur)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_error_code = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cyquant/quantities.pxd":271
 * 
 *     cdef error_code = c.min_udata(u_min, ul, ur)
 *     if error_code == c.Success:             # <<<<<<<<<<<<<<
 *         l_norm = l * (ul.scale / u_min.scale)
 *         r_norm = r * (ur.scale / u_min.scale)
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_7cyquant_6ctypes_Error(__pyx_e_7cyquant_6ctypes_Success); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_error_code, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 271, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(2, 271, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "cyquant/quantities.pxd":272
 *     cdef error_code = c.min_udata(u_min, ul, ur)
 *     if error_code == c.Success:
 *         l_norm = l * (ul.scale / u_min.scale)             # <<<<<<<<<<<<<<
 *         r_norm = r * (ur.scale / u_min.scale)
 * 
 */
    if (unlikely(__pyx_v_u_min.scale == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(2, 272, __pyx_L1_error)
    }
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v_l * (__pyx_v_ul.scale / __pyx_v_u_min.scale))); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 272, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_l_norm = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "cyquant/quantities.pxd":273
 *     if error_code == c.Success:
 *         l_norm = l * (ul.scale / u_min.scale)
 *         r_norm = r * (ur.scale / u_min.scale)             # <<<<<<<<<<<<<<
 * 
 *         return fabs(l_norm - r_norm) <= fabs(epsilon)
 */
    if (unlikely(__pyx_v_u_min.scale == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(2, 273, __pyx_L1_error)
    }
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v_r * (__pyx_v_ur.scale / __pyx_v_u_min.scale))); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_r_norm = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "cyquant/quantities.pxd":275
 *         r_norm = r * (ur.scale / u_min.scale)
 * 
 *         return fabs(l_norm - r_norm) <= fabs(epsilon)             # <<<<<<<<<<<<<<
 * 
 *     if error_code == c.DimensionMismatch:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyNumber_Subtract(__pyx_v_l_norm, __pyx_v_r_norm); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 275, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 275, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyBool_FromLong((fabs(__pyx_t_4) <= fabs(__pyx_v_epsilon))); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 275, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "cyquant/quantities.pxd":271
 * 
 *     cdef error_code = c.min_udata(u_min, ul, ur)
 *     if error_code == c.Success:             # <<<<<<<<<<<<<<
 *         l_norm = l * (ul.scale / u_min.scale)
 *         r_norm = r * (ur.scale / u_min.scale)
 */
  }

  /* "cyquant/quantities.pxd":277
 *         return fabs(l_norm - r_norm) <= fabs(epsilon)
 * 
 *     if error_code == c.DimensionMismatch:             # <<<<<<<<<<<<<<
 *         raise ValueError("incompatible units")
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_enum____pyx_t_7cyquant_6ctypes_Error(__pyx_e_7cyquant_6ctypes_DimensionMismatch); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_error_code, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 277, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(2, 277, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_3)) {

    /* "cyquant/quantities.pxd":278
 * 
 *     if error_code == c.DimensionMismatch:
 *         raise ValueError("incompatible units")             # <<<<<<<<<<<<<<
 * 
 *     raise RuntimeError("unknown error ({})".format(error_code))
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 278, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(2, 278, __pyx_L1_error)

    /* "cyquant/quantities.pxd":277
 *         return fabs(l_norm - r_norm) <= fabs(epsilon)
 * 
 *     if error_code == c.DimensionMismatch:             # <<<<<<<<<<<<<<
 *         raise ValueError("incompatible units")
 * 
 */
  }

  /* "cyquant/quantities.pxd":280
 *         raise ValueError("incompatible units")
 * 
 *     raise RuntimeError("unknown error ({})".format(error_code))             # <<<<<<<<<<<<<<
 * 
 * cdef inline py_a_approx(object l, c.UData ul, object r, c.UData ur, double epsilon):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_unknown_error, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_v_error_code) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_error_code);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_RuntimeError, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __PYX_ERR(2, 280, __pyx_L1_error)

  /* "cyquant/quantities.pxd":266
 *     raise RuntimeError("Unknown Error: %i" % error_code)
 * 
 * cdef inline c_a_approx(double l, c.UData ul, double r, c.UData ur, double epsilon):             # <<<<<<<<<<<<<<
 *     cdef c.UData u_min
 *     cdef l_norm, r_norm
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cyquant.quantities.c_a_approx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_l_norm);
  __Pyx_XDECREF(__pyx_v_r_norm);
  __Pyx_XDECREF(__pyx_v_error_code);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyquant/quantities.pxd":282
 *     raise RuntimeError("unknown error ({})".format(error_code))
 * 
 * cdef inline py_a_approx(object l, c.UData ul, object r, c.UData ur, double epsilon):             # <<<<<<<<<<<<<<
 *     cdef c.UData u_min
 *     cdef object l_norm, r_norm
 */

static CYTHON_INLINE PyObject *__pyx_f_7cyquant_10quantities_py_a_approx(PyObject *__pyx_v_l, struct __pyx_t_7cyquant_6ctypes_UData __pyx_v_ul, PyObject *__pyx_v_r, struct __pyx_t_7cyquant_6ctypes_UData __pyx_v_ur, double __pyx_v_epsilon) {
  struct __pyx_t_7cyquant_6ctypes_UData __pyx_v_u_min;
  PyObject *__pyx_v_l_norm = 0;
  PyObject *__pyx_v_r_norm = 0;
  PyObject *__pyx_v_error_code = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("py_a_approx", 0);

  /* "cyquant/quantities.pxd":286
 *     cdef object l_norm, r_norm
 * 
 *     cdef error_code = c.min_udata(u_min, ul, ur)             # <<<<<<<<<<<<<<
 *     if error_code == c.Success:
 *         l_norm = l * (ul.scale / u_min.scale)
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_7cyquant_6ctypes_Error(__pyx_f_7cyquant_6ctypes_min_udata(__pyx_v_u_min, __pyx_v_ul, __pyx_v_ur)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_error_code = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cyquant/quantities.pxd":287
 * 
 *     cdef error_code = c.min_udata(u_min, ul, ur)
 *     if error_code == c.Success:             # <<<<<<<<<<<<<<
 *         l_norm = l * (ul.scale / u_min.scale)
 *         r_norm = r * (ur.scale / u_min.scale)
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_7cyquant_6ctypes_Error(__pyx_e_7cyquant_6ctypes_Success); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_error_code, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 287, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(2, 287, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "cyquant/quantities.pxd":288
 *     cdef error_code = c.min_udata(u_min, ul, ur)
 *     if error_code == c.Success:
 *         l_norm = l * (ul.scale / u_min.scale)             # <<<<<<<<<<<<<<
 *         r_norm = r * (ur.scale / u_min.scale)
 * 
 */
    if (unlikely(__pyx_v_u_min.scale == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(2, 288, __pyx_L1_error)
    }
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v_ul.scale / __pyx_v_u_min.scale)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 288, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyNumber_Multiply(__pyx_v_l, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 288, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_l_norm = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "cyquant/quantities.pxd":289
 *     if error_code == c.Success:
 *         l_norm = l * (ul.scale / u_min.scale)
 *         r_norm = r * (ur.scale / u_min.scale)             # <<<<<<<<<<<<<<
 * 
 *         return abs(l_norm - r_norm) <= fabs(epsilon)
 */
    if (unlikely(__pyx_v_u_min.scale == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(2, 289, __pyx_L1_error)
    }
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_ur.scale / __pyx_v_u_min.scale)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyNumber_Multiply(__pyx_v_r, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_r_norm = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "cyquant/quantities.pxd":291
 *         r_norm = r * (ur.scale / u_min.scale)
 * 
 *         return abs(l_norm - r_norm) <= fabs(epsilon)             # <<<<<<<<<<<<<<
 * 
 *     if error_code == c.DimensionMismatch:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyNumber_Subtract(__pyx_v_l_norm, __pyx_v_r_norm); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyNumber_Absolute(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyFloat_FromDouble(fabs(__pyx_v_epsilon)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_LE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 291, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "cyquant/quantities.pxd":287
 * 
 *     cdef error_code = c.min_udata(u_min, ul, ur)
 *     if error_code == c.Success:             # <<<<<<<<<<<<<<
 *         l_norm = l * (ul.scale / u_min.scale)
 *         r_norm = r * (ur.scale / u_min.scale)
 */
  }

  /* "cyquant/quantities.pxd":293
 *         return abs(l_norm - r_norm) <= fabs(epsilon)
 * 
 *     if error_code == c.DimensionMismatch:             # <<<<<<<<<<<<<<
 *         raise ValueError("incompatible units")
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_enum____pyx_t_7cyquant_6ctypes_Error(__pyx_e_7cyquant_6ctypes_DimensionMismatch); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_error_code, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 293, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(2, 293, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(__pyx_t_3)) {

    /* "cyquant/quantities.pxd":294
 * 
 *     if error_code == c.DimensionMismatch:
 *         raise ValueError("incompatible units")             # <<<<<<<<<<<<<<
 * 
 *     raise RuntimeError("unknown error ({})".format(error_code))
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 294, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(2, 294, __pyx_L1_error)

    /* "cyquant/quantities.pxd":293
 *         return abs(l_norm - r_norm) <= fabs(epsilon)
 * 
 *     if error_code == c.DimensionMismatch:             # <<<<<<<<<<<<<<
 *         raise ValueError("incompatible units")
 * 
 */
  }

  /* "cyquant/quantities.pxd":296
 *         raise ValueError("incompatible units")
 * 
 *     raise RuntimeError("unknown error ({})".format(error_code))             # <<<<<<<<<<<<<<
 * 
 * cdef inline c_q_approx(double l, c.UData ul, double r, c.UData ur, double q, c.UData uq):
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_unknown_error, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_1, __pyx_v_error_code) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_error_code);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_RuntimeError, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_Raise(__pyx_t_4, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __PYX_ERR(2, 296, __pyx_L1_error)

  /* "cyquant/quantities.pxd":282
 *     raise RuntimeError("unknown error ({})".format(error_code))
 * 
 * cdef inline py_a_approx(object l, c.UData ul, object r, c.UData ur, double epsilon):             # <<<<<<<<<<<<<<
 *     cdef c.UData u_min
 *     cdef object l_norm, r_norm
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cyquant.quantities.py_a_approx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_l_norm);
  __Pyx_XDECREF(__pyx_v_r_norm);
  __Pyx_XDECREF(__pyx_v_error_code);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyquant/quantities.pxd":298
 *     raise RuntimeError("unknown error ({})".format(error_code))
 * 
 * cdef inline c_q_approx(double l, c.UData ul, double r, c.UData ur, double q, c.UData uq):             # <<<<<<<<<<<<<<
 *     if not c.eq_ddata(ul.dimensions, uq.dimensions):
 *         raise ValueError("incompatible units")
 */

static CYTHON_INLINE PyObject *__pyx_f_7cyquant_10quantities_c_q_approx(double __pyx_v_l, struct __pyx_t_7cyquant_6ctypes_UData __pyx_v_ul, double __pyx_v_r, struct __pyx_t_7cyquant_6ctypes_UData __pyx_v_ur, double __pyx_v_q, struct __pyx_t_7cyquant_6ctypes_UData __pyx_v_uq) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  double __pyx_t_3;
  __Pyx_RefNannySetupContext("c_q_approx", 0);

  /* "cyquant/quantities.pxd":299
 * 
 * cdef inline c_q_approx(double l, c.UData ul, double r, c.UData ur, double q, c.UData uq):
 *     if not c.eq_ddata(ul.dimensions, uq.dimensions):             # <<<<<<<<<<<<<<
 *         raise ValueError("incompatible units")
 *     if not c.eq_ddata(ur.dimensions, uq.dimensions):
 */
  __pyx_t_1 = ((!(__pyx_f_7cyquant_6ctypes_eq_ddata(__pyx_v_ul.dimensions, __pyx_v_uq.dimensions, NULL) != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "cyquant/quantities.pxd":300
 * cdef inline c_q_approx(double l, c.UData ul, double r, c.UData ur, double q, c.UData uq):
 *     if not c.eq_ddata(ul.dimensions, uq.dimensions):
 *         raise ValueError("incompatible units")             # <<<<<<<<<<<<<<
 *     if not c.eq_ddata(ur.dimensions, uq.dimensions):
 *         raise ValueError("incompatible units")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 300, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(2, 300, __pyx_L1_error)

    /* "cyquant/quantities.pxd":299
 * 
 * cdef inline c_q_approx(double l, c.UData ul, double r, c.UData ur, double q, c.UData uq):
 *     if not c.eq_ddata(ul.dimensions, uq.dimensions):             # <<<<<<<<<<<<<<
 *         raise ValueError("incompatible units")
 *     if not c.eq_ddata(ur.dimensions, uq.dimensions):
 */
  }

  /* "cyquant/quantities.pxd":301
 *     if not c.eq_ddata(ul.dimensions, uq.dimensions):
 *         raise ValueError("incompatible units")
 *     if not c.eq_ddata(ur.dimensions, uq.dimensions):             # <<<<<<<<<<<<<<
 *         raise ValueError("incompatible units")
 * 
 */
  __pyx_t_1 = ((!(__pyx_f_7cyquant_6ctypes_eq_ddata(__pyx_v_ur.dimensions, __pyx_v_uq.dimensions, NULL) != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "cyquant/quantities.pxd":302
 *         raise ValueError("incompatible units")
 *     if not c.eq_ddata(ur.dimensions, uq.dimensions):
 *         raise ValueError("incompatible units")             # <<<<<<<<<<<<<<
 * 
 *     l = l * ul.scale / uq.scale
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 302, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(2, 302, __pyx_L1_error)

    /* "cyquant/quantities.pxd":301
 *     if not c.eq_ddata(ul.dimensions, uq.dimensions):
 *         raise ValueError("incompatible units")
 *     if not c.eq_ddata(ur.dimensions, uq.dimensions):             # <<<<<<<<<<<<<<
 *         raise ValueError("incompatible units")
 * 
 */
  }

  /* "cyquant/quantities.pxd":304
 *         raise ValueError("incompatible units")
 * 
 *     l = l * ul.scale / uq.scale             # <<<<<<<<<<<<<<
 *     r = r * ur.scale / uq.scale
 * 
 */
  __pyx_t_3 = (__pyx_v_l * __pyx_v_ul.scale);
  if (unlikely(__pyx_v_uq.scale == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(2, 304, __pyx_L1_error)
  }
  __pyx_v_l = (__pyx_t_3 / __pyx_v_uq.scale);

  /* "cyquant/quantities.pxd":305
 * 
 *     l = l * ul.scale / uq.scale
 *     r = r * ur.scale / uq.scale             # <<<<<<<<<<<<<<
 * 
 *     return fabs(l - r) <= fabs(q)
 */
  __pyx_t_3 = (__pyx_v_r * __pyx_v_ur.scale);
  if (unlikely(__pyx_v_uq.scale == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(2, 305, __pyx_L1_error)
  }
  __pyx_v_r = (__pyx_t_3 / __pyx_v_uq.scale);

  /* "cyquant/quantities.pxd":307
 *     r = r * ur.scale / uq.scale
 * 
 *     return fabs(l - r) <= fabs(q)             # <<<<<<<<<<<<<<
 * 
 * cdef inline py_q_approx(object l, c.UData ul, object r, c.UData ur, object q, c.UData uq):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong((fabs((__pyx_v_l - __pyx_v_r)) <= fabs(__pyx_v_q))); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cyquant/quantities.pxd":298
 *     raise RuntimeError("unknown error ({})".format(error_code))
 * 
 * cdef inline c_q_approx(double l, c.UData ul, double r, c.UData ur, double q, c.UData uq):             # <<<<<<<<<<<<<<
 *     if not c.eq_ddata(ul.dimensions, uq.dimensions):
 *         raise ValueError("incompatible units")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cyquant.quantities.c_q_approx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyquant/quantities.pxd":309
 *     return fabs(l - r) <= fabs(q)
 * 
 * cdef inline py_q_approx(object l, c.UData ul, object r, c.UData ur, object q, c.UData uq):             # <<<<<<<<<<<<<<
 *     if not c.eq_ddata(ul.dimensions, uq.dimensions):
 *         raise ValueError("incompatible units")
 */

static CYTHON_INLINE PyObject *__pyx_f_7cyquant_10quantities_py_q_approx(PyObject *__pyx_v_l, struct __pyx_t_7cyquant_6ctypes_UData __pyx_v_ul, PyObject *__pyx_v_r, struct __pyx_t_7cyquant_6ctypes_UData __pyx_v_ur, PyObject *__pyx_v_q, struct __pyx_t_7cyquant_6ctypes_UData __pyx_v_uq) {
  PyObject *__pyx_v_l_norm = 0;
  PyObject *__pyx_v_r_norm = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("py_q_approx", 0);

  /* "cyquant/quantities.pxd":310
 * 
 * cdef inline py_q_approx(object l, c.UData ul, object r, c.UData ur, object q, c.UData uq):
 *     if not c.eq_ddata(ul.dimensions, uq.dimensions):             # <<<<<<<<<<<<<<
 *         raise ValueError("incompatible units")
 *     if not c.eq_ddata(ur.dimensions, uq.dimensions):
 */
  __pyx_t_1 = ((!(__pyx_f_7cyquant_6ctypes_eq_ddata(__pyx_v_ul.dimensions, __pyx_v_uq.dimensions, NULL) != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "cyquant/quantities.pxd":311
 * cdef inline py_q_approx(object l, c.UData ul, object r, c.UData ur, object q, c.UData uq):
 *     if not c.eq_ddata(ul.dimensions, uq.dimensions):
 *         raise ValueError("incompatible units")             # <<<<<<<<<<<<<<
 *     if not c.eq_ddata(ur.dimensions, uq.dimensions):
 *         raise ValueError("incompatible units")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(2, 311, __pyx_L1_error)

    /* "cyquant/quantities.pxd":310
 * 
 * cdef inline py_q_approx(object l, c.UData ul, object r, c.UData ur, object q, c.UData uq):
 *     if not c.eq_ddata(ul.dimensions, uq.dimensions):             # <<<<<<<<<<<<<<
 *         raise ValueError("incompatible units")
 *     if not c.eq_ddata(ur.dimensions, uq.dimensions):
 */
  }

  /* "cyquant/quantities.pxd":312
 *     if not c.eq_ddata(ul.dimensions, uq.dimensions):
 *         raise ValueError("incompatible units")
 *     if not c.eq_ddata(ur.dimensions, uq.dimensions):             # <<<<<<<<<<<<<<
 *         raise ValueError("incompatible units")
 * 
 */
  __pyx_t_1 = ((!(__pyx_f_7cyquant_6ctypes_eq_ddata(__pyx_v_ur.dimensions, __pyx_v_uq.dimensions, NULL) != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "cyquant/quantities.pxd":313
 *         raise ValueError("incompatible units")
 *     if not c.eq_ddata(ur.dimensions, uq.dimensions):
 *         raise ValueError("incompatible units")             # <<<<<<<<<<<<<<
 * 
 *     cdef object l_norm, r_norm
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(2, 313, __pyx_L1_error)

    /* "cyquant/quantities.pxd":312
 *     if not c.eq_ddata(ul.dimensions, uq.dimensions):
 *         raise ValueError("incompatible units")
 *     if not c.eq_ddata(ur.dimensions, uq.dimensions):             # <<<<<<<<<<<<<<
 *         raise ValueError("incompatible units")
 * 
 */
  }

  /* "cyquant/quantities.pxd":317
 *     cdef object l_norm, r_norm
 * 
 *     l_norm = l * (ul.scale / uq.scale)             # <<<<<<<<<<<<<<
 *     r_norm = r * (ur.scale / uq.scale)
 * 
 */
  if (unlikely(__pyx_v_uq.scale == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(2, 317, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_ul.scale / __pyx_v_uq.scale)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_v_l, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_l_norm = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cyquant/quantities.pxd":318
 * 
 *     l_norm = l * (ul.scale / uq.scale)
 *     r_norm = r * (ur.scale / uq.scale)             # <<<<<<<<<<<<<<
 * 
 *     return abs(l_norm - r_norm) <= abs(q)
 */
  if (unlikely(__pyx_v_uq.scale == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(2, 318, __pyx_L1_error)
  }
  __pyx_t_3 = PyFloat_FromDouble((__pyx_v_ur.scale / __pyx_v_uq.scale)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyNumber_Multiply(__pyx_v_r, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_r_norm = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "cyquant/quantities.pxd":320
 *     r_norm = r * (ur.scale / uq.scale)
 * 
 *     return abs(l_norm - r_norm) <= abs(q)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyNumber_Subtract(__pyx_v_l_norm, __pyx_v_r_norm); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyNumber_Absolute(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyNumber_Absolute(__pyx_v_q); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_LE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 320, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "cyquant/quantities.pxd":309
 *     return fabs(l - r) <= fabs(q)
 * 
 * cdef inline py_q_approx(object l, c.UData ul, object r, c.UData ur, object q, c.UData uq):             # <<<<<<<<<<<<<<
 *     if not c.eq_ddata(ul.dimensions, uq.dimensions):
 *         raise ValueError("incompatible units")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cyquant.quantities.py_q_approx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_l_norm);
  __Pyx_XDECREF(__pyx_v_r_norm);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {"sin", (PyCFunction)__pyx_pw_7cyquant_5qmath_1sin, METH_O, 0},
  {"cos", (PyCFunction)__pyx_pw_7cyquant_5qmath_3cos, METH_O, 0},
  {"sin_cos", (PyCFunction)__pyx_pw_7cyquant_5qmath_5sin_cos, METH_O, 0},
  {"tan", (PyCFunction)__pyx_pw_7cyquant_5qmath_7tan, METH_O, 0},
  {"acos", (PyCFunction)__pyx_pw_7cyquant_5qmath_9acos, METH_O, 0},
  {"asin", (PyCFunction)__pyx_pw_7cyquant_5qmath_11asin, METH_O, 0},
  {"atan", (PyCFunction)__pyx_pw_7cyquant_5qmath_13atan, METH_O, 0},
  {"atan2", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7cyquant_5qmath_15atan2, METH_VARARGS|METH_KEYWORDS, 0},
  {"hypot", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7cyquant_5qmath_17hypot, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_qmath(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_qmath},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "qmath",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_Incompatible_Units, __pyx_k_Incompatible_Units, sizeof(__pyx_k_Incompatible_Units), 0, 0, 1, 0},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Unknow_Error_Occurred_i, __pyx_k_Unknow_Error_Occurred_i, sizeof(__pyx_k_Unknow_Error_Occurred_i), 0, 0, 1, 0},
  {&__pyx_kp_s_Unknown_Error_Occurred_d, __pyx_k_Unknown_Error_Occurred_d, sizeof(__pyx_k_Unknown_Error_Occurred_d), 0, 0, 1, 0},
  {&__pyx_kp_s_Unknown_Error_Occurred_i, __pyx_k_Unknown_Error_Occurred_i, sizeof(__pyx_k_Unknown_Error_Occurred_i), 0, 0, 1, 0},
  {&__pyx_kp_s_Unknown_Error_i, __pyx_k_Unknown_Error_i, sizeof(__pyx_k_Unknown_Error_i), 0, 0, 1, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_ZeroDivisionError, __pyx_k_ZeroDivisionError, sizeof(__pyx_k_ZeroDivisionError), 0, 0, 1, 1},
  {&__pyx_n_s__5, __pyx_k__5, sizeof(__pyx_k__5), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_cyquant, __pyx_k_cyquant, sizeof(__pyx_k_cyquant), 0, 0, 1, 1},
  {&__pyx_n_s_cyquant_quantities, __pyx_k_cyquant_quantities, sizeof(__pyx_k_cyquant_quantities), 0, 0, 1, 1},
  {&__pyx_n_s_eta, __pyx_k_eta, sizeof(__pyx_k_eta), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_kp_s_incompatible_units, __pyx_k_incompatible_units, sizeof(__pyx_k_incompatible_units), 0, 0, 1, 0},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_kp_s_math_domain_error, __pyx_k_math_domain_error, sizeof(__pyx_k_math_domain_error), 0, 0, 1, 0},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_pi, __pyx_k_pi, sizeof(__pyx_k_pi), 0, 0, 1, 1},
  {&__pyx_n_s_promote, __pyx_k_promote, sizeof(__pyx_k_promote), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_q, __pyx_k_q, sizeof(__pyx_k_q), 0, 0, 1, 1},
  {&__pyx_n_s_radians, __pyx_k_radians, sizeof(__pyx_k_radians), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_si, __pyx_k_si, sizeof(__pyx_k_si), 0, 0, 1, 1},
  {&__pyx_n_s_tau, __pyx_k_tau, sizeof(__pyx_k_tau), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_kp_s_unit_mismatch, __pyx_k_unit_mismatch, sizeof(__pyx_k_unit_mismatch), 0, 0, 1, 0},
  {&__pyx_n_s_unity, __pyx_k_unity, sizeof(__pyx_k_unity), 0, 0, 1, 1},
  {&__pyx_kp_s_unknown_error, __pyx_k_unknown_error, sizeof(__pyx_k_unknown_error), 0, 0, 1, 0},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 39, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(0, 75, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_builtin_ZeroDivisionError = __Pyx_GetBuiltinName(__pyx_n_s_ZeroDivisionError); if (!__pyx_builtin_ZeroDivisionError) __PYX_ERR(2, 66, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "cyquant/qmath.pyx":39
 *     cdef double ratio = value.get_as(si.unity)
 *     if ratio < -1 or ratio > 1:
 *         raise ValueError("math domain error")             # <<<<<<<<<<<<<<
 *     cdef double rads = math.acos(ratio)
 *     return si.radians.promote(rads)
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_math_domain_error); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "cyquant/qmath.pyx":73
 * 
 *     if error_code == c.DimensionMismatch:
 *         raise ValueError("unit mismatch")             # <<<<<<<<<<<<<<
 * 
 *     raise RuntimeError("Unknown Error Occurred: %i" % error_code)
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_unit_mismatch); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "cyquant/quantities.pxd":244
 * 
 *     if error_code == c.DimensionMismatch:
 *         raise ValueError("Incompatible Units")             # <<<<<<<<<<<<<<
 * 
 *     raise RuntimeError("Unknown Error: %i" % error_code)
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_Incompatible_Units); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(2, 244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "cyquant/quantities.pxd":278
 * 
 *     if error_code == c.DimensionMismatch:
 *         raise ValueError("incompatible units")             # <<<<<<<<<<<<<<
 * 
 *     raise RuntimeError("unknown error ({})".format(error_code))
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_incompatible_units); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(2, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule("cyquant.dimensions"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cyquant_10dimensions_Dimensions = __Pyx_ImportType(__pyx_t_1, "cyquant.dimensions", "Dimensions", sizeof(struct __pyx_obj_7cyquant_10dimensions_Dimensions), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cyquant_10dimensions_Dimensions) __PYX_ERR(3, 3, __pyx_L1_error)
  __pyx_vtabptr_7cyquant_10dimensions_Dimensions = (struct __pyx_vtabstruct_7cyquant_10dimensions_Dimensions*)__Pyx_GetVtable(__pyx_ptype_7cyquant_10dimensions_Dimensions->tp_dict); if (unlikely(!__pyx_vtabptr_7cyquant_10dimensions_Dimensions)) __PYX_ERR(3, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("cyquant.quantities"); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cyquant_10quantities_SIUnit = __Pyx_ImportType(__pyx_t_1, "cyquant.quantities", "SIUnit", sizeof(struct __pyx_obj_7cyquant_10quantities_SIUnit), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cyquant_10quantities_SIUnit) __PYX_ERR(2, 7, __pyx_L1_error)
  __pyx_vtabptr_7cyquant_10quantities_SIUnit = (struct __pyx_vtabstruct_7cyquant_10quantities_SIUnit*)__Pyx_GetVtable(__pyx_ptype_7cyquant_10quantities_SIUnit->tp_dict); if (unlikely(!__pyx_vtabptr_7cyquant_10quantities_SIUnit)) __PYX_ERR(2, 7, __pyx_L1_error)
  __pyx_ptype_7cyquant_10quantities_Quantity = __Pyx_ImportType(__pyx_t_1, "cyquant.quantities", "Quantity", sizeof(struct __pyx_obj_7cyquant_10quantities_Quantity), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cyquant_10quantities_Quantity) __PYX_ERR(2, 23, __pyx_L1_error)
  __pyx_vtabptr_7cyquant_10quantities_Quantity = (struct __pyx_vtabstruct_7cyquant_10quantities_Quantity*)__Pyx_GetVtable(__pyx_ptype_7cyquant_10quantities_Quantity->tp_dict); if (unlikely(!__pyx_vtabptr_7cyquant_10quantities_Quantity)) __PYX_ERR(2, 23, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initqmath(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initqmath(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_qmath(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_qmath(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_qmath(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'qmath' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_qmath(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("qmath", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_cyquant__qmath) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "cyquant.qmath")) {
      if (unlikely(PyDict_SetItemString(modules, "cyquant.qmath", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) goto __pyx_L1_error;
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) goto __pyx_L1_error;
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  (void)__Pyx_modinit_type_init_code();
  if (unlikely(__Pyx_modinit_type_import_code() != 0)) goto __pyx_L1_error;
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "cyquant/qmath.pyx":4
 * 
 * cimport cyquant.quantities as q
 * import cyquant.quantities as q             # <<<<<<<<<<<<<<
 * 
 * from libc cimport math
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s__5);
  __Pyx_GIVEREF(__pyx_n_s__5);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s__5);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_cyquant_quantities, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_q, __pyx_t_2) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cyquant/qmath.pyx":8
 * from libc cimport math
 * 
 * from cyquant import si             # <<<<<<<<<<<<<<
 * 
 * pi = math.pi * si.radians
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_si);
  __Pyx_GIVEREF(__pyx_n_s_si);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_si);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_cyquant, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_si); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_si, __pyx_t_2) < 0) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cyquant/qmath.pyx":10
 * from cyquant import si
 * 
 * pi = math.pi * si.radians             # <<<<<<<<<<<<<<
 * eta = pi / 2
 * tau = pi * 2
 */
  __pyx_t_1 = PyFloat_FromDouble(M_PI); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_si); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_radians); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pi, __pyx_t_2) < 0) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cyquant/qmath.pyx":11
 * 
 * pi = math.pi * si.radians
 * eta = pi / 2             # <<<<<<<<<<<<<<
 * tau = pi * 2
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pi); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_int_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_eta, __pyx_t_3) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cyquant/qmath.pyx":12
 * pi = math.pi * si.radians
 * eta = pi / 2
 * tau = pi * 2             # <<<<<<<<<<<<<<
 * 
 * cpdef sin(q.Quantity value):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pi); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_3, __pyx_int_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_tau, __pyx_t_2) < 0) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cyquant/qmath.pyx":1
 * cimport cyquant.ctypes as c             # <<<<<<<<<<<<<<
 * 
 * cimport cyquant.quantities as q
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cyquant/quantities.pxd":309
 *     return fabs(l - r) <= fabs(q)
 * 
 * cdef inline py_q_approx(object l, c.UData ul, object r, c.UData ur, object q, c.UData uq):             # <<<<<<<<<<<<<<
 *     if not c.eq_ddata(ul.dimensions, uq.dimensions):
 *         raise ValueError("incompatible units")
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init cyquant.qmath", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init cyquant.qmath");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* pyobject_as_double */
static double __Pyx__PyObject_AsDouble(PyObject* obj) {
    PyObject* float_value;
#if !CYTHON_USE_TYPE_SLOTS
    float_value = PyNumber_Float(obj);  if ((0)) goto bad;
#else
    PyNumberMethods *nb = Py_TYPE(obj)->tp_as_number;
    if (likely(nb) && likely(nb->nb_float)) {
        float_value = nb->nb_float(obj);
        if (likely(float_value) && unlikely(!PyFloat_Check(float_value))) {
            PyErr_Format(PyExc_TypeError,
                "__float__ returned non-float (type %.200s)",
                Py_TYPE(float_value)->tp_name);
            Py_DECREF(float_value);
            goto bad;
        }
    } else if (PyUnicode_CheckExact(obj) || PyBytes_CheckExact(obj)) {
#if PY_MAJOR_VERSION >= 3
        float_value = PyFloat_FromString(obj);
#else
        float_value = PyFloat_FromString(obj, 0);
#endif
    } else {
        PyObject* args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        PyTuple_SET_ITEM(args, 0, obj);
        float_value = PyObject_Call((PyObject*)&PyFloat_Type, args, 0);
        PyTuple_SET_ITEM(args, 0, 0);
        Py_DECREF(args);
    }
#endif
    if (likely(float_value)) {
        double value = PyFloat_AS_DOUBLE(float_value);
        Py_DECREF(float_value);
        return value;
    }
bad:
    return (double)-1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* py_abs */
#if CYTHON_USE_PYLONG_INTERNALS
static PyObject *__Pyx_PyLong_AbsNeg(PyObject *n) {
    if (likely(Py_SIZE(n) == -1)) {
        return PyLong_FromLong(((PyLongObject*)n)->ob_digit[0]);
    }
#if CYTHON_COMPILING_IN_CPYTHON
    {
        PyObject *copy = _PyLong_Copy((PyLongObject*)n);
        if (likely(copy)) {
            Py_SIZE(copy) = -(Py_SIZE(copy));
        }
        return copy;
    }
#else
    return PyNumber_Negative(n);
#endif
}
#endif

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum____pyx_t_7cyquant_6ctypes_Error(enum __pyx_t_7cyquant_6ctypes_Error value) {
    const enum __pyx_t_7cyquant_6ctypes_Error neg_one = (enum __pyx_t_7cyquant_6ctypes_Error) ((enum __pyx_t_7cyquant_6ctypes_Error) 0 - (enum __pyx_t_7cyquant_6ctypes_Error) 1), const_zero = (enum __pyx_t_7cyquant_6ctypes_Error) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum __pyx_t_7cyquant_6ctypes_Error) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum __pyx_t_7cyquant_6ctypes_Error) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum __pyx_t_7cyquant_6ctypes_Error) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum __pyx_t_7cyquant_6ctypes_Error) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum __pyx_t_7cyquant_6ctypes_Error) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum __pyx_t_7cyquant_6ctypes_Error),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) ((size_t) 0 - (size_t) 1), const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
