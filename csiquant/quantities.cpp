/* Generated by Cython 0.29.3 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_3"
#define CYTHON_HEX_VERSION 0x001D03F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_USE_DICT_VERSIONS
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
        static PY_UINT64_T __pyx_dict_version = 0;\
        static PyObject *__pyx_dict_cached_value = NULL;\
        if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
            (VAR) = __pyx_dict_cached_value;\
        } else {\
            (VAR) = __pyx_dict_cached_value = (LOOKUP);\
            __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
        }\
    }
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
  #define PyObject_Unicode             PyObject_Str
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__csiquant__quantities
#define __PYX_HAVE_API__csiquant__quantities
/* Early includes */
#include <string.h>
#include <math.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "csiquant/quantities.pxd",
  "csiquant/quantities.pyx",
  "stringsource",
  "csiquant/ctypes.pxd",
  "csiquant/dimensions.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_8csiquant_10dimensions_Dimensions;
struct __pyx_obj_8csiquant_10quantities_SIUnit;
struct __pyx_obj_8csiquant_10quantities_Quantity;
struct __pyx_obj_8csiquant_10quantities___pyx_scope_struct__quantities;
struct __pyx_obj_8csiquant_10quantities___pyx_scope_struct_1_values;
struct __pyx_t_8csiquant_6ctypes_DData;
struct __pyx_t_8csiquant_6ctypes_UData;
struct __pyx_t_8csiquant_6ctypes_QData;

/* "csiquant/ctypes.pxd":15
 *     UData units
 * 
 * cdef enum Operand:             # <<<<<<<<<<<<<<
 *     OBJECT = 1
 *     UNIT = 2
 */
enum __pyx_t_8csiquant_6ctypes_Operand {
  __pyx_e_8csiquant_6ctypes_OBJECT = 1,
  __pyx_e_8csiquant_6ctypes_UNIT = 2,
  __pyx_e_8csiquant_6ctypes_QUANTITY = 4
};

/* "csiquant/ctypes.pxd":33
 * # begin error code convention interface
 * 
 * cdef enum Error:             # <<<<<<<<<<<<<<
 *     Success = 0
 *     DimensionMismatch = 1
 */
enum __pyx_t_8csiquant_6ctypes_Error {
  __pyx_e_8csiquant_6ctypes_Success = 0,
  __pyx_e_8csiquant_6ctypes_DimensionMismatch = 1,
  __pyx_e_8csiquant_6ctypes_ZeroDiv = 2,
  __pyx_e_8csiquant_6ctypes_Unknown = 0x80000000
};

/* "csiquant/ctypes.pxd":4
 * from libc.math cimport fabs, fmax
 * 
 * cdef struct DData:             # <<<<<<<<<<<<<<
 *     double exponents[7]
 * 
 */
struct __pyx_t_8csiquant_6ctypes_DData {
  double exponents[7];
};

/* "csiquant/ctypes.pxd":7
 *     double exponents[7]
 * 
 * cdef struct UData:             # <<<<<<<<<<<<<<
 *     double scale
 *     DData dimensions
 */
struct __pyx_t_8csiquant_6ctypes_UData {
  double scale;
  struct __pyx_t_8csiquant_6ctypes_DData dimensions;
};

/* "csiquant/ctypes.pxd":11
 *     DData dimensions
 * 
 * cdef struct QData:             # <<<<<<<<<<<<<<
 *     double quantity
 *     UData units
 */
struct __pyx_t_8csiquant_6ctypes_QData {
  double quantity;
  struct __pyx_t_8csiquant_6ctypes_UData units;
};
struct __pyx_opt_args_8csiquant_10quantities_6SIUnit_approx;
struct __pyx_opt_args_8csiquant_10quantities_8Quantity_r_approx;
struct __pyx_opt_args_8csiquant_10quantities_8Quantity_a_approx;

/* "csiquant/quantities.pxd":15
 * 
 *     cpdef bint compatible(SIUnit self, SIUnit other)
 *     cpdef approx(SIUnit self, SIUnit other, double rtol=*, double atol=*)             # <<<<<<<<<<<<<<
 *     cpdef cmp(SIUnit self, SIUnit other)
 * 
 */
struct __pyx_opt_args_8csiquant_10quantities_6SIUnit_approx {
  int __pyx_n;
  double rtol;
  double atol;
};

/* "csiquant/quantities.pxd":32
 *     #TODO: think abuot how best to handle approximation
 * 
 *     cpdef r_approx(Quantity self, Quantity other, double rtol=*)             # <<<<<<<<<<<<<<
 *     cpdef a_approx(Quantity self, Quantity other, double atol=*)
 *     cpdef q_approx(Quantity self, Quantity other, Quantity qtol)
 */
struct __pyx_opt_args_8csiquant_10quantities_8Quantity_r_approx {
  int __pyx_n;
  double rtol;
};

/* "csiquant/quantities.pxd":33
 * 
 *     cpdef r_approx(Quantity self, Quantity other, double rtol=*)
 *     cpdef a_approx(Quantity self, Quantity other, double atol=*)             # <<<<<<<<<<<<<<
 *     cpdef q_approx(Quantity self, Quantity other, Quantity qtol)
 * 
 */
struct __pyx_opt_args_8csiquant_10quantities_8Quantity_a_approx {
  int __pyx_n;
  double atol;
};

/* "csiquant/dimensions.pxd":3
 * cimport csiquant.ctypes as c
 * 
 * cdef class Dimensions:             # <<<<<<<<<<<<<<
 *     cdef c.DData data
 * 
 */
struct __pyx_obj_8csiquant_10dimensions_Dimensions {
  PyObject_HEAD
  struct __pyx_vtabstruct_8csiquant_10dimensions_Dimensions *__pyx_vtab;
  struct __pyx_t_8csiquant_6ctypes_DData data;
};


/* "csiquant/quantities.pxd":5
 * import csiquant.dimensions as d
 * 
 * cdef class SIUnit:             # <<<<<<<<<<<<<<
 *     cdef c.UData data
 * 
 */
struct __pyx_obj_8csiquant_10quantities_SIUnit {
  PyObject_HEAD
  struct __pyx_vtabstruct_8csiquant_10quantities_SIUnit *__pyx_vtab;
  struct __pyx_t_8csiquant_6ctypes_UData data;
};


/* "csiquant/quantities.pxd":21
 *     cpdef SIUnit exp(SIUnit self, double power)
 * 
 * cdef class Quantity:             # <<<<<<<<<<<<<<
 *     cdef c.QData data
 * 
 */
struct __pyx_obj_8csiquant_10quantities_Quantity {
  PyObject_HEAD
  struct __pyx_vtabstruct_8csiquant_10quantities_Quantity *__pyx_vtab;
  struct __pyx_t_8csiquant_6ctypes_QData data;
};


/* "csiquant/quantities.pyx":74
 *         return self.values(args)
 * 
 *     def quantities(SIUnit self, iterable):             # <<<<<<<<<<<<<<
 *         for value in iterable:
 *             yield self.promote(value)
 */
struct __pyx_obj_8csiquant_10quantities___pyx_scope_struct__quantities {
  PyObject_HEAD
  PyObject *__pyx_v_iterable;
  struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self;
  PyObject *__pyx_v_value;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "csiquant/quantities.pyx":78
 *             yield self.promote(value)
 * 
 *     def values(SIUnit self, iterable):             # <<<<<<<<<<<<<<
 *         for quantity in iterable:
 *             yield self.demote(quantity)
 */
struct __pyx_obj_8csiquant_10quantities___pyx_scope_struct_1_values {
  PyObject_HEAD
  PyObject *__pyx_v_iterable;
  PyObject *__pyx_v_quantity;
  struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};



/* "csiquant/dimensions.pxd":3
 * cimport csiquant.ctypes as c
 * 
 * cdef class Dimensions:             # <<<<<<<<<<<<<<
 *     cdef c.DData data
 * 
 */

struct __pyx_vtabstruct_8csiquant_10dimensions_Dimensions {
  int (*exact)(struct __pyx_obj_8csiquant_10dimensions_Dimensions *, struct __pyx_obj_8csiquant_10dimensions_Dimensions *, int __pyx_skip_dispatch);
  struct __pyx_obj_8csiquant_10dimensions_Dimensions *(*exp)(struct __pyx_obj_8csiquant_10dimensions_Dimensions *, double, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_8csiquant_10dimensions_Dimensions *__pyx_vtabptr_8csiquant_10dimensions_Dimensions;


/* "csiquant/quantities.pyx":10
 * from libc.math cimport round, fabs, fmax
 * 
 * cdef class SIUnit:             # <<<<<<<<<<<<<<
 * 
 *     SCALE_RTOL = 1e-9
 */

struct __pyx_vtabstruct_8csiquant_10quantities_SIUnit {
  PyObject *(*is_of)(struct __pyx_obj_8csiquant_10quantities_SIUnit *, struct __pyx_obj_8csiquant_10dimensions_Dimensions *, int __pyx_skip_dispatch);
  PyObject *(*promote)(struct __pyx_obj_8csiquant_10quantities_SIUnit *, double, int __pyx_skip_dispatch);
  PyObject *(*demote)(struct __pyx_obj_8csiquant_10quantities_SIUnit *, struct __pyx_obj_8csiquant_10quantities_Quantity *, int __pyx_skip_dispatch);
  int (*compatible)(struct __pyx_obj_8csiquant_10quantities_SIUnit *, struct __pyx_obj_8csiquant_10quantities_SIUnit *, int __pyx_skip_dispatch);
  PyObject *(*approx)(struct __pyx_obj_8csiquant_10quantities_SIUnit *, struct __pyx_obj_8csiquant_10quantities_SIUnit *, int __pyx_skip_dispatch, struct __pyx_opt_args_8csiquant_10quantities_6SIUnit_approx *__pyx_optional_args);
  PyObject *(*cmp)(struct __pyx_obj_8csiquant_10quantities_SIUnit *, struct __pyx_obj_8csiquant_10quantities_SIUnit *, int __pyx_skip_dispatch);
  struct __pyx_obj_8csiquant_10quantities_SIUnit *(*exp)(struct __pyx_obj_8csiquant_10quantities_SIUnit *, double, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_8csiquant_10quantities_SIUnit *__pyx_vtabptr_8csiquant_10quantities_SIUnit;


/* "csiquant/quantities.pyx":220
 *         return 'SIUnit(%f, %r)' % (self.scale, self.dimensions)
 * 
 * cdef class Quantity:             # <<<<<<<<<<<<<<
 * 
 *     @property
 */

struct __pyx_vtabstruct_8csiquant_10quantities_Quantity {
  PyObject *(*is_of)(struct __pyx_obj_8csiquant_10quantities_Quantity *, struct __pyx_obj_8csiquant_10dimensions_Dimensions *, int __pyx_skip_dispatch);
  PyObject *(*get_as)(struct __pyx_obj_8csiquant_10quantities_Quantity *, struct __pyx_obj_8csiquant_10quantities_SIUnit *, int __pyx_skip_dispatch);
  struct __pyx_obj_8csiquant_10quantities_Quantity *(*cvt_to)(struct __pyx_obj_8csiquant_10quantities_Quantity *, struct __pyx_obj_8csiquant_10quantities_SIUnit *, int __pyx_skip_dispatch);
  struct __pyx_obj_8csiquant_10quantities_Quantity *(*round_to)(struct __pyx_obj_8csiquant_10quantities_Quantity *, struct __pyx_obj_8csiquant_10quantities_SIUnit *, int __pyx_skip_dispatch);
  PyObject *(*r_approx)(struct __pyx_obj_8csiquant_10quantities_Quantity *, struct __pyx_obj_8csiquant_10quantities_Quantity *, int __pyx_skip_dispatch, struct __pyx_opt_args_8csiquant_10quantities_8Quantity_r_approx *__pyx_optional_args);
  PyObject *(*a_approx)(struct __pyx_obj_8csiquant_10quantities_Quantity *, struct __pyx_obj_8csiquant_10quantities_Quantity *, int __pyx_skip_dispatch, struct __pyx_opt_args_8csiquant_10quantities_8Quantity_a_approx *__pyx_optional_args);
  PyObject *(*q_approx)(struct __pyx_obj_8csiquant_10quantities_Quantity *, struct __pyx_obj_8csiquant_10quantities_Quantity *, struct __pyx_obj_8csiquant_10quantities_Quantity *, int __pyx_skip_dispatch);
  int (*compatible)(struct __pyx_obj_8csiquant_10quantities_Quantity *, struct __pyx_obj_8csiquant_10quantities_Quantity *, int __pyx_skip_dispatch);
  PyObject *(*cmp)(struct __pyx_obj_8csiquant_10quantities_Quantity *, struct __pyx_obj_8csiquant_10quantities_Quantity *, int __pyx_skip_dispatch);
  struct __pyx_obj_8csiquant_10quantities_Quantity *(*exp)(struct __pyx_obj_8csiquant_10quantities_Quantity *, double, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_8csiquant_10quantities_Quantity *__pyx_vtabptr_8csiquant_10quantities_Quantity;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* tp_new.proto */
#define __Pyx_tp_new(type_obj, args) __Pyx_tp_new_kwargs(type_obj, args, NULL)
static CYTHON_INLINE PyObject* __Pyx_tp_new_kwargs(PyObject* type_obj, PyObject* args, PyObject* kwargs) {
    return (PyObject*) (((PyTypeObject*)type_obj)->tp_new((PyTypeObject*)type_obj, args, kwargs));
}

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* IncludeStringH.proto */
#include <string.h>

/* PyObjectFormat.proto */
#if CYTHON_USE_UNICODE_WRITER
static PyObject* __Pyx_PyObject_Format(PyObject* s, PyObject* f);
#else
#define __Pyx_PyObject_Format(s, f) PyObject_Format(s, f)
#endif

/* PyObjectFormatAndDecref.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f);
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f);

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyIntFromDouble.proto */
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE PyObject* __Pyx_PyInt_FromDouble(double value);
#else
#define __Pyx_PyInt_FromDouble(value) PyLong_FromDouble(value)
#endif

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* GetNameInClass.proto */
#define __Pyx_GetNameInClass(var, nmspace, name)  (var) = __Pyx__GetNameInClass(nmspace, name)
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum____pyx_t_8csiquant_6ctypes_Error(enum __pyx_t_8csiquant_6ctypes_Error value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_f_8csiquant_10quantities_6SIUnit_promote(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self, double __pyx_v_value, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_8csiquant_10quantities_6SIUnit_demote(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self, struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_value, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_8csiquant_10quantities_6SIUnit_is_of(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self, struct __pyx_obj_8csiquant_10dimensions_Dimensions *__pyx_v_dims, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_8csiquant_10quantities_6SIUnit_cmp(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self, struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_other, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_8csiquant_10quantities_6SIUnit_approx(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self, struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_other, int __pyx_skip_dispatch, struct __pyx_opt_args_8csiquant_10quantities_6SIUnit_approx *__pyx_optional_args); /* proto*/
static int __pyx_f_8csiquant_10quantities_6SIUnit_compatible(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self, struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_other, int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_f_8csiquant_10quantities_6SIUnit_exp(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self, double __pyx_v_power, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_8csiquant_10quantities_8Quantity_is_of(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self, struct __pyx_obj_8csiquant_10dimensions_Dimensions *__pyx_v_dims, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_8csiquant_10quantities_8Quantity_get_as(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self, struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_units, int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_f_8csiquant_10quantities_8Quantity_cvt_to(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self, struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_units, int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_f_8csiquant_10quantities_8Quantity_round_to(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self, struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_units, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_8csiquant_10quantities_8Quantity_cmp(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self, struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_other, int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_8csiquant_10quantities_8Quantity_compatible(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self, struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_other, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_8csiquant_10quantities_8Quantity_r_approx(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self, struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_other, int __pyx_skip_dispatch, struct __pyx_opt_args_8csiquant_10quantities_8Quantity_r_approx *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_8csiquant_10quantities_8Quantity_a_approx(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self, struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_other, int __pyx_skip_dispatch, struct __pyx_opt_args_8csiquant_10quantities_8Quantity_a_approx *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_8csiquant_10quantities_8Quantity_q_approx(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self, struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_other, struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_qtol, int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_f_8csiquant_10quantities_8Quantity_exp(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self, double __pyx_v_power, int __pyx_skip_dispatch); /* proto*/

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.math' */

/* Module declarations from 'csiquant.ctypes' */
static CYTHON_INLINE int __pyx_f_8csiquant_6ctypes_fapprox(double, double, double, double); /*proto*/
static CYTHON_INLINE int __pyx_f_8csiquant_6ctypes_eq_ddata(struct __pyx_t_8csiquant_6ctypes_DData const &, struct __pyx_t_8csiquant_6ctypes_DData const &); /*proto*/
static CYTHON_INLINE double __pyx_f_8csiquant_6ctypes_unsafe_extract_quantity(struct __pyx_t_8csiquant_6ctypes_QData const &, struct __pyx_t_8csiquant_6ctypes_UData const &); /*proto*/
static CYTHON_INLINE enum __pyx_t_8csiquant_6ctypes_Error __pyx_f_8csiquant_6ctypes_mul_ddata(struct __pyx_t_8csiquant_6ctypes_DData &, struct __pyx_t_8csiquant_6ctypes_DData const &, struct __pyx_t_8csiquant_6ctypes_DData const &); /*proto*/
static CYTHON_INLINE enum __pyx_t_8csiquant_6ctypes_Error __pyx_f_8csiquant_6ctypes_div_ddata(struct __pyx_t_8csiquant_6ctypes_DData &, struct __pyx_t_8csiquant_6ctypes_DData const &, struct __pyx_t_8csiquant_6ctypes_DData const &); /*proto*/
static CYTHON_INLINE enum __pyx_t_8csiquant_6ctypes_Error __pyx_f_8csiquant_6ctypes_pow_ddata(struct __pyx_t_8csiquant_6ctypes_DData &, struct __pyx_t_8csiquant_6ctypes_DData const &, double); /*proto*/
static CYTHON_INLINE enum __pyx_t_8csiquant_6ctypes_Error __pyx_f_8csiquant_6ctypes_mul_udata(struct __pyx_t_8csiquant_6ctypes_UData &, struct __pyx_t_8csiquant_6ctypes_UData const &, struct __pyx_t_8csiquant_6ctypes_UData const &); /*proto*/
static CYTHON_INLINE enum __pyx_t_8csiquant_6ctypes_Error __pyx_f_8csiquant_6ctypes_div_udata(struct __pyx_t_8csiquant_6ctypes_UData &, struct __pyx_t_8csiquant_6ctypes_UData const &, struct __pyx_t_8csiquant_6ctypes_UData const &); /*proto*/
static CYTHON_INLINE enum __pyx_t_8csiquant_6ctypes_Error __pyx_f_8csiquant_6ctypes_pow_udata(struct __pyx_t_8csiquant_6ctypes_UData &, struct __pyx_t_8csiquant_6ctypes_UData const &, double); /*proto*/
static CYTHON_INLINE enum __pyx_t_8csiquant_6ctypes_Error __pyx_f_8csiquant_6ctypes_cmp_udata(int &, struct __pyx_t_8csiquant_6ctypes_UData const &, struct __pyx_t_8csiquant_6ctypes_UData const &); /*proto*/
static CYTHON_INLINE enum __pyx_t_8csiquant_6ctypes_Error __pyx_f_8csiquant_6ctypes_min_udata(struct __pyx_t_8csiquant_6ctypes_UData &, struct __pyx_t_8csiquant_6ctypes_UData const &, struct __pyx_t_8csiquant_6ctypes_UData const &); /*proto*/
static CYTHON_INLINE enum __pyx_t_8csiquant_6ctypes_Error __pyx_f_8csiquant_6ctypes_mul_qdata(struct __pyx_t_8csiquant_6ctypes_QData &, struct __pyx_t_8csiquant_6ctypes_QData const &, struct __pyx_t_8csiquant_6ctypes_QData const &); /*proto*/
static CYTHON_INLINE enum __pyx_t_8csiquant_6ctypes_Error __pyx_f_8csiquant_6ctypes_div_qdata(struct __pyx_t_8csiquant_6ctypes_QData &, struct __pyx_t_8csiquant_6ctypes_QData const &, struct __pyx_t_8csiquant_6ctypes_QData const &); /*proto*/
static CYTHON_INLINE enum __pyx_t_8csiquant_6ctypes_Error __pyx_f_8csiquant_6ctypes_pow_qdata(struct __pyx_t_8csiquant_6ctypes_QData &, struct __pyx_t_8csiquant_6ctypes_QData const &, double); /*proto*/
static CYTHON_INLINE enum __pyx_t_8csiquant_6ctypes_Error __pyx_f_8csiquant_6ctypes_add_qdata(struct __pyx_t_8csiquant_6ctypes_QData &, struct __pyx_t_8csiquant_6ctypes_QData const &, struct __pyx_t_8csiquant_6ctypes_QData const &); /*proto*/
static CYTHON_INLINE enum __pyx_t_8csiquant_6ctypes_Error __pyx_f_8csiquant_6ctypes_sub_qdata(struct __pyx_t_8csiquant_6ctypes_QData &, struct __pyx_t_8csiquant_6ctypes_QData const &, struct __pyx_t_8csiquant_6ctypes_QData const &); /*proto*/
static CYTHON_INLINE enum __pyx_t_8csiquant_6ctypes_Error __pyx_f_8csiquant_6ctypes_cvt_quantity(struct __pyx_t_8csiquant_6ctypes_QData &, struct __pyx_t_8csiquant_6ctypes_QData const &, struct __pyx_t_8csiquant_6ctypes_UData const &); /*proto*/
static CYTHON_INLINE enum __pyx_t_8csiquant_6ctypes_Error __pyx_f_8csiquant_6ctypes_extract_quantity(double &, struct __pyx_t_8csiquant_6ctypes_QData const &, struct __pyx_t_8csiquant_6ctypes_UData const &); /*proto*/
static CYTHON_INLINE enum __pyx_t_8csiquant_6ctypes_Error __pyx_f_8csiquant_6ctypes_cmp_qdata(int &, struct __pyx_t_8csiquant_6ctypes_QData const &, struct __pyx_t_8csiquant_6ctypes_QData const &); /*proto*/

/* Module declarations from 'csiquant.dimensions' */
static PyTypeObject *__pyx_ptype_8csiquant_10dimensions_Dimensions = 0;

/* Module declarations from 'csiquant.quantities' */
static PyTypeObject *__pyx_ptype_8csiquant_10quantities_SIUnit = 0;
static PyTypeObject *__pyx_ptype_8csiquant_10quantities_Quantity = 0;
static PyTypeObject *__pyx_ptype_8csiquant_10quantities___pyx_scope_struct__quantities = 0;
static PyTypeObject *__pyx_ptype_8csiquant_10quantities___pyx_scope_struct_1_values = 0;
static CYTHON_INLINE struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_f_8csiquant_10quantities_mul_quantities(struct __pyx_t_8csiquant_6ctypes_QData const &, struct __pyx_t_8csiquant_6ctypes_QData const &); /*proto*/
static CYTHON_INLINE struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_f_8csiquant_10quantities_mul_units(struct __pyx_t_8csiquant_6ctypes_UData const &, struct __pyx_t_8csiquant_6ctypes_UData const &); /*proto*/
static CYTHON_INLINE struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_f_8csiquant_10quantities_div_quantities(struct __pyx_t_8csiquant_6ctypes_QData const &, struct __pyx_t_8csiquant_6ctypes_QData const &); /*proto*/
static CYTHON_INLINE struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_f_8csiquant_10quantities_div_units(struct __pyx_t_8csiquant_6ctypes_UData const &, struct __pyx_t_8csiquant_6ctypes_UData const &); /*proto*/
static CYTHON_INLINE enum __pyx_t_8csiquant_6ctypes_Operand __pyx_f_8csiquant_10quantities_parse_uoperand(struct __pyx_t_8csiquant_6ctypes_QData &, PyObject *); /*proto*/
static CYTHON_INLINE enum __pyx_t_8csiquant_6ctypes_Operand __pyx_f_8csiquant_10quantities_parse_qoperand(struct __pyx_t_8csiquant_6ctypes_QData &, PyObject *); /*proto*/
static CYTHON_INLINE enum __pyx_t_8csiquant_6ctypes_Operand __pyx_f_8csiquant_10quantities_extract_udata(struct __pyx_t_8csiquant_6ctypes_UData &, struct __pyx_obj_8csiquant_10quantities_SIUnit *); /*proto*/
static CYTHON_INLINE enum __pyx_t_8csiquant_6ctypes_Operand __pyx_f_8csiquant_10quantities_extract_qdata(struct __pyx_t_8csiquant_6ctypes_QData &, struct __pyx_obj_8csiquant_10quantities_Quantity *); /*proto*/
static CYTHON_INLINE PyObject *__Pyx_carray_to_py_double(double *, Py_ssize_t); /*proto*/
static CYTHON_INLINE PyObject *__Pyx_carray_to_tuple_double(double *, Py_ssize_t); /*proto*/
#define __Pyx_MODULE_NAME "csiquant.quantities"
extern int __pyx_module_is_main_csiquant__quantities;
int __pyx_module_is_main_csiquant__quantities = 0;

/* Implementation of 'csiquant.quantities' */
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_ZeroDivisionError;
static PyObject *__pyx_builtin_staticmethod;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_NotImplemented;
static PyObject *__pyx_builtin_range;
static const char __pyx_k_a[] = "a";
static const char __pyx_k_d[] = "d";
static const char __pyx_k_f[] = "f";
static const char __pyx_k_k[] = "k";
static const char __pyx_k_m[] = "m";
static const char __pyx_k_s[] = "s";
static const char __pyx_k__8[] = ", ";
static const char __pyx_k__9[] = ")";
static const char __pyx_k_cd[] = "cd";
static const char __pyx_k_kg[] = "kg";
static const char __pyx_k__18[] = "*";
static const char __pyx_k_cmp[] = "cmp";
static const char __pyx_k_exp[] = "exp";
static const char __pyx_k_mol[] = "mol";
static const char __pyx_k_Unit[] = "Unit";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_atol[] = "atol";
static const char __pyx_k_call[] = "__call__";
static const char __pyx_k_dims[] = "dims";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_qtol[] = "qtol";
static const char __pyx_k_rtol[] = "rtol";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_is_of[] = "is_of";
static const char __pyx_k_other[] = "other";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_scale[] = "scale";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_units[] = "units";
static const char __pyx_k_SIUnit[] = "SIUnit(";
static const char __pyx_k_approx[] = "approx";
static const char __pyx_k_cvt_to[] = "cvt_to";
static const char __pyx_k_demote[] = "demote";
static const char __pyx_k_get_as[] = "get_as";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_values[] = "values";
static const char __pyx_k_promote[] = "promote";
static const char __pyx_k_Quantity[] = "Quantity(";
static const char __pyx_k_SIUnit_2[] = "SIUnit";
static const char __pyx_k_a_approx[] = "a_approx";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_memodict[] = "memodict";
static const char __pyx_k_q_approx[] = "q_approx";
static const char __pyx_k_quantity[] = "quantity";
static const char __pyx_k_r_approx[] = "r_approx";
static const char __pyx_k_round_to[] = "round_to";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_Quantity_2[] = "Quantity";
static const char __pyx_k_SCALE_RTOL[] = "SCALE_RTOL";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_compatible[] = "compatible";
static const char __pyx_k_dimensions[] = "dimensions";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_quantities[] = "quantities";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_staticmethod[] = "staticmethod";
static const char __pyx_k_SIUnit_values[] = "SIUnit.values";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_unit_mismatch[] = "unit mismatch";
static const char __pyx_k_NotImplemented[] = "NotImplemented";
static const char __pyx_k_units_mismatch[] = "units mismatch";
static const char __pyx_k_dimensionless_t[] = "dimensionless_t";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_SIUnit_quantities[] = "SIUnit.quantities";
static const char __pyx_k_ZeroDivisionError[] = "ZeroDivisionError";
static const char __pyx_k_unit_mismatch_lhs[] = "unit mismatch (lhs)";
static const char __pyx_k_unit_mismatch_rhs[] = "unit mismatch (rhs)";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_Expected_Dimensions[] = "Expected Dimensions";
static const char __pyx_k_csiquant_dimensions[] = "csiquant.dimensions";
static const char __pyx_k_csiquant_quantities[] = "csiquant.quantities";
static const char __pyx_k_Expected_SIUnit_Number[] = "Expected SIUnit ** Number";
static const char __pyx_k_Unknow_Error_Occurred_i[] = "Unknow Error Occurred: %i";
static const char __pyx_k_csiquant_quantities_pyx[] = "csiquant/quantities.pyx";
static const char __pyx_k_Expected_Quantity_Number[] = "Expected Quantity ** Number";
static const char __pyx_k_Unknown_Error_Occurred_d[] = "Unknown Error Occurred: %d";
static const char __pyx_k_Unknown_Error_Occurred_i[] = "Unknown Error Occurred: %i";
static const char __pyx_k_Pickling_of_struct_members_such[] = "Pickling of struct members such as self.data must be explicitly requested with @auto_pickle(True)";
static const char __pyx_k_arg_scale_must_be_greater_than_0[] = "arg 'scale' must be greater than 0";
static PyObject *__pyx_kp_u_Expected_Dimensions;
static PyObject *__pyx_kp_u_Expected_Quantity_Number;
static PyObject *__pyx_kp_u_Expected_SIUnit_Number;
static PyObject *__pyx_n_s_NotImplemented;
static PyObject *__pyx_kp_s_Pickling_of_struct_members_such;
static PyObject *__pyx_kp_u_Quantity;
static PyObject *__pyx_n_s_Quantity_2;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_SCALE_RTOL;
static PyObject *__pyx_kp_u_SIUnit;
static PyObject *__pyx_n_s_SIUnit_2;
static PyObject *__pyx_n_s_SIUnit_quantities;
static PyObject *__pyx_n_s_SIUnit_values;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_Unit;
static PyObject *__pyx_kp_s_Unknow_Error_Occurred_i;
static PyObject *__pyx_kp_s_Unknown_Error_Occurred_d;
static PyObject *__pyx_kp_s_Unknown_Error_Occurred_i;
static PyObject *__pyx_kp_u_Unknown_Error_Occurred_i;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_ZeroDivisionError;
static PyObject *__pyx_n_s__18;
static PyObject *__pyx_kp_u__8;
static PyObject *__pyx_kp_u__9;
static PyObject *__pyx_n_s_a;
static PyObject *__pyx_n_s_a_approx;
static PyObject *__pyx_n_s_approx;
static PyObject *__pyx_kp_u_arg_scale_must_be_greater_than_0;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_atol;
static PyObject *__pyx_n_s_call;
static PyObject *__pyx_n_s_cd;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_cmp;
static PyObject *__pyx_n_s_compatible;
static PyObject *__pyx_n_s_csiquant_dimensions;
static PyObject *__pyx_n_s_csiquant_quantities;
static PyObject *__pyx_kp_s_csiquant_quantities_pyx;
static PyObject *__pyx_n_s_cvt_to;
static PyObject *__pyx_n_s_d;
static PyObject *__pyx_n_s_demote;
static PyObject *__pyx_n_s_dimensionless_t;
static PyObject *__pyx_n_s_dimensions;
static PyObject *__pyx_n_s_dims;
static PyObject *__pyx_n_s_exp;
static PyObject *__pyx_n_u_f;
static PyObject *__pyx_n_s_get_as;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_is_of;
static PyObject *__pyx_n_s_k;
static PyObject *__pyx_n_s_kg;
static PyObject *__pyx_n_s_m;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_memodict;
static PyObject *__pyx_n_s_mol;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_other;
static PyObject *__pyx_n_s_promote;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_q_approx;
static PyObject *__pyx_n_s_qtol;
static PyObject *__pyx_n_s_quantities;
static PyObject *__pyx_n_s_quantity;
static PyObject *__pyx_n_s_r_approx;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_round_to;
static PyObject *__pyx_n_s_rtol;
static PyObject *__pyx_n_s_s;
static PyObject *__pyx_n_s_scale;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_staticmethod;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_kp_u_unit_mismatch;
static PyObject *__pyx_kp_u_unit_mismatch_lhs;
static PyObject *__pyx_kp_u_unit_mismatch_rhs;
static PyObject *__pyx_n_s_units;
static PyObject *__pyx_kp_u_units_mismatch;
static PyObject *__pyx_n_s_values;
static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_Unit(PyObject *__pyx_v_scale, PyObject *__pyx_v_kg, PyObject *__pyx_v_m, PyObject *__pyx_v_s, PyObject *__pyx_v_k, PyObject *__pyx_v_a, PyObject *__pyx_v_mol, PyObject *__pyx_v_cd); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_5scale___get__(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_10dimensions___get__(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_2kg___get__(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_1m___get__(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_1s___get__(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_1k___get__(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_1a___get__(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_3mol___get__(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_2cd___get__(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self); /* proto */
static int __pyx_pf_8csiquant_10quantities_6SIUnit_2__init__(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self, double __pyx_v_scale, struct __pyx_obj_8csiquant_10dimensions_Dimensions *__pyx_v_dims); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_4pack(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_6unpack(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_8quantities(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self, PyObject *__pyx_v_iterable); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_11values(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self, PyObject *__pyx_v_iterable); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_14promote(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self, double __pyx_v_value); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_16demote(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self, struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_18is_of(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self, struct __pyx_obj_8csiquant_10dimensions_Dimensions *__pyx_v_dims); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_20__eq__(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_lhs, PyObject *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_22__ne__(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_lhs, PyObject *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_24__lt__(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_lhs, struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_26__le__(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_lhs, struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_28__gt__(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_lhs, struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_30__ge__(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_lhs, struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_32cmp(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self, struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_34approx(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self, struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_other, double __pyx_v_rtol, double __pyx_v_atol); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_36compatible(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self, struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_38__mul__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_40__truediv__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_42__invert__(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_44__pow__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs, CYTHON_UNUSED PyObject *__pyx_v_modulo); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_46exp(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self, double __pyx_v_power); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_48__copy__(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_50__deepcopy__(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_memodict); /* proto */
static Py_hash_t __pyx_pf_8csiquant_10quantities_6SIUnit_52__hash__(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_54__repr__(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_56__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_58__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_8quantity___get__(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_5units___get__(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self); /* proto */
static int __pyx_pf_8csiquant_10quantities_8Quantity___init__(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self, double __pyx_v_quantity, struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_units); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_2is_of(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self, struct __pyx_obj_8csiquant_10dimensions_Dimensions *__pyx_v_dims); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_4get_as(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self, struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_units); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_6cvt_to(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self, struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_units); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_8round_to(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self, struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_units); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_10__eq__(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_lhs, PyObject *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_12__ne__(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_lhs, PyObject *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_14__lt__(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_lhs, struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_16__le__(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_lhs, struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_18__gt__(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_lhs, struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_20__ge__(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_lhs, struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_22cmp(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self, struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_24compatible(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self, struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_26r_approx(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self, struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_other, double __pyx_v_rtol); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_28a_approx(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self, struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_other, double __pyx_v_atol); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_30q_approx(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self, struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_other, struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_qtol); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_32__add__(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_lhs, struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_34__sub__(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_lhs, struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_36__mul__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_38__truediv__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_40__pow__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs, CYTHON_UNUSED PyObject *__pyx_v_modulo); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_42__neg__(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_44__invert__(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_46__abs__(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_48exp(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self, double __pyx_v_power); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_50__copy__(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_52__deepcopy__(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_memodict); /* proto */
static int __pyx_pf_8csiquant_10quantities_8Quantity_54__bool__(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_56__float__(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_58__int__(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self); /* proto */
static Py_hash_t __pyx_pf_8csiquant_10quantities_8Quantity_60__hash__(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_62__repr__(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_64__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_66__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_8csiquant_10quantities_SIUnit(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8csiquant_10quantities_Quantity(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8csiquant_10quantities___pyx_scope_struct__quantities(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8csiquant_10quantities___pyx_scope_struct_1_values(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_float_1eneg_9;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static struct __pyx_obj_8csiquant_10dimensions_Dimensions *__pyx_k_;
static PyObject *__pyx_k__7;
static PyObject *__pyx_k__15;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_codeobj__20;
/* Late includes */

/* "csiquant/quantities.pyx":15
 * 
 *     @staticmethod
 *     def Unit(scale=1, kg=0, m=0, s=0, k=0, a=0, mol=0, cd=0):             # <<<<<<<<<<<<<<
 *         return SIUnit(scale, d.Dimensions(kg, m, s, k, a, mol, cd))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_1Unit(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8csiquant_10quantities_6SIUnit_1Unit = {"Unit", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8csiquant_10quantities_6SIUnit_1Unit, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_1Unit(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_scale = 0;
  PyObject *__pyx_v_kg = 0;
  PyObject *__pyx_v_m = 0;
  PyObject *__pyx_v_s = 0;
  PyObject *__pyx_v_k = 0;
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_mol = 0;
  PyObject *__pyx_v_cd = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Unit (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_scale,&__pyx_n_s_kg,&__pyx_n_s_m,&__pyx_n_s_s,&__pyx_n_s_k,&__pyx_n_s_a,&__pyx_n_s_mol,&__pyx_n_s_cd,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    values[0] = ((PyObject *)__pyx_int_1);
    values[1] = ((PyObject *)__pyx_int_0);
    values[2] = ((PyObject *)__pyx_int_0);
    values[3] = ((PyObject *)__pyx_int_0);
    values[4] = ((PyObject *)__pyx_int_0);
    values[5] = ((PyObject *)__pyx_int_0);
    values[6] = ((PyObject *)__pyx_int_0);
    values[7] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_scale);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_kg);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_s);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mol);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cd);
          if (value) { values[7] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "Unit") < 0)) __PYX_ERR(1, 15, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_scale = values[0];
    __pyx_v_kg = values[1];
    __pyx_v_m = values[2];
    __pyx_v_s = values[3];
    __pyx_v_k = values[4];
    __pyx_v_a = values[5];
    __pyx_v_mol = values[6];
    __pyx_v_cd = values[7];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("Unit", 0, 0, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 15, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("csiquant.quantities.SIUnit.Unit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8csiquant_10quantities_6SIUnit_Unit(__pyx_v_scale, __pyx_v_kg, __pyx_v_m, __pyx_v_s, __pyx_v_k, __pyx_v_a, __pyx_v_mol, __pyx_v_cd);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_Unit(PyObject *__pyx_v_scale, PyObject *__pyx_v_kg, PyObject *__pyx_v_m, PyObject *__pyx_v_s, PyObject *__pyx_v_k, PyObject *__pyx_v_a, PyObject *__pyx_v_mol, PyObject *__pyx_v_cd) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("Unit", 0);

  /* "csiquant/quantities.pyx":16
 *     @staticmethod
 *     def Unit(scale=1, kg=0, m=0, s=0, k=0, a=0, mol=0, cd=0):
 *         return SIUnit(scale, d.Dimensions(kg, m, s, k, a, mol, cd))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(7); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_kg);
  __Pyx_GIVEREF(__pyx_v_kg);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_kg);
  __Pyx_INCREF(__pyx_v_m);
  __Pyx_GIVEREF(__pyx_v_m);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_m);
  __Pyx_INCREF(__pyx_v_s);
  __Pyx_GIVEREF(__pyx_v_s);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_s);
  __Pyx_INCREF(__pyx_v_k);
  __Pyx_GIVEREF(__pyx_v_k);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_v_k);
  __Pyx_INCREF(__pyx_v_a);
  __Pyx_GIVEREF(__pyx_v_a);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_v_a);
  __Pyx_INCREF(__pyx_v_mol);
  __Pyx_GIVEREF(__pyx_v_mol);
  PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_v_mol);
  __Pyx_INCREF(__pyx_v_cd);
  __Pyx_GIVEREF(__pyx_v_cd);
  PyTuple_SET_ITEM(__pyx_t_1, 6, __pyx_v_cd);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8csiquant_10dimensions_Dimensions), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_scale);
  __Pyx_GIVEREF(__pyx_v_scale);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_scale);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8csiquant_10quantities_SIUnit), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":15
 * 
 *     @staticmethod
 *     def Unit(scale=1, kg=0, m=0, s=0, k=0, a=0, mol=0, cd=0):             # <<<<<<<<<<<<<<
 *         return SIUnit(scale, d.Dimensions(kg, m, s, k, a, mol, cd))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("csiquant.quantities.SIUnit.Unit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":19
 * 
 *     @property
 *     def scale(self):             # <<<<<<<<<<<<<<
 *         return self.data.scale
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_5scale_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_5scale_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8csiquant_10quantities_6SIUnit_5scale___get__(((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_5scale___get__(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "csiquant/quantities.pyx":20
 *     @property
 *     def scale(self):
 *         return self.data.scale             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->data.scale); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":19
 * 
 *     @property
 *     def scale(self):             # <<<<<<<<<<<<<<
 *         return self.data.scale
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("csiquant.quantities.SIUnit.scale.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":23
 * 
 *     @property
 *     def dimensions(self):             # <<<<<<<<<<<<<<
 *         cdef d.Dimensions dims = d.Dimensions.__new__(d.Dimensions)
 *         dims.data = self.data.dimensions
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_10dimensions_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_10dimensions_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8csiquant_10quantities_6SIUnit_10dimensions___get__(((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_10dimensions___get__(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self) {
  struct __pyx_obj_8csiquant_10dimensions_Dimensions *__pyx_v_dims = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_t_8csiquant_6ctypes_DData __pyx_t_2;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "csiquant/quantities.pyx":24
 *     @property
 *     def dimensions(self):
 *         cdef d.Dimensions dims = d.Dimensions.__new__(d.Dimensions)             # <<<<<<<<<<<<<<
 *         dims.data = self.data.dimensions
 *         return dims
 */
  __pyx_t_1 = __Pyx_tp_new(((PyObject *)__pyx_ptype_8csiquant_10dimensions_Dimensions), __pyx_empty_tuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_8csiquant_10dimensions_Dimensions)))) __PYX_ERR(1, 24, __pyx_L1_error)
  __pyx_v_dims = ((struct __pyx_obj_8csiquant_10dimensions_Dimensions *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "csiquant/quantities.pyx":25
 *     def dimensions(self):
 *         cdef d.Dimensions dims = d.Dimensions.__new__(d.Dimensions)
 *         dims.data = self.data.dimensions             # <<<<<<<<<<<<<<
 *         return dims
 * 
 */
  __pyx_t_2 = __pyx_v_self->data.dimensions;
  __pyx_v_dims->data = __pyx_t_2;

  /* "csiquant/quantities.pyx":26
 *         cdef d.Dimensions dims = d.Dimensions.__new__(d.Dimensions)
 *         dims.data = self.data.dimensions
 *         return dims             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_dims));
  __pyx_r = ((PyObject *)__pyx_v_dims);
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":23
 * 
 *     @property
 *     def dimensions(self):             # <<<<<<<<<<<<<<
 *         cdef d.Dimensions dims = d.Dimensions.__new__(d.Dimensions)
 *         dims.data = self.data.dimensions
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("csiquant.quantities.SIUnit.dimensions.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_dims);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":29
 * 
 *     @property
 *     def kg(self):             # <<<<<<<<<<<<<<
 *         return self.data.dimensions.exponents[0]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_2kg_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_2kg_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8csiquant_10quantities_6SIUnit_2kg___get__(((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_2kg___get__(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "csiquant/quantities.pyx":30
 *     @property
 *     def kg(self):
 *         return self.data.dimensions.exponents[0]             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->data.dimensions.exponents[0])); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":29
 * 
 *     @property
 *     def kg(self):             # <<<<<<<<<<<<<<
 *         return self.data.dimensions.exponents[0]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("csiquant.quantities.SIUnit.kg.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":33
 * 
 *     @property
 *     def m(self):             # <<<<<<<<<<<<<<
 *         return self.data.dimensions.exponents[1]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_1m_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_1m_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8csiquant_10quantities_6SIUnit_1m___get__(((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_1m___get__(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "csiquant/quantities.pyx":34
 *     @property
 *     def m(self):
 *         return self.data.dimensions.exponents[1]             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->data.dimensions.exponents[1])); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":33
 * 
 *     @property
 *     def m(self):             # <<<<<<<<<<<<<<
 *         return self.data.dimensions.exponents[1]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("csiquant.quantities.SIUnit.m.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":37
 * 
 *     @property
 *     def s(self):             # <<<<<<<<<<<<<<
 *         return self.data.dimensions.exponents[2]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_1s_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_1s_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8csiquant_10quantities_6SIUnit_1s___get__(((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_1s___get__(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "csiquant/quantities.pyx":38
 *     @property
 *     def s(self):
 *         return self.data.dimensions.exponents[2]             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->data.dimensions.exponents[2])); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":37
 * 
 *     @property
 *     def s(self):             # <<<<<<<<<<<<<<
 *         return self.data.dimensions.exponents[2]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("csiquant.quantities.SIUnit.s.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":41
 * 
 *     @property
 *     def k(self):             # <<<<<<<<<<<<<<
 *         return self.data.dimensions.exponents[3]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_1k_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_1k_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8csiquant_10quantities_6SIUnit_1k___get__(((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_1k___get__(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "csiquant/quantities.pyx":42
 *     @property
 *     def k(self):
 *         return self.data.dimensions.exponents[3]             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->data.dimensions.exponents[3])); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":41
 * 
 *     @property
 *     def k(self):             # <<<<<<<<<<<<<<
 *         return self.data.dimensions.exponents[3]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("csiquant.quantities.SIUnit.k.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":45
 * 
 *     @property
 *     def a(self):             # <<<<<<<<<<<<<<
 *         return self.data.dimensions.exponents[4]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_1a_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_1a_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8csiquant_10quantities_6SIUnit_1a___get__(((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_1a___get__(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "csiquant/quantities.pyx":46
 *     @property
 *     def a(self):
 *         return self.data.dimensions.exponents[4]             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->data.dimensions.exponents[4])); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":45
 * 
 *     @property
 *     def a(self):             # <<<<<<<<<<<<<<
 *         return self.data.dimensions.exponents[4]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("csiquant.quantities.SIUnit.a.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":49
 * 
 *     @property
 *     def mol(self):             # <<<<<<<<<<<<<<
 *         return self.data.dimensions.exponents[5]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_3mol_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_3mol_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8csiquant_10quantities_6SIUnit_3mol___get__(((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_3mol___get__(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "csiquant/quantities.pyx":50
 *     @property
 *     def mol(self):
 *         return self.data.dimensions.exponents[5]             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->data.dimensions.exponents[5])); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":49
 * 
 *     @property
 *     def mol(self):             # <<<<<<<<<<<<<<
 *         return self.data.dimensions.exponents[5]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("csiquant.quantities.SIUnit.mol.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":53
 * 
 *     @property
 *     def cd(self):             # <<<<<<<<<<<<<<
 *         return self.data.dimensions.exponents[6]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_2cd_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_2cd_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8csiquant_10quantities_6SIUnit_2cd___get__(((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_2cd___get__(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "csiquant/quantities.pyx":54
 *     @property
 *     def cd(self):
 *         return self.data.dimensions.exponents[6]             # <<<<<<<<<<<<<<
 * 
 *     def __init__(SIUnit self, double scale=1.0, d.Dimensions dims=d.dimensionless_t):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->data.dimensions.exponents[6])); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":53
 * 
 *     @property
 *     def cd(self):             # <<<<<<<<<<<<<<
 *         return self.data.dimensions.exponents[6]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("csiquant.quantities.SIUnit.cd.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":56
 *         return self.data.dimensions.exponents[6]
 * 
 *     def __init__(SIUnit self, double scale=1.0, d.Dimensions dims=d.dimensionless_t):             # <<<<<<<<<<<<<<
 *         if scale <= 0:
 *             raise ValueError("arg 'scale' must be greater than 0")
 */

/* Python wrapper */
static int __pyx_pw_8csiquant_10quantities_6SIUnit_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8csiquant_10quantities_6SIUnit_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_scale;
  struct __pyx_obj_8csiquant_10dimensions_Dimensions *__pyx_v_dims = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_scale,&__pyx_n_s_dims,0};
    PyObject* values[2] = {0,0};
    values[1] = (PyObject *)__pyx_k_;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_scale);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dims);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(1, 56, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_scale = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_scale == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 56, __pyx_L3_error)
    } else {
      __pyx_v_scale = ((double)1.0);
    }
    __pyx_v_dims = ((struct __pyx_obj_8csiquant_10dimensions_Dimensions *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 56, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("csiquant.quantities.SIUnit.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dims), __pyx_ptype_8csiquant_10dimensions_Dimensions, 1, "dims", 0))) __PYX_ERR(1, 56, __pyx_L1_error)
  __pyx_r = __pyx_pf_8csiquant_10quantities_6SIUnit_2__init__(((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_v_self), __pyx_v_scale, __pyx_v_dims);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8csiquant_10quantities_6SIUnit_2__init__(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self, double __pyx_v_scale, struct __pyx_obj_8csiquant_10dimensions_Dimensions *__pyx_v_dims) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  struct __pyx_t_8csiquant_6ctypes_DData __pyx_t_4;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "csiquant/quantities.pyx":57
 * 
 *     def __init__(SIUnit self, double scale=1.0, d.Dimensions dims=d.dimensionless_t):
 *         if scale <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("arg 'scale' must be greater than 0")
 *         if type(dims) is not d.Dimensions:
 */
  __pyx_t_1 = ((__pyx_v_scale <= 0.0) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "csiquant/quantities.pyx":58
 *     def __init__(SIUnit self, double scale=1.0, d.Dimensions dims=d.dimensionless_t):
 *         if scale <= 0:
 *             raise ValueError("arg 'scale' must be greater than 0")             # <<<<<<<<<<<<<<
 *         if type(dims) is not d.Dimensions:
 *             raise TypeError("Expected Dimensions")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 58, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 58, __pyx_L1_error)

    /* "csiquant/quantities.pyx":57
 * 
 *     def __init__(SIUnit self, double scale=1.0, d.Dimensions dims=d.dimensionless_t):
 *         if scale <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("arg 'scale' must be greater than 0")
 *         if type(dims) is not d.Dimensions:
 */
  }

  /* "csiquant/quantities.pyx":59
 *         if scale <= 0:
 *             raise ValueError("arg 'scale' must be greater than 0")
 *         if type(dims) is not d.Dimensions:             # <<<<<<<<<<<<<<
 *             raise TypeError("Expected Dimensions")
 *         self.data.scale = scale
 */
  __pyx_t_1 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_dims))) != ((PyObject *)__pyx_ptype_8csiquant_10dimensions_Dimensions));
  __pyx_t_3 = (__pyx_t_1 != 0);
  if (unlikely(__pyx_t_3)) {

    /* "csiquant/quantities.pyx":60
 *             raise ValueError("arg 'scale' must be greater than 0")
 *         if type(dims) is not d.Dimensions:
 *             raise TypeError("Expected Dimensions")             # <<<<<<<<<<<<<<
 *         self.data.scale = scale
 *         self.data.dimensions = dims.data
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 60, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 60, __pyx_L1_error)

    /* "csiquant/quantities.pyx":59
 *         if scale <= 0:
 *             raise ValueError("arg 'scale' must be greater than 0")
 *         if type(dims) is not d.Dimensions:             # <<<<<<<<<<<<<<
 *             raise TypeError("Expected Dimensions")
 *         self.data.scale = scale
 */
  }

  /* "csiquant/quantities.pyx":61
 *         if type(dims) is not d.Dimensions:
 *             raise TypeError("Expected Dimensions")
 *         self.data.scale = scale             # <<<<<<<<<<<<<<
 *         self.data.dimensions = dims.data
 * 
 */
  __pyx_v_self->data.scale = __pyx_v_scale;

  /* "csiquant/quantities.pyx":62
 *             raise TypeError("Expected Dimensions")
 *         self.data.scale = scale
 *         self.data.dimensions = dims.data             # <<<<<<<<<<<<<<
 * 
 *     """
 */
  __pyx_t_4 = __pyx_v_dims->data;
  __pyx_v_self->data.dimensions = __pyx_t_4;

  /* "csiquant/quantities.pyx":56
 *         return self.data.dimensions.exponents[6]
 * 
 *     def __init__(SIUnit self, double scale=1.0, d.Dimensions dims=d.dimensionless_t):             # <<<<<<<<<<<<<<
 *         if scale <= 0:
 *             raise ValueError("arg 'scale' must be greater than 0")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("csiquant.quantities.SIUnit.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":68
 *     """
 * 
 *     def pack(SIUnit self, *args):             # <<<<<<<<<<<<<<
 *         return self.quantities(args)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_5pack(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_5pack(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pack (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "pack", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_8csiquant_10quantities_6SIUnit_4pack(((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_v_self), __pyx_v_args);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_4pack(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self, PyObject *__pyx_v_args) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("pack", 0);

  /* "csiquant/quantities.pyx":69
 * 
 *     def pack(SIUnit self, *args):
 *         return self.quantities(args)             # <<<<<<<<<<<<<<
 * 
 *     def unpack(SIUnit self, *args):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_quantities); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_args) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_args);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":68
 *     """
 * 
 *     def pack(SIUnit self, *args):             # <<<<<<<<<<<<<<
 *         return self.quantities(args)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("csiquant.quantities.SIUnit.pack", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":71
 *         return self.quantities(args)
 * 
 *     def unpack(SIUnit self, *args):             # <<<<<<<<<<<<<<
 *         return self.values(args)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_7unpack(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_7unpack(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("unpack (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "unpack", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_8csiquant_10quantities_6SIUnit_6unpack(((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_v_self), __pyx_v_args);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_6unpack(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self, PyObject *__pyx_v_args) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("unpack", 0);

  /* "csiquant/quantities.pyx":72
 * 
 *     def unpack(SIUnit self, *args):
 *         return self.values(args)             # <<<<<<<<<<<<<<
 * 
 *     def quantities(SIUnit self, iterable):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_values); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_args) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_args);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":71
 *         return self.quantities(args)
 * 
 *     def unpack(SIUnit self, *args):             # <<<<<<<<<<<<<<
 *         return self.values(args)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("csiquant.quantities.SIUnit.unpack", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_8csiquant_10quantities_6SIUnit_10generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "csiquant/quantities.pyx":74
 *         return self.values(args)
 * 
 *     def quantities(SIUnit self, iterable):             # <<<<<<<<<<<<<<
 *         for value in iterable:
 *             yield self.promote(value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_9quantities(PyObject *__pyx_v_self, PyObject *__pyx_v_iterable); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_9quantities(PyObject *__pyx_v_self, PyObject *__pyx_v_iterable) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("quantities (wrapper)", 0);
  __pyx_r = __pyx_pf_8csiquant_10quantities_6SIUnit_8quantities(((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_v_self), ((PyObject *)__pyx_v_iterable));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_8quantities(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self, PyObject *__pyx_v_iterable) {
  struct __pyx_obj_8csiquant_10quantities___pyx_scope_struct__quantities *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("quantities", 0);
  __pyx_cur_scope = (struct __pyx_obj_8csiquant_10quantities___pyx_scope_struct__quantities *)__pyx_tp_new_8csiquant_10quantities___pyx_scope_struct__quantities(__pyx_ptype_8csiquant_10quantities___pyx_scope_struct__quantities, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_8csiquant_10quantities___pyx_scope_struct__quantities *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 74, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_iterable = __pyx_v_iterable;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_iterable);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_iterable);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_8csiquant_10quantities_6SIUnit_10generator, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_quantities, __pyx_n_s_SIUnit_quantities, __pyx_n_s_csiquant_quantities); if (unlikely(!gen)) __PYX_ERR(1, 74, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("csiquant.quantities.SIUnit.quantities", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_8csiquant_10quantities_6SIUnit_10generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_8csiquant_10quantities___pyx_scope_struct__quantities *__pyx_cur_scope = ((struct __pyx_obj_8csiquant_10quantities___pyx_scope_struct__quantities *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("quantities", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 74, __pyx_L1_error)

  /* "csiquant/quantities.pyx":75
 * 
 *     def quantities(SIUnit self, iterable):
 *         for value in iterable:             # <<<<<<<<<<<<<<
 *             yield self.promote(value)
 * 
 */
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_iterable)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_iterable)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_v_iterable; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_iterable); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 75, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 75, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 75, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 75, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 75, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 75, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_value);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_value, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;

    /* "csiquant/quantities.pyx":76
 *     def quantities(SIUnit self, iterable):
 *         for value in iterable:
 *             yield self.promote(value)             # <<<<<<<<<<<<<<
 * 
 *     def values(SIUnit self, iterable):
 */
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_cur_scope->__pyx_v_value); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 76, __pyx_L1_error)
    __pyx_t_4 = ((struct __pyx_vtabstruct_8csiquant_10quantities_SIUnit *)__pyx_cur_scope->__pyx_v_self->__pyx_vtab)->promote(__pyx_cur_scope->__pyx_v_self, __pyx_t_5, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 76, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 76, __pyx_L1_error)

    /* "csiquant/quantities.pyx":75
 * 
 *     def quantities(SIUnit self, iterable):
 *         for value in iterable:             # <<<<<<<<<<<<<<
 *             yield self.promote(value)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "csiquant/quantities.pyx":74
 *         return self.values(args)
 * 
 *     def quantities(SIUnit self, iterable):             # <<<<<<<<<<<<<<
 *         for value in iterable:
 *             yield self.promote(value)
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("quantities", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_8csiquant_10quantities_6SIUnit_13generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "csiquant/quantities.pyx":78
 *             yield self.promote(value)
 * 
 *     def values(SIUnit self, iterable):             # <<<<<<<<<<<<<<
 *         for quantity in iterable:
 *             yield self.demote(quantity)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_12values(PyObject *__pyx_v_self, PyObject *__pyx_v_iterable); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_12values(PyObject *__pyx_v_self, PyObject *__pyx_v_iterable) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("values (wrapper)", 0);
  __pyx_r = __pyx_pf_8csiquant_10quantities_6SIUnit_11values(((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_v_self), ((PyObject *)__pyx_v_iterable));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_11values(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self, PyObject *__pyx_v_iterable) {
  struct __pyx_obj_8csiquant_10quantities___pyx_scope_struct_1_values *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("values", 0);
  __pyx_cur_scope = (struct __pyx_obj_8csiquant_10quantities___pyx_scope_struct_1_values *)__pyx_tp_new_8csiquant_10quantities___pyx_scope_struct_1_values(__pyx_ptype_8csiquant_10quantities___pyx_scope_struct_1_values, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_8csiquant_10quantities___pyx_scope_struct_1_values *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 78, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_iterable = __pyx_v_iterable;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_iterable);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_iterable);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_8csiquant_10quantities_6SIUnit_13generator1, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_values, __pyx_n_s_SIUnit_values, __pyx_n_s_csiquant_quantities); if (unlikely(!gen)) __PYX_ERR(1, 78, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("csiquant.quantities.SIUnit.values", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_8csiquant_10quantities_6SIUnit_13generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_8csiquant_10quantities___pyx_scope_struct_1_values *__pyx_cur_scope = ((struct __pyx_obj_8csiquant_10quantities___pyx_scope_struct_1_values *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("values", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 78, __pyx_L1_error)

  /* "csiquant/quantities.pyx":79
 * 
 *     def values(SIUnit self, iterable):
 *         for quantity in iterable:             # <<<<<<<<<<<<<<
 *             yield self.demote(quantity)
 * 
 */
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_iterable)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_iterable)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_v_iterable; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_iterable); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 79, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 79, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 79, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 79, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 79, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 79, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_quantity);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_quantity, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;

    /* "csiquant/quantities.pyx":80
 *     def values(SIUnit self, iterable):
 *         for quantity in iterable:
 *             yield self.demote(quantity)             # <<<<<<<<<<<<<<
 * 
 *     cpdef promote(SIUnit self, double value):
 */
    if (!(likely(((__pyx_cur_scope->__pyx_v_quantity) == Py_None) || likely(__Pyx_TypeTest(__pyx_cur_scope->__pyx_v_quantity, __pyx_ptype_8csiquant_10quantities_Quantity))))) __PYX_ERR(1, 80, __pyx_L1_error)
    __pyx_t_4 = ((struct __pyx_vtabstruct_8csiquant_10quantities_SIUnit *)__pyx_cur_scope->__pyx_v_self->__pyx_vtab)->demote(__pyx_cur_scope->__pyx_v_self, ((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_cur_scope->__pyx_v_quantity), 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 80, __pyx_L1_error)

    /* "csiquant/quantities.pyx":79
 * 
 *     def values(SIUnit self, iterable):
 *         for quantity in iterable:             # <<<<<<<<<<<<<<
 *             yield self.demote(quantity)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "csiquant/quantities.pyx":78
 *             yield self.promote(value)
 * 
 *     def values(SIUnit self, iterable):             # <<<<<<<<<<<<<<
 *         for quantity in iterable:
 *             yield self.demote(quantity)
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("values", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":82
 *             yield self.demote(quantity)
 * 
 *     cpdef promote(SIUnit self, double value):             # <<<<<<<<<<<<<<
 *         cdef Quantity ret = Quantity.__new__(Quantity)
 *         ret.data.quantity = value
 */

static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_15promote(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static PyObject *__pyx_f_8csiquant_10quantities_6SIUnit_promote(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self, double __pyx_v_value, int __pyx_skip_dispatch) {
  struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_ret = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  struct __pyx_t_8csiquant_6ctypes_UData __pyx_t_6;
  __Pyx_RefNannySetupContext("promote", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
    static PY_UINT64_T tp_dict_version = 0, obj_dict_version = 0;
    if (likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict && tp_dict_version == __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) && (!Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset || obj_dict_version == __PYX_GET_DICT_VERSION(_PyObject_GetDictPtr(((PyObject *)__pyx_v_self))))));
    else {
      PY_UINT64_T type_dict_guard = (likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict)) ? __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) : 0;
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_promote); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 82, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_8csiquant_10quantities_6SIUnit_15promote)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = PyFloat_FromDouble(__pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 82, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 82, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
      tp_dict_version = likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) ? __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) : 0;
      obj_dict_version = likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset) ? __PYX_GET_DICT_VERSION(_PyObject_GetDictPtr(((PyObject *)__pyx_v_self))) : 0;
      if (unlikely(type_dict_guard != tp_dict_version)) {
        tp_dict_version = obj_dict_version = 0;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
    }
    #endif
  }

  /* "csiquant/quantities.pyx":83
 * 
 *     cpdef promote(SIUnit self, double value):
 *         cdef Quantity ret = Quantity.__new__(Quantity)             # <<<<<<<<<<<<<<
 *         ret.data.quantity = value
 *         ret.data.units = self.data
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_8csiquant_10quantities_Quantity(((PyTypeObject *)__pyx_ptype_8csiquant_10quantities_Quantity), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 83, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_ret = ((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "csiquant/quantities.pyx":84
 *     cpdef promote(SIUnit self, double value):
 *         cdef Quantity ret = Quantity.__new__(Quantity)
 *         ret.data.quantity = value             # <<<<<<<<<<<<<<
 *         ret.data.units = self.data
 *         return ret
 */
  __pyx_v_ret->data.quantity = __pyx_v_value;

  /* "csiquant/quantities.pyx":85
 *         cdef Quantity ret = Quantity.__new__(Quantity)
 *         ret.data.quantity = value
 *         ret.data.units = self.data             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
  __pyx_t_6 = __pyx_v_self->data;
  __pyx_v_ret->data.units = __pyx_t_6;

  /* "csiquant/quantities.pyx":86
 *         ret.data.quantity = value
 *         ret.data.units = self.data
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     cpdef demote(SIUnit self, Quantity value):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_ret));
  __pyx_r = ((PyObject *)__pyx_v_ret);
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":82
 *             yield self.demote(quantity)
 * 
 *     cpdef promote(SIUnit self, double value):             # <<<<<<<<<<<<<<
 *         cdef Quantity ret = Quantity.__new__(Quantity)
 *         ret.data.quantity = value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("csiquant.quantities.SIUnit.promote", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_15promote(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_15promote(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  double __pyx_v_value;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("promote (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsDouble(__pyx_arg_value); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 82, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("csiquant.quantities.SIUnit.promote", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8csiquant_10quantities_6SIUnit_14promote(((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_v_self), ((double)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_14promote(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self, double __pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("promote", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8csiquant_10quantities_6SIUnit_promote(__pyx_v_self, __pyx_v_value, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("csiquant.quantities.SIUnit.promote", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":88
 *         return ret
 * 
 *     cpdef demote(SIUnit self, Quantity value):             # <<<<<<<<<<<<<<
 *         cdef int error_code
 *         cdef double ret
 */

static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_17demote(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_f_8csiquant_10quantities_6SIUnit_demote(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self, struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_value, int __pyx_skip_dispatch) {
  int __pyx_v_error_code;
  double __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("demote", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
    static PY_UINT64_T tp_dict_version = 0, obj_dict_version = 0;
    if (likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict && tp_dict_version == __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) && (!Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset || obj_dict_version == __PYX_GET_DICT_VERSION(_PyObject_GetDictPtr(((PyObject *)__pyx_v_self))))));
    else {
      PY_UINT64_T type_dict_guard = (likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict)) ? __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) : 0;
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_demote); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 88, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_8csiquant_10quantities_6SIUnit_17demote)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, ((PyObject *)__pyx_v_value)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_value));
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 88, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
      tp_dict_version = likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) ? __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) : 0;
      obj_dict_version = likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset) ? __PYX_GET_DICT_VERSION(_PyObject_GetDictPtr(((PyObject *)__pyx_v_self))) : 0;
      if (unlikely(type_dict_guard != tp_dict_version)) {
        tp_dict_version = obj_dict_version = 0;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
    }
    #endif
  }

  /* "csiquant/quantities.pyx":91
 *         cdef int error_code
 *         cdef double ret
 *         error_code = c.extract_quantity(ret, value.data, self.data)             # <<<<<<<<<<<<<<
 *         if error_code == c.Success:
 *             return ret
 */
  __pyx_v_error_code = __pyx_f_8csiquant_6ctypes_extract_quantity(__pyx_v_ret, __pyx_v_value->data, __pyx_v_self->data);

  /* "csiquant/quantities.pyx":92
 *         cdef double ret
 *         error_code = c.extract_quantity(ret, value.data, self.data)
 *         if error_code == c.Success:             # <<<<<<<<<<<<<<
 *             return ret
 * 
 */
  __pyx_t_5 = ((__pyx_v_error_code == __pyx_e_8csiquant_6ctypes_Success) != 0);
  if (__pyx_t_5) {

    /* "csiquant/quantities.pyx":93
 *         error_code = c.extract_quantity(ret, value.data, self.data)
 *         if error_code == c.Success:
 *             return ret             # <<<<<<<<<<<<<<
 * 
 *         if error_code == c.DimensionMismatch:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_ret); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "csiquant/quantities.pyx":92
 *         cdef double ret
 *         error_code = c.extract_quantity(ret, value.data, self.data)
 *         if error_code == c.Success:             # <<<<<<<<<<<<<<
 *             return ret
 * 
 */
  }

  /* "csiquant/quantities.pyx":95
 *             return ret
 * 
 *         if error_code == c.DimensionMismatch:             # <<<<<<<<<<<<<<
 *             raise ValueError("unit mismatch")
 * 
 */
  __pyx_t_5 = ((__pyx_v_error_code == __pyx_e_8csiquant_6ctypes_DimensionMismatch) != 0);
  if (unlikely(__pyx_t_5)) {

    /* "csiquant/quantities.pyx":96
 * 
 *         if error_code == c.DimensionMismatch:
 *             raise ValueError("unit mismatch")             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 96, __pyx_L1_error)

    /* "csiquant/quantities.pyx":95
 *             return ret
 * 
 *         if error_code == c.DimensionMismatch:             # <<<<<<<<<<<<<<
 *             raise ValueError("unit mismatch")
 * 
 */
  }

  /* "csiquant/quantities.pyx":99
 * 
 * 
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)             # <<<<<<<<<<<<<<
 * 
 *     __call__ = quantities
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_error_code); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyUnicode_Format(__pyx_kp_u_Unknown_Error_Occurred_i, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_RuntimeError, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 99, __pyx_L1_error)

  /* "csiquant/quantities.pyx":88
 *         return ret
 * 
 *     cpdef demote(SIUnit self, Quantity value):             # <<<<<<<<<<<<<<
 *         cdef int error_code
 *         cdef double ret
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("csiquant.quantities.SIUnit.demote", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_17demote(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_17demote(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("demote (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), __pyx_ptype_8csiquant_10quantities_Quantity, 1, "value", 0))) __PYX_ERR(1, 88, __pyx_L1_error)
  __pyx_r = __pyx_pf_8csiquant_10quantities_6SIUnit_16demote(((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_v_self), ((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_16demote(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self, struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("demote", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8csiquant_10quantities_6SIUnit_demote(__pyx_v_self, __pyx_v_value, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("csiquant.quantities.SIUnit.demote", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":107
 *     """
 * 
 *     cpdef is_of(SIUnit self, d.Dimensions dims):             # <<<<<<<<<<<<<<
 *         if dims is None:
 *             raise TypeError()
 */

static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_19is_of(PyObject *__pyx_v_self, PyObject *__pyx_v_dims); /*proto*/
static PyObject *__pyx_f_8csiquant_10quantities_6SIUnit_is_of(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self, struct __pyx_obj_8csiquant_10dimensions_Dimensions *__pyx_v_dims, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("is_of", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
    static PY_UINT64_T tp_dict_version = 0, obj_dict_version = 0;
    if (likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict && tp_dict_version == __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) && (!Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset || obj_dict_version == __PYX_GET_DICT_VERSION(_PyObject_GetDictPtr(((PyObject *)__pyx_v_self))))));
    else {
      PY_UINT64_T type_dict_guard = (likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict)) ? __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) : 0;
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_of); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 107, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_8csiquant_10quantities_6SIUnit_19is_of)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, ((PyObject *)__pyx_v_dims)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_dims));
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 107, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
      tp_dict_version = likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) ? __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) : 0;
      obj_dict_version = likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset) ? __PYX_GET_DICT_VERSION(_PyObject_GetDictPtr(((PyObject *)__pyx_v_self))) : 0;
      if (unlikely(type_dict_guard != tp_dict_version)) {
        tp_dict_version = obj_dict_version = 0;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
    }
    #endif
  }

  /* "csiquant/quantities.pyx":108
 * 
 *     cpdef is_of(SIUnit self, d.Dimensions dims):
 *         if dims is None:             # <<<<<<<<<<<<<<
 *             raise TypeError()
 *         return c.eq_ddata(self.data.dimensions, dims.data)
 */
  __pyx_t_5 = (((PyObject *)__pyx_v_dims) == Py_None);
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (unlikely(__pyx_t_6)) {

    /* "csiquant/quantities.pyx":109
 *     cpdef is_of(SIUnit self, d.Dimensions dims):
 *         if dims is None:
 *             raise TypeError()             # <<<<<<<<<<<<<<
 *         return c.eq_ddata(self.data.dimensions, dims.data)
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_builtin_TypeError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 109, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 109, __pyx_L1_error)

    /* "csiquant/quantities.pyx":108
 * 
 *     cpdef is_of(SIUnit self, d.Dimensions dims):
 *         if dims is None:             # <<<<<<<<<<<<<<
 *             raise TypeError()
 *         return c.eq_ddata(self.data.dimensions, dims.data)
 */
  }

  /* "csiquant/quantities.pyx":110
 *         if dims is None:
 *             raise TypeError()
 *         return c.eq_ddata(self.data.dimensions, dims.data)             # <<<<<<<<<<<<<<
 * 
 *     def __eq__(lhs, rhs):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_8csiquant_6ctypes_eq_ddata(__pyx_v_self->data.dimensions, __pyx_v_dims->data)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":107
 *     """
 * 
 *     cpdef is_of(SIUnit self, d.Dimensions dims):             # <<<<<<<<<<<<<<
 *         if dims is None:
 *             raise TypeError()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("csiquant.quantities.SIUnit.is_of", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_19is_of(PyObject *__pyx_v_self, PyObject *__pyx_v_dims); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_19is_of(PyObject *__pyx_v_self, PyObject *__pyx_v_dims) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_of (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dims), __pyx_ptype_8csiquant_10dimensions_Dimensions, 1, "dims", 0))) __PYX_ERR(1, 107, __pyx_L1_error)
  __pyx_r = __pyx_pf_8csiquant_10quantities_6SIUnit_18is_of(((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_v_self), ((struct __pyx_obj_8csiquant_10dimensions_Dimensions *)__pyx_v_dims));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_18is_of(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self, struct __pyx_obj_8csiquant_10dimensions_Dimensions *__pyx_v_dims) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("is_of", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8csiquant_10quantities_6SIUnit_is_of(__pyx_v_self, __pyx_v_dims, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("csiquant.quantities.SIUnit.is_of", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":112
 *         return c.eq_ddata(self.data.dimensions, dims.data)
 * 
 *     def __eq__(lhs, rhs):             # <<<<<<<<<<<<<<
 *         if not type(lhs) is SIUnit:
 *             return NotImplemented
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_21__eq__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_21__eq__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__eq__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8csiquant_10quantities_6SIUnit_20__eq__(((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_v_lhs), ((PyObject *)__pyx_v_rhs));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_20__eq__(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  struct __pyx_opt_args_8csiquant_10quantities_6SIUnit_approx __pyx_t_5;
  __Pyx_RefNannySetupContext("__eq__", 0);

  /* "csiquant/quantities.pyx":113
 * 
 *     def __eq__(lhs, rhs):
 *         if not type(lhs) is SIUnit:             # <<<<<<<<<<<<<<
 *             return NotImplemented
 *         if not type(rhs) is SIUnit:
 */
  __pyx_t_1 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_lhs))) != ((PyObject *)__pyx_ptype_8csiquant_10quantities_SIUnit));
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "csiquant/quantities.pyx":114
 *     def __eq__(lhs, rhs):
 *         if not type(lhs) is SIUnit:
 *             return NotImplemented             # <<<<<<<<<<<<<<
 *         if not type(rhs) is SIUnit:
 *             return NotImplemented
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;

    /* "csiquant/quantities.pyx":113
 * 
 *     def __eq__(lhs, rhs):
 *         if not type(lhs) is SIUnit:             # <<<<<<<<<<<<<<
 *             return NotImplemented
 *         if not type(rhs) is SIUnit:
 */
  }

  /* "csiquant/quantities.pyx":115
 *         if not type(lhs) is SIUnit:
 *             return NotImplemented
 *         if not type(rhs) is SIUnit:             # <<<<<<<<<<<<<<
 *             return NotImplemented
 *         return lhs.approx(rhs, rtol=SIUnit.SCALE_RTOL)
 */
  __pyx_t_2 = (((PyObject *)Py_TYPE(__pyx_v_rhs)) != ((PyObject *)__pyx_ptype_8csiquant_10quantities_SIUnit));
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "csiquant/quantities.pyx":116
 *             return NotImplemented
 *         if not type(rhs) is SIUnit:
 *             return NotImplemented             # <<<<<<<<<<<<<<
 *         return lhs.approx(rhs, rtol=SIUnit.SCALE_RTOL)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;

    /* "csiquant/quantities.pyx":115
 *         if not type(lhs) is SIUnit:
 *             return NotImplemented
 *         if not type(rhs) is SIUnit:             # <<<<<<<<<<<<<<
 *             return NotImplemented
 *         return lhs.approx(rhs, rtol=SIUnit.SCALE_RTOL)
 */
  }

  /* "csiquant/quantities.pyx":117
 *         if not type(rhs) is SIUnit:
 *             return NotImplemented
 *         return lhs.approx(rhs, rtol=SIUnit.SCALE_RTOL)             # <<<<<<<<<<<<<<
 * 
 *     def __ne__(lhs, rhs):
 */
  __Pyx_XDECREF(__pyx_r);
  if (!(likely(((__pyx_v_rhs) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_rhs, __pyx_ptype_8csiquant_10quantities_SIUnit))))) __PYX_ERR(1, 117, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8csiquant_10quantities_SIUnit), __pyx_n_s_SCALE_RTOL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 117, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5.__pyx_n = 1;
  __pyx_t_5.rtol = __pyx_t_4;
  __pyx_t_3 = ((struct __pyx_vtabstruct_8csiquant_10quantities_SIUnit *)__pyx_v_lhs->__pyx_vtab)->approx(__pyx_v_lhs, ((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_v_rhs), 0, &__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":112
 *         return c.eq_ddata(self.data.dimensions, dims.data)
 * 
 *     def __eq__(lhs, rhs):             # <<<<<<<<<<<<<<
 *         if not type(lhs) is SIUnit:
 *             return NotImplemented
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("csiquant.quantities.SIUnit.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":119
 *         return lhs.approx(rhs, rtol=SIUnit.SCALE_RTOL)
 * 
 *     def __ne__(lhs, rhs):             # <<<<<<<<<<<<<<
 *         return not lhs == rhs
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_23__ne__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_23__ne__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__ne__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8csiquant_10quantities_6SIUnit_22__ne__(((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_v_lhs), ((PyObject *)__pyx_v_rhs));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_22__ne__(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__ne__", 0);

  /* "csiquant/quantities.pyx":120
 * 
 *     def __ne__(lhs, rhs):
 *         return not lhs == rhs             # <<<<<<<<<<<<<<
 * 
 *     def __lt__(SIUnit lhs not None, SIUnit rhs not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_lhs), __pyx_v_rhs, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 120, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 120, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong((!__pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":119
 *         return lhs.approx(rhs, rtol=SIUnit.SCALE_RTOL)
 * 
 *     def __ne__(lhs, rhs):             # <<<<<<<<<<<<<<
 *         return not lhs == rhs
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("csiquant.quantities.SIUnit.__ne__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":122
 *         return not lhs == rhs
 * 
 *     def __lt__(SIUnit lhs not None, SIUnit rhs not None):             # <<<<<<<<<<<<<<
 *         return lhs.cmp(rhs) < 0
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_25__lt__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_25__lt__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__lt__ (wrapper)", 0);
  if (unlikely(((PyObject *)__pyx_v_lhs) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "lhs"); __PYX_ERR(1, 122, __pyx_L1_error)
  }
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rhs), __pyx_ptype_8csiquant_10quantities_SIUnit, 0, "rhs", 0))) __PYX_ERR(1, 122, __pyx_L1_error)
  __pyx_r = __pyx_pf_8csiquant_10quantities_6SIUnit_24__lt__(((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_v_lhs), ((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_v_rhs));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_24__lt__(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_lhs, struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_rhs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__lt__", 0);

  /* "csiquant/quantities.pyx":123
 * 
 *     def __lt__(SIUnit lhs not None, SIUnit rhs not None):
 *         return lhs.cmp(rhs) < 0             # <<<<<<<<<<<<<<
 * 
 *     def __le__(SIUnit lhs not None, SIUnit rhs not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_8csiquant_10quantities_SIUnit *)__pyx_v_lhs->__pyx_vtab)->cmp(__pyx_v_lhs, __pyx_v_rhs, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 123, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":122
 *         return not lhs == rhs
 * 
 *     def __lt__(SIUnit lhs not None, SIUnit rhs not None):             # <<<<<<<<<<<<<<
 *         return lhs.cmp(rhs) < 0
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("csiquant.quantities.SIUnit.__lt__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":125
 *         return lhs.cmp(rhs) < 0
 * 
 *     def __le__(SIUnit lhs not None, SIUnit rhs not None):             # <<<<<<<<<<<<<<
 *         return lhs.cmp(rhs) <= 0
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_27__le__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_27__le__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__le__ (wrapper)", 0);
  if (unlikely(((PyObject *)__pyx_v_lhs) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "lhs"); __PYX_ERR(1, 125, __pyx_L1_error)
  }
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rhs), __pyx_ptype_8csiquant_10quantities_SIUnit, 0, "rhs", 0))) __PYX_ERR(1, 125, __pyx_L1_error)
  __pyx_r = __pyx_pf_8csiquant_10quantities_6SIUnit_26__le__(((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_v_lhs), ((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_v_rhs));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_26__le__(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_lhs, struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_rhs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__le__", 0);

  /* "csiquant/quantities.pyx":126
 * 
 *     def __le__(SIUnit lhs not None, SIUnit rhs not None):
 *         return lhs.cmp(rhs) <= 0             # <<<<<<<<<<<<<<
 * 
 *     def __gt__(SIUnit lhs not None, SIUnit rhs not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_8csiquant_10quantities_SIUnit *)__pyx_v_lhs->__pyx_vtab)->cmp(__pyx_v_lhs, __pyx_v_rhs, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_0, Py_LE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 126, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":125
 *         return lhs.cmp(rhs) < 0
 * 
 *     def __le__(SIUnit lhs not None, SIUnit rhs not None):             # <<<<<<<<<<<<<<
 *         return lhs.cmp(rhs) <= 0
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("csiquant.quantities.SIUnit.__le__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":128
 *         return lhs.cmp(rhs) <= 0
 * 
 *     def __gt__(SIUnit lhs not None, SIUnit rhs not None):             # <<<<<<<<<<<<<<
 *         return lhs.cmp(rhs) > 0
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_29__gt__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_29__gt__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__gt__ (wrapper)", 0);
  if (unlikely(((PyObject *)__pyx_v_lhs) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "lhs"); __PYX_ERR(1, 128, __pyx_L1_error)
  }
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rhs), __pyx_ptype_8csiquant_10quantities_SIUnit, 0, "rhs", 0))) __PYX_ERR(1, 128, __pyx_L1_error)
  __pyx_r = __pyx_pf_8csiquant_10quantities_6SIUnit_28__gt__(((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_v_lhs), ((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_v_rhs));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_28__gt__(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_lhs, struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_rhs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__gt__", 0);

  /* "csiquant/quantities.pyx":129
 * 
 *     def __gt__(SIUnit lhs not None, SIUnit rhs not None):
 *         return lhs.cmp(rhs) > 0             # <<<<<<<<<<<<<<
 * 
 *     def __ge__(SIUnit lhs not None, SIUnit rhs not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_8csiquant_10quantities_SIUnit *)__pyx_v_lhs->__pyx_vtab)->cmp(__pyx_v_lhs, __pyx_v_rhs, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":128
 *         return lhs.cmp(rhs) <= 0
 * 
 *     def __gt__(SIUnit lhs not None, SIUnit rhs not None):             # <<<<<<<<<<<<<<
 *         return lhs.cmp(rhs) > 0
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("csiquant.quantities.SIUnit.__gt__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":131
 *         return lhs.cmp(rhs) > 0
 * 
 *     def __ge__(SIUnit lhs not None, SIUnit rhs not None):             # <<<<<<<<<<<<<<
 *         return lhs.cmp(rhs) >= 0
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_31__ge__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_31__ge__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__ge__ (wrapper)", 0);
  if (unlikely(((PyObject *)__pyx_v_lhs) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "lhs"); __PYX_ERR(1, 131, __pyx_L1_error)
  }
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rhs), __pyx_ptype_8csiquant_10quantities_SIUnit, 0, "rhs", 0))) __PYX_ERR(1, 131, __pyx_L1_error)
  __pyx_r = __pyx_pf_8csiquant_10quantities_6SIUnit_30__ge__(((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_v_lhs), ((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_v_rhs));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_30__ge__(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_lhs, struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_rhs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__ge__", 0);

  /* "csiquant/quantities.pyx":132
 * 
 *     def __ge__(SIUnit lhs not None, SIUnit rhs not None):
 *         return lhs.cmp(rhs) >= 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_8csiquant_10quantities_SIUnit *)__pyx_v_lhs->__pyx_vtab)->cmp(__pyx_v_lhs, __pyx_v_rhs, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_0, Py_GE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 132, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":131
 *         return lhs.cmp(rhs) > 0
 * 
 *     def __ge__(SIUnit lhs not None, SIUnit rhs not None):             # <<<<<<<<<<<<<<
 *         return lhs.cmp(rhs) >= 0
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("csiquant.quantities.SIUnit.__ge__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":135
 * 
 * 
 *     cpdef cmp(SIUnit self, SIUnit other):             # <<<<<<<<<<<<<<
 *         cdef int signum, error_code
 *         error_code = c.cmp_udata(signum, self.data, other.data)
 */

static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_33cmp(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_f_8csiquant_10quantities_6SIUnit_cmp(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self, struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_other, int __pyx_skip_dispatch) {
  int __pyx_v_signum;
  int __pyx_v_error_code;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("cmp", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
    static PY_UINT64_T tp_dict_version = 0, obj_dict_version = 0;
    if (likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict && tp_dict_version == __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) && (!Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset || obj_dict_version == __PYX_GET_DICT_VERSION(_PyObject_GetDictPtr(((PyObject *)__pyx_v_self))))));
    else {
      PY_UINT64_T type_dict_guard = (likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict)) ? __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) : 0;
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_cmp); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 135, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_8csiquant_10quantities_6SIUnit_33cmp)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, ((PyObject *)__pyx_v_other)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_other));
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 135, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
      tp_dict_version = likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) ? __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) : 0;
      obj_dict_version = likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset) ? __PYX_GET_DICT_VERSION(_PyObject_GetDictPtr(((PyObject *)__pyx_v_self))) : 0;
      if (unlikely(type_dict_guard != tp_dict_version)) {
        tp_dict_version = obj_dict_version = 0;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
    }
    #endif
  }

  /* "csiquant/quantities.pyx":137
 *     cpdef cmp(SIUnit self, SIUnit other):
 *         cdef int signum, error_code
 *         error_code = c.cmp_udata(signum, self.data, other.data)             # <<<<<<<<<<<<<<
 *         if error_code == c.Success:
 *             return signum
 */
  __pyx_v_error_code = __pyx_f_8csiquant_6ctypes_cmp_udata(__pyx_v_signum, __pyx_v_self->data, __pyx_v_other->data);

  /* "csiquant/quantities.pyx":138
 *         cdef int signum, error_code
 *         error_code = c.cmp_udata(signum, self.data, other.data)
 *         if error_code == c.Success:             # <<<<<<<<<<<<<<
 *             return signum
 * 
 */
  __pyx_t_5 = ((__pyx_v_error_code == __pyx_e_8csiquant_6ctypes_Success) != 0);
  if (__pyx_t_5) {

    /* "csiquant/quantities.pyx":139
 *         error_code = c.cmp_udata(signum, self.data, other.data)
 *         if error_code == c.Success:
 *             return signum             # <<<<<<<<<<<<<<
 * 
 *         if error_code == c.DimensionMismatch:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_signum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "csiquant/quantities.pyx":138
 *         cdef int signum, error_code
 *         error_code = c.cmp_udata(signum, self.data, other.data)
 *         if error_code == c.Success:             # <<<<<<<<<<<<<<
 *             return signum
 * 
 */
  }

  /* "csiquant/quantities.pyx":141
 *             return signum
 * 
 *         if error_code == c.DimensionMismatch:             # <<<<<<<<<<<<<<
 *             raise ValueError("units mismatch")
 * 
 */
  __pyx_t_5 = ((__pyx_v_error_code == __pyx_e_8csiquant_6ctypes_DimensionMismatch) != 0);
  if (unlikely(__pyx_t_5)) {

    /* "csiquant/quantities.pyx":142
 * 
 *         if error_code == c.DimensionMismatch:
 *             raise ValueError("units mismatch")             # <<<<<<<<<<<<<<
 * 
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 142, __pyx_L1_error)

    /* "csiquant/quantities.pyx":141
 *             return signum
 * 
 *         if error_code == c.DimensionMismatch:             # <<<<<<<<<<<<<<
 *             raise ValueError("units mismatch")
 * 
 */
  }

  /* "csiquant/quantities.pyx":144
 *             raise ValueError("units mismatch")
 * 
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)             # <<<<<<<<<<<<<<
 * 
 *     cpdef approx(SIUnit self, SIUnit other, double rtol=1e-9, double atol=0.0):
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_error_code); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyUnicode_Format(__pyx_kp_u_Unknown_Error_Occurred_i, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_RuntimeError, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 144, __pyx_L1_error)

  /* "csiquant/quantities.pyx":135
 * 
 * 
 *     cpdef cmp(SIUnit self, SIUnit other):             # <<<<<<<<<<<<<<
 *         cdef int signum, error_code
 *         error_code = c.cmp_udata(signum, self.data, other.data)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("csiquant.quantities.SIUnit.cmp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_33cmp(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_33cmp(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cmp (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8csiquant_10quantities_SIUnit, 1, "other", 0))) __PYX_ERR(1, 135, __pyx_L1_error)
  __pyx_r = __pyx_pf_8csiquant_10quantities_6SIUnit_32cmp(((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_v_self), ((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_32cmp(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self, struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("cmp", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8csiquant_10quantities_6SIUnit_cmp(__pyx_v_self, __pyx_v_other, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("csiquant.quantities.SIUnit.cmp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":146
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)
 * 
 *     cpdef approx(SIUnit self, SIUnit other, double rtol=1e-9, double atol=0.0):             # <<<<<<<<<<<<<<
 *         if not self.compatible(other):
 *             raise ValueError("unit mismatch")
 */

static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_35approx(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_8csiquant_10quantities_6SIUnit_approx(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self, struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_other, int __pyx_skip_dispatch, struct __pyx_opt_args_8csiquant_10quantities_6SIUnit_approx *__pyx_optional_args) {
  double __pyx_v_rtol = ((double)1e-9);
  double __pyx_v_atol = ((double)0.0);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("approx", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_rtol = __pyx_optional_args->rtol;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_atol = __pyx_optional_args->atol;
      }
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
    static PY_UINT64_T tp_dict_version = 0, obj_dict_version = 0;
    if (likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict && tp_dict_version == __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) && (!Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset || obj_dict_version == __PYX_GET_DICT_VERSION(_PyObject_GetDictPtr(((PyObject *)__pyx_v_self))))));
    else {
      PY_UINT64_T type_dict_guard = (likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict)) ? __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) : 0;
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_approx); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 146, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_8csiquant_10quantities_6SIUnit_35approx)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = PyFloat_FromDouble(__pyx_v_rtol); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 146, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyFloat_FromDouble(__pyx_v_atol); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 146, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_5 = __pyx_t_1; __pyx_t_6 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_6)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
            __pyx_t_7 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[4] = {__pyx_t_6, ((PyObject *)__pyx_v_other), __pyx_t_3, __pyx_t_4};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 146, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[4] = {__pyx_t_6, ((PyObject *)__pyx_v_other), __pyx_t_3, __pyx_t_4};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 146, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        {
          __pyx_t_8 = PyTuple_New(3+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 146, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          if (__pyx_t_6) {
            __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
          }
          __Pyx_INCREF(((PyObject *)__pyx_v_other));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_other));
          PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, ((PyObject *)__pyx_v_other));
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_7, __pyx_t_4);
          __pyx_t_3 = 0;
          __pyx_t_4 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 146, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
      tp_dict_version = likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) ? __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) : 0;
      obj_dict_version = likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset) ? __PYX_GET_DICT_VERSION(_PyObject_GetDictPtr(((PyObject *)__pyx_v_self))) : 0;
      if (unlikely(type_dict_guard != tp_dict_version)) {
        tp_dict_version = obj_dict_version = 0;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
    }
    #endif
  }

  /* "csiquant/quantities.pyx":147
 * 
 *     cpdef approx(SIUnit self, SIUnit other, double rtol=1e-9, double atol=0.0):
 *         if not self.compatible(other):             # <<<<<<<<<<<<<<
 *             raise ValueError("unit mismatch")
 *         return c.fapprox(self.data.scale, other.data.scale, rtol, atol)
 */
  __pyx_t_9 = ((!(((struct __pyx_vtabstruct_8csiquant_10quantities_SIUnit *)__pyx_v_self->__pyx_vtab)->compatible(__pyx_v_self, __pyx_v_other, 0) != 0)) != 0);
  if (unlikely(__pyx_t_9)) {

    /* "csiquant/quantities.pyx":148
 *     cpdef approx(SIUnit self, SIUnit other, double rtol=1e-9, double atol=0.0):
 *         if not self.compatible(other):
 *             raise ValueError("unit mismatch")             # <<<<<<<<<<<<<<
 *         return c.fapprox(self.data.scale, other.data.scale, rtol, atol)
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 148, __pyx_L1_error)

    /* "csiquant/quantities.pyx":147
 * 
 *     cpdef approx(SIUnit self, SIUnit other, double rtol=1e-9, double atol=0.0):
 *         if not self.compatible(other):             # <<<<<<<<<<<<<<
 *             raise ValueError("unit mismatch")
 *         return c.fapprox(self.data.scale, other.data.scale, rtol, atol)
 */
  }

  /* "csiquant/quantities.pyx":149
 *         if not self.compatible(other):
 *             raise ValueError("unit mismatch")
 *         return c.fapprox(self.data.scale, other.data.scale, rtol, atol)             # <<<<<<<<<<<<<<
 * 
 *     cpdef bint compatible(SIUnit self, SIUnit other):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_8csiquant_6ctypes_fapprox(__pyx_v_self->data.scale, __pyx_v_other->data.scale, __pyx_v_rtol, __pyx_v_atol)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":146
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)
 * 
 *     cpdef approx(SIUnit self, SIUnit other, double rtol=1e-9, double atol=0.0):             # <<<<<<<<<<<<<<
 *         if not self.compatible(other):
 *             raise ValueError("unit mismatch")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("csiquant.quantities.SIUnit.approx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_35approx(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_35approx(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_other = 0;
  double __pyx_v_rtol;
  double __pyx_v_atol;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("approx (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_other,&__pyx_n_s_rtol,&__pyx_n_s_atol,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_other)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rtol);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_atol);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "approx") < 0)) __PYX_ERR(1, 146, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_other = ((struct __pyx_obj_8csiquant_10quantities_SIUnit *)values[0]);
    if (values[1]) {
      __pyx_v_rtol = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_rtol == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 146, __pyx_L3_error)
    } else {
      __pyx_v_rtol = ((double)1e-9);
    }
    if (values[2]) {
      __pyx_v_atol = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_atol == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 146, __pyx_L3_error)
    } else {
      __pyx_v_atol = ((double)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("approx", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 146, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("csiquant.quantities.SIUnit.approx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8csiquant_10quantities_SIUnit, 1, "other", 0))) __PYX_ERR(1, 146, __pyx_L1_error)
  __pyx_r = __pyx_pf_8csiquant_10quantities_6SIUnit_34approx(((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_v_self), __pyx_v_other, __pyx_v_rtol, __pyx_v_atol);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_34approx(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self, struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_other, double __pyx_v_rtol, double __pyx_v_atol) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_8csiquant_10quantities_6SIUnit_approx __pyx_t_2;
  __Pyx_RefNannySetupContext("approx", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 2;
  __pyx_t_2.rtol = __pyx_v_rtol;
  __pyx_t_2.atol = __pyx_v_atol;
  __pyx_t_1 = __pyx_vtabptr_8csiquant_10quantities_SIUnit->approx(__pyx_v_self, __pyx_v_other, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("csiquant.quantities.SIUnit.approx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":151
 *         return c.fapprox(self.data.scale, other.data.scale, rtol, atol)
 * 
 *     cpdef bint compatible(SIUnit self, SIUnit other):             # <<<<<<<<<<<<<<
 *         return c.eq_ddata(self.data.dimensions, other.data.dimensions)
 * 
 */

static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_37compatible(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static int __pyx_f_8csiquant_10quantities_6SIUnit_compatible(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self, struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_other, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("compatible", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
    static PY_UINT64_T tp_dict_version = 0, obj_dict_version = 0;
    if (likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict && tp_dict_version == __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) && (!Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset || obj_dict_version == __PYX_GET_DICT_VERSION(_PyObject_GetDictPtr(((PyObject *)__pyx_v_self))))));
    else {
      PY_UINT64_T type_dict_guard = (likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict)) ? __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) : 0;
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_compatible); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 151, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_8csiquant_10quantities_6SIUnit_37compatible)) {
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, ((PyObject *)__pyx_v_other)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_other));
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 151, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 151, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_5;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
      tp_dict_version = likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) ? __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) : 0;
      obj_dict_version = likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset) ? __PYX_GET_DICT_VERSION(_PyObject_GetDictPtr(((PyObject *)__pyx_v_self))) : 0;
      if (unlikely(type_dict_guard != tp_dict_version)) {
        tp_dict_version = obj_dict_version = 0;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
    }
    #endif
  }

  /* "csiquant/quantities.pyx":152
 * 
 *     cpdef bint compatible(SIUnit self, SIUnit other):
 *         return c.eq_ddata(self.data.dimensions, other.data.dimensions)             # <<<<<<<<<<<<<<
 * 
 *     """
 */
  __pyx_r = __pyx_f_8csiquant_6ctypes_eq_ddata(__pyx_v_self->data.dimensions, __pyx_v_other->data.dimensions);
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":151
 *         return c.fapprox(self.data.scale, other.data.scale, rtol, atol)
 * 
 *     cpdef bint compatible(SIUnit self, SIUnit other):             # <<<<<<<<<<<<<<
 *         return c.eq_ddata(self.data.dimensions, other.data.dimensions)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("csiquant.quantities.SIUnit.compatible", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_37compatible(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_37compatible(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compatible (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8csiquant_10quantities_SIUnit, 1, "other", 0))) __PYX_ERR(1, 151, __pyx_L1_error)
  __pyx_r = __pyx_pf_8csiquant_10quantities_6SIUnit_36compatible(((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_v_self), ((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_36compatible(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self, struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("compatible", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_8csiquant_10quantities_6SIUnit_compatible(__pyx_v_self, __pyx_v_other, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("csiquant.quantities.SIUnit.compatible", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":158
 *     """
 * 
 *     def __mul__(lhs, rhs):             # <<<<<<<<<<<<<<
 *         cdef c.QData lhs_data, rhs_data
 *         cdef int operand_code
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_39__mul__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_39__mul__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__mul__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8csiquant_10quantities_6SIUnit_38__mul__(((PyObject *)__pyx_v_lhs), ((PyObject *)__pyx_v_rhs));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_38__mul__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  struct __pyx_t_8csiquant_6ctypes_QData __pyx_v_lhs_data;
  struct __pyx_t_8csiquant_6ctypes_QData __pyx_v_rhs_data;
  int __pyx_v_operand_code;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__mul__", 0);

  /* "csiquant/quantities.pyx":161
 *         cdef c.QData lhs_data, rhs_data
 *         cdef int operand_code
 *         operand_code = parse_uoperand(lhs_data, lhs) | parse_uoperand(rhs_data, rhs)             # <<<<<<<<<<<<<<
 *         if operand_code & c.OBJECT:
 *             return NotImplemented
 */
  __pyx_v_operand_code = (__pyx_f_8csiquant_10quantities_parse_uoperand(__pyx_v_lhs_data, __pyx_v_lhs) | __pyx_f_8csiquant_10quantities_parse_uoperand(__pyx_v_rhs_data, __pyx_v_rhs));

  /* "csiquant/quantities.pyx":162
 *         cdef int operand_code
 *         operand_code = parse_uoperand(lhs_data, lhs) | parse_uoperand(rhs_data, rhs)
 *         if operand_code & c.OBJECT:             # <<<<<<<<<<<<<<
 *             return NotImplemented
 *         if operand_code & c.QUANTITY:
 */
  __pyx_t_1 = ((__pyx_v_operand_code & __pyx_e_8csiquant_6ctypes_OBJECT) != 0);
  if (__pyx_t_1) {

    /* "csiquant/quantities.pyx":163
 *         operand_code = parse_uoperand(lhs_data, lhs) | parse_uoperand(rhs_data, rhs)
 *         if operand_code & c.OBJECT:
 *             return NotImplemented             # <<<<<<<<<<<<<<
 *         if operand_code & c.QUANTITY:
 *             return mul_quantities(lhs_data, rhs_data)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;

    /* "csiquant/quantities.pyx":162
 *         cdef int operand_code
 *         operand_code = parse_uoperand(lhs_data, lhs) | parse_uoperand(rhs_data, rhs)
 *         if operand_code & c.OBJECT:             # <<<<<<<<<<<<<<
 *             return NotImplemented
 *         if operand_code & c.QUANTITY:
 */
  }

  /* "csiquant/quantities.pyx":164
 *         if operand_code & c.OBJECT:
 *             return NotImplemented
 *         if operand_code & c.QUANTITY:             # <<<<<<<<<<<<<<
 *             return mul_quantities(lhs_data, rhs_data)
 *         return mul_units(lhs_data.units, rhs_data.units)
 */
  __pyx_t_1 = ((__pyx_v_operand_code & __pyx_e_8csiquant_6ctypes_QUANTITY) != 0);
  if (__pyx_t_1) {

    /* "csiquant/quantities.pyx":165
 *             return NotImplemented
 *         if operand_code & c.QUANTITY:
 *             return mul_quantities(lhs_data, rhs_data)             # <<<<<<<<<<<<<<
 *         return mul_units(lhs_data.units, rhs_data.units)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = ((PyObject *)__pyx_f_8csiquant_10quantities_mul_quantities(__pyx_v_lhs_data, __pyx_v_rhs_data)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "csiquant/quantities.pyx":164
 *         if operand_code & c.OBJECT:
 *             return NotImplemented
 *         if operand_code & c.QUANTITY:             # <<<<<<<<<<<<<<
 *             return mul_quantities(lhs_data, rhs_data)
 *         return mul_units(lhs_data.units, rhs_data.units)
 */
  }

  /* "csiquant/quantities.pyx":166
 *         if operand_code & c.QUANTITY:
 *             return mul_quantities(lhs_data, rhs_data)
 *         return mul_units(lhs_data.units, rhs_data.units)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = ((PyObject *)__pyx_f_8csiquant_10quantities_mul_units(__pyx_v_lhs_data.units, __pyx_v_rhs_data.units)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":158
 *     """
 * 
 *     def __mul__(lhs, rhs):             # <<<<<<<<<<<<<<
 *         cdef c.QData lhs_data, rhs_data
 *         cdef int operand_code
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("csiquant.quantities.SIUnit.__mul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":169
 * 
 * 
 *     def __truediv__(lhs, rhs):             # <<<<<<<<<<<<<<
 *         cdef c.QData lhs_data, rhs_data
 *         cdef int operand_code
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_41__truediv__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_41__truediv__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__truediv__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8csiquant_10quantities_6SIUnit_40__truediv__(((PyObject *)__pyx_v_lhs), ((PyObject *)__pyx_v_rhs));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_40__truediv__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  struct __pyx_t_8csiquant_6ctypes_QData __pyx_v_lhs_data;
  struct __pyx_t_8csiquant_6ctypes_QData __pyx_v_rhs_data;
  int __pyx_v_operand_code;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__truediv__", 0);

  /* "csiquant/quantities.pyx":172
 *         cdef c.QData lhs_data, rhs_data
 *         cdef int operand_code
 *         operand_code = parse_uoperand(lhs_data, lhs) | parse_uoperand(rhs_data, rhs)             # <<<<<<<<<<<<<<
 *         if operand_code & c.OBJECT:
 *             return NotImplemented
 */
  __pyx_v_operand_code = (__pyx_f_8csiquant_10quantities_parse_uoperand(__pyx_v_lhs_data, __pyx_v_lhs) | __pyx_f_8csiquant_10quantities_parse_uoperand(__pyx_v_rhs_data, __pyx_v_rhs));

  /* "csiquant/quantities.pyx":173
 *         cdef int operand_code
 *         operand_code = parse_uoperand(lhs_data, lhs) | parse_uoperand(rhs_data, rhs)
 *         if operand_code & c.OBJECT:             # <<<<<<<<<<<<<<
 *             return NotImplemented
 *         if operand_code & c.QUANTITY:
 */
  __pyx_t_1 = ((__pyx_v_operand_code & __pyx_e_8csiquant_6ctypes_OBJECT) != 0);
  if (__pyx_t_1) {

    /* "csiquant/quantities.pyx":174
 *         operand_code = parse_uoperand(lhs_data, lhs) | parse_uoperand(rhs_data, rhs)
 *         if operand_code & c.OBJECT:
 *             return NotImplemented             # <<<<<<<<<<<<<<
 *         if operand_code & c.QUANTITY:
 *             return div_quantities(lhs_data, rhs_data)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;

    /* "csiquant/quantities.pyx":173
 *         cdef int operand_code
 *         operand_code = parse_uoperand(lhs_data, lhs) | parse_uoperand(rhs_data, rhs)
 *         if operand_code & c.OBJECT:             # <<<<<<<<<<<<<<
 *             return NotImplemented
 *         if operand_code & c.QUANTITY:
 */
  }

  /* "csiquant/quantities.pyx":175
 *         if operand_code & c.OBJECT:
 *             return NotImplemented
 *         if operand_code & c.QUANTITY:             # <<<<<<<<<<<<<<
 *             return div_quantities(lhs_data, rhs_data)
 *         return div_units(lhs_data.units, rhs_data.units)
 */
  __pyx_t_1 = ((__pyx_v_operand_code & __pyx_e_8csiquant_6ctypes_QUANTITY) != 0);
  if (__pyx_t_1) {

    /* "csiquant/quantities.pyx":176
 *             return NotImplemented
 *         if operand_code & c.QUANTITY:
 *             return div_quantities(lhs_data, rhs_data)             # <<<<<<<<<<<<<<
 *         return div_units(lhs_data.units, rhs_data.units)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = ((PyObject *)__pyx_f_8csiquant_10quantities_div_quantities(__pyx_v_lhs_data, __pyx_v_rhs_data)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "csiquant/quantities.pyx":175
 *         if operand_code & c.OBJECT:
 *             return NotImplemented
 *         if operand_code & c.QUANTITY:             # <<<<<<<<<<<<<<
 *             return div_quantities(lhs_data, rhs_data)
 *         return div_units(lhs_data.units, rhs_data.units)
 */
  }

  /* "csiquant/quantities.pyx":177
 *         if operand_code & c.QUANTITY:
 *             return div_quantities(lhs_data, rhs_data)
 *         return div_units(lhs_data.units, rhs_data.units)             # <<<<<<<<<<<<<<
 * 
 *     def __invert__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = ((PyObject *)__pyx_f_8csiquant_10quantities_div_units(__pyx_v_lhs_data.units, __pyx_v_rhs_data.units)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":169
 * 
 * 
 *     def __truediv__(lhs, rhs):             # <<<<<<<<<<<<<<
 *         cdef c.QData lhs_data, rhs_data
 *         cdef int operand_code
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("csiquant.quantities.SIUnit.__truediv__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":179
 *         return div_units(lhs_data.units, rhs_data.units)
 * 
 *     def __invert__(self):             # <<<<<<<<<<<<<<
 *         cdef c.Error error_code
 *         cdef SIUnit ret = SIUnit.__new__(SIUnit)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_43__invert__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_43__invert__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__invert__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8csiquant_10quantities_6SIUnit_42__invert__(((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_42__invert__(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self) {
  enum __pyx_t_8csiquant_6ctypes_Error __pyx_v_error_code;
  struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_ret = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2[7];
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__invert__", 0);

  /* "csiquant/quantities.pyx":181
 *     def __invert__(self):
 *         cdef c.Error error_code
 *         cdef SIUnit ret = SIUnit.__new__(SIUnit)             # <<<<<<<<<<<<<<
 *         ret.data.scale = 1.0
 *         ret.data.dimensions.exponents[:] = [0,0,0,0,0,0,0]
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_8csiquant_10quantities_SIUnit(((PyTypeObject *)__pyx_ptype_8csiquant_10quantities_SIUnit), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 181, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_ret = ((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "csiquant/quantities.pyx":182
 *         cdef c.Error error_code
 *         cdef SIUnit ret = SIUnit.__new__(SIUnit)
 *         ret.data.scale = 1.0             # <<<<<<<<<<<<<<
 *         ret.data.dimensions.exponents[:] = [0,0,0,0,0,0,0]
 *         error_code = c.div_udata(ret.data, ret.data, self.data)
 */
  __pyx_v_ret->data.scale = 1.0;

  /* "csiquant/quantities.pyx":183
 *         cdef SIUnit ret = SIUnit.__new__(SIUnit)
 *         ret.data.scale = 1.0
 *         ret.data.dimensions.exponents[:] = [0,0,0,0,0,0,0]             # <<<<<<<<<<<<<<
 *         error_code = c.div_udata(ret.data, ret.data, self.data)
 *         if error_code == c.Success:
 */
  __pyx_t_2[0] = 0.0;
  __pyx_t_2[1] = 0.0;
  __pyx_t_2[2] = 0.0;
  __pyx_t_2[3] = 0.0;
  __pyx_t_2[4] = 0.0;
  __pyx_t_2[5] = 0.0;
  __pyx_t_2[6] = 0.0;
  memcpy(&(__pyx_v_ret->data.dimensions.exponents[0]), __pyx_t_2, sizeof(__pyx_v_ret->data.dimensions.exponents[0]) * (7));

  /* "csiquant/quantities.pyx":184
 *         ret.data.scale = 1.0
 *         ret.data.dimensions.exponents[:] = [0,0,0,0,0,0,0]
 *         error_code = c.div_udata(ret.data, ret.data, self.data)             # <<<<<<<<<<<<<<
 *         if error_code == c.Success:
 *             return ret
 */
  __pyx_v_error_code = __pyx_f_8csiquant_6ctypes_div_udata(__pyx_v_ret->data, __pyx_v_ret->data, __pyx_v_self->data);

  /* "csiquant/quantities.pyx":185
 *         ret.data.dimensions.exponents[:] = [0,0,0,0,0,0,0]
 *         error_code = c.div_udata(ret.data, ret.data, self.data)
 *         if error_code == c.Success:             # <<<<<<<<<<<<<<
 *             return ret
 * 
 */
  __pyx_t_3 = ((__pyx_v_error_code == __pyx_e_8csiquant_6ctypes_Success) != 0);
  if (__pyx_t_3) {

    /* "csiquant/quantities.pyx":186
 *         error_code = c.div_udata(ret.data, ret.data, self.data)
 *         if error_code == c.Success:
 *             return ret             # <<<<<<<<<<<<<<
 * 
 *         if error_code == c.ZeroDiv:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_ret));
    __pyx_r = ((PyObject *)__pyx_v_ret);
    goto __pyx_L0;

    /* "csiquant/quantities.pyx":185
 *         ret.data.dimensions.exponents[:] = [0,0,0,0,0,0,0]
 *         error_code = c.div_udata(ret.data, ret.data, self.data)
 *         if error_code == c.Success:             # <<<<<<<<<<<<<<
 *             return ret
 * 
 */
  }

  /* "csiquant/quantities.pyx":188
 *             return ret
 * 
 *         if error_code == c.ZeroDiv:             # <<<<<<<<<<<<<<
 *             raise ZeroDivisionError()
 * 
 */
  __pyx_t_3 = ((__pyx_v_error_code == __pyx_e_8csiquant_6ctypes_ZeroDiv) != 0);
  if (unlikely(__pyx_t_3)) {

    /* "csiquant/quantities.pyx":189
 * 
 *         if error_code == c.ZeroDiv:
 *             raise ZeroDivisionError()             # <<<<<<<<<<<<<<
 * 
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)
 */
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_builtin_ZeroDivisionError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 189, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 189, __pyx_L1_error)

    /* "csiquant/quantities.pyx":188
 *             return ret
 * 
 *         if error_code == c.ZeroDiv:             # <<<<<<<<<<<<<<
 *             raise ZeroDivisionError()
 * 
 */
  }

  /* "csiquant/quantities.pyx":191
 *             raise ZeroDivisionError()
 * 
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)             # <<<<<<<<<<<<<<
 * 
 *     def __pow__(lhs, rhs, modulo):
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_8csiquant_6ctypes_Error(__pyx_v_error_code); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyUnicode_Format(__pyx_kp_u_Unknown_Error_Occurred_i, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_RuntimeError, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 191, __pyx_L1_error)

  /* "csiquant/quantities.pyx":179
 *         return div_units(lhs_data.units, rhs_data.units)
 * 
 *     def __invert__(self):             # <<<<<<<<<<<<<<
 *         cdef c.Error error_code
 *         cdef SIUnit ret = SIUnit.__new__(SIUnit)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("csiquant.quantities.SIUnit.__invert__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":193
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)
 * 
 *     def __pow__(lhs, rhs, modulo):             # <<<<<<<<<<<<<<
 *         if type(lhs) is not SIUnit:
 *             raise TypeError("Expected SIUnit ** Number")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_45__pow__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs, PyObject *__pyx_v_modulo); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_45__pow__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs, PyObject *__pyx_v_modulo) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pow__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8csiquant_10quantities_6SIUnit_44__pow__(((PyObject *)__pyx_v_lhs), ((PyObject *)__pyx_v_rhs), ((PyObject *)__pyx_v_modulo));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_44__pow__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs, CYTHON_UNUSED PyObject *__pyx_v_modulo) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__pow__", 0);

  /* "csiquant/quantities.pyx":194
 * 
 *     def __pow__(lhs, rhs, modulo):
 *         if type(lhs) is not SIUnit:             # <<<<<<<<<<<<<<
 *             raise TypeError("Expected SIUnit ** Number")
 *         return lhs.exp(rhs)
 */
  __pyx_t_1 = (((PyObject *)Py_TYPE(__pyx_v_lhs)) != ((PyObject *)__pyx_ptype_8csiquant_10quantities_SIUnit));
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (unlikely(__pyx_t_2)) {

    /* "csiquant/quantities.pyx":195
 *     def __pow__(lhs, rhs, modulo):
 *         if type(lhs) is not SIUnit:
 *             raise TypeError("Expected SIUnit ** Number")             # <<<<<<<<<<<<<<
 *         return lhs.exp(rhs)
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 195, __pyx_L1_error)

    /* "csiquant/quantities.pyx":194
 * 
 *     def __pow__(lhs, rhs, modulo):
 *         if type(lhs) is not SIUnit:             # <<<<<<<<<<<<<<
 *             raise TypeError("Expected SIUnit ** Number")
 *         return lhs.exp(rhs)
 */
  }

  /* "csiquant/quantities.pyx":196
 *         if type(lhs) is not SIUnit:
 *             raise TypeError("Expected SIUnit ** Number")
 *         return lhs.exp(rhs)             # <<<<<<<<<<<<<<
 * 
 *     cpdef SIUnit exp(SIUnit self, double power):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_lhs, __pyx_n_s_exp); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_rhs) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_rhs);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":193
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)
 * 
 *     def __pow__(lhs, rhs, modulo):             # <<<<<<<<<<<<<<
 *         if type(lhs) is not SIUnit:
 *             raise TypeError("Expected SIUnit ** Number")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("csiquant.quantities.SIUnit.__pow__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":198
 *         return lhs.exp(rhs)
 * 
 *     cpdef SIUnit exp(SIUnit self, double power):             # <<<<<<<<<<<<<<
 *         cdef c.Error error_code
 *         cdef SIUnit ret = SIUnit.__new__(SIUnit)
 */

static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_47exp(PyObject *__pyx_v_self, PyObject *__pyx_arg_power); /*proto*/
static struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_f_8csiquant_10quantities_6SIUnit_exp(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self, double __pyx_v_power, int __pyx_skip_dispatch) {
  enum __pyx_t_8csiquant_6ctypes_Error __pyx_v_error_code;
  struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_ret = 0;
  struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("exp", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
    static PY_UINT64_T tp_dict_version = 0, obj_dict_version = 0;
    if (likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict && tp_dict_version == __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) && (!Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset || obj_dict_version == __PYX_GET_DICT_VERSION(_PyObject_GetDictPtr(((PyObject *)__pyx_v_self))))));
    else {
      PY_UINT64_T type_dict_guard = (likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict)) ? __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) : 0;
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_exp); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 198, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_8csiquant_10quantities_6SIUnit_47exp)) {
        __Pyx_XDECREF(((PyObject *)__pyx_r));
        __pyx_t_3 = PyFloat_FromDouble(__pyx_v_power); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 198, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 198, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_8csiquant_10quantities_SIUnit))))) __PYX_ERR(1, 198, __pyx_L1_error)
        __pyx_r = ((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
      tp_dict_version = likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) ? __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) : 0;
      obj_dict_version = likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset) ? __PYX_GET_DICT_VERSION(_PyObject_GetDictPtr(((PyObject *)__pyx_v_self))) : 0;
      if (unlikely(type_dict_guard != tp_dict_version)) {
        tp_dict_version = obj_dict_version = 0;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
    }
    #endif
  }

  /* "csiquant/quantities.pyx":200
 *     cpdef SIUnit exp(SIUnit self, double power):
 *         cdef c.Error error_code
 *         cdef SIUnit ret = SIUnit.__new__(SIUnit)             # <<<<<<<<<<<<<<
 *         error_code = c.pow_udata(ret.data, self.data, power)
 *         if error_code == c.Success:
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_8csiquant_10quantities_SIUnit(((PyTypeObject *)__pyx_ptype_8csiquant_10quantities_SIUnit), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 200, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_ret = ((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "csiquant/quantities.pyx":201
 *         cdef c.Error error_code
 *         cdef SIUnit ret = SIUnit.__new__(SIUnit)
 *         error_code = c.pow_udata(ret.data, self.data, power)             # <<<<<<<<<<<<<<
 *         if error_code == c.Success:
 *             return ret
 */
  __pyx_v_error_code = __pyx_f_8csiquant_6ctypes_pow_udata(__pyx_v_ret->data, __pyx_v_self->data, __pyx_v_power);

  /* "csiquant/quantities.pyx":202
 *         cdef SIUnit ret = SIUnit.__new__(SIUnit)
 *         error_code = c.pow_udata(ret.data, self.data, power)
 *         if error_code == c.Success:             # <<<<<<<<<<<<<<
 *             return ret
 * 
 */
  __pyx_t_6 = ((__pyx_v_error_code == __pyx_e_8csiquant_6ctypes_Success) != 0);
  if (__pyx_t_6) {

    /* "csiquant/quantities.pyx":203
 *         error_code = c.pow_udata(ret.data, self.data, power)
 *         if error_code == c.Success:
 *             return ret             # <<<<<<<<<<<<<<
 * 
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    __Pyx_INCREF(((PyObject *)__pyx_v_ret));
    __pyx_r = __pyx_v_ret;
    goto __pyx_L0;

    /* "csiquant/quantities.pyx":202
 *         cdef SIUnit ret = SIUnit.__new__(SIUnit)
 *         error_code = c.pow_udata(ret.data, self.data, power)
 *         if error_code == c.Success:             # <<<<<<<<<<<<<<
 *             return ret
 * 
 */
  }

  /* "csiquant/quantities.pyx":205
 *             return ret
 * 
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)             # <<<<<<<<<<<<<<
 * 
 *     def __copy__(self):
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_8csiquant_6ctypes_Error(__pyx_v_error_code); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyUnicode_Format(__pyx_kp_u_Unknown_Error_Occurred_i, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_RuntimeError, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 205, __pyx_L1_error)

  /* "csiquant/quantities.pyx":198
 *         return lhs.exp(rhs)
 * 
 *     cpdef SIUnit exp(SIUnit self, double power):             # <<<<<<<<<<<<<<
 *         cdef c.Error error_code
 *         cdef SIUnit ret = SIUnit.__new__(SIUnit)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("csiquant.quantities.SIUnit.exp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ret);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_47exp(PyObject *__pyx_v_self, PyObject *__pyx_arg_power); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_47exp(PyObject *__pyx_v_self, PyObject *__pyx_arg_power) {
  double __pyx_v_power;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("exp (wrapper)", 0);
  assert(__pyx_arg_power); {
    __pyx_v_power = __pyx_PyFloat_AsDouble(__pyx_arg_power); if (unlikely((__pyx_v_power == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 198, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("csiquant.quantities.SIUnit.exp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8csiquant_10quantities_6SIUnit_46exp(((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_v_self), ((double)__pyx_v_power));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_46exp(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self, double __pyx_v_power) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("exp", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_8csiquant_10quantities_6SIUnit_exp(__pyx_v_self, __pyx_v_power, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("csiquant.quantities.SIUnit.exp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":207
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)
 * 
 *     def __copy__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_49__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_49__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__copy__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8csiquant_10quantities_6SIUnit_48__copy__(((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_48__copy__(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__copy__", 0);

  /* "csiquant/quantities.pyx":208
 * 
 *     def __copy__(self):
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __deepcopy__(self, memodict={}):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":207
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)
 * 
 *     def __copy__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":210
 *         return self
 * 
 *     def __deepcopy__(self, memodict={}):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_51__deepcopy__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_51__deepcopy__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_memodict = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__deepcopy__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_memodict,0};
    PyObject* values[1] = {0};
    values[0] = __pyx_k__7;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_memodict);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__deepcopy__") < 0)) __PYX_ERR(1, 210, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_memodict = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__deepcopy__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 210, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("csiquant.quantities.SIUnit.__deepcopy__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8csiquant_10quantities_6SIUnit_50__deepcopy__(((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_v_self), __pyx_v_memodict);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_50__deepcopy__(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_memodict) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__deepcopy__", 0);

  /* "csiquant/quantities.pyx":211
 * 
 *     def __deepcopy__(self, memodict={}):
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __hash__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":210
 *         return self
 * 
 *     def __deepcopy__(self, memodict={}):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":213
 *         return self
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         data_tuple = (self.data.scale, tuple(self.data.dimensions.exponents))
 *         return hash(data_tuple)
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_8csiquant_10quantities_6SIUnit_53__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_8csiquant_10quantities_6SIUnit_53__hash__(PyObject *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8csiquant_10quantities_6SIUnit_52__hash__(((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_8csiquant_10quantities_6SIUnit_52__hash__(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self) {
  PyObject *__pyx_v_data_tuple = NULL;
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_hash_t __pyx_t_4;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "csiquant/quantities.pyx":214
 * 
 *     def __hash__(self):
 *         data_tuple = (self.data.scale, tuple(self.data.dimensions.exponents))             # <<<<<<<<<<<<<<
 *         return hash(data_tuple)
 * 
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->data.scale); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_carray_to_py_double(__pyx_v_self->data.dimensions.exponents, 7); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PySequence_Tuple(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_v_data_tuple = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "csiquant/quantities.pyx":215
 *     def __hash__(self):
 *         data_tuple = (self.data.scale, tuple(self.data.dimensions.exponents))
 *         return hash(data_tuple)             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __pyx_t_4 = PyObject_Hash(__pyx_v_data_tuple); if (unlikely(__pyx_t_4 == ((Py_hash_t)-1))) __PYX_ERR(1, 215, __pyx_L1_error)
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":213
 *         return self
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         data_tuple = (self.data.scale, tuple(self.data.dimensions.exponents))
 *         return hash(data_tuple)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("csiquant.quantities.SIUnit.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data_tuple);
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":217
 *         return hash(data_tuple)
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return 'SIUnit(%f, %r)' % (self.scale, self.dimensions)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_55__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_55__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8csiquant_10quantities_6SIUnit_54__repr__(((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_54__repr__(struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "csiquant/quantities.pyx":218
 * 
 *     def __repr__(self):
 *         return 'SIUnit(%f, %r)' % (self.scale, self.dimensions)             # <<<<<<<<<<<<<<
 * 
 * cdef class Quantity:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u_SIUnit);
  __pyx_t_2 += 7;
  __Pyx_GIVEREF(__pyx_kp_u_SIUnit);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_SIUnit);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_scale); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_Format(__pyx_t_4, __pyx_n_u_f); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u__8);
  __pyx_t_2 += 2;
  __Pyx_GIVEREF(__pyx_kp_u__8);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u__8);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_dimensions); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_t_5), __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__9);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__9);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u__9);
  __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_1, 5, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":217
 *         return hash(data_tuple)
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return 'SIUnit(%f, %r)' % (self.scale, self.dimensions)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("csiquant.quantities.SIUnit.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("Pickling of struct members such as self.data must be explicitly requested with @auto_pickle(True)")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_57__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_57__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8csiquant_10quantities_6SIUnit_56__reduce_cython__(((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_56__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("Pickling of struct members such as self.data must be explicitly requested with @auto_pickle(True)")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("Pickling of struct members such as self.data must be explicitly requested with @auto_pickle(True)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("Pickling of struct members such as self.data must be explicitly requested with @auto_pickle(True)")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("csiquant.quantities.SIUnit.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("Pickling of struct members such as self.data must be explicitly requested with @auto_pickle(True)")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("Pickling of struct members such as self.data must be explicitly requested with @auto_pickle(True)")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_59__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_6SIUnit_59__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8csiquant_10quantities_6SIUnit_58__setstate_cython__(((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_6SIUnit_58__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("Pickling of struct members such as self.data must be explicitly requested with @auto_pickle(True)")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("Pickling of struct members such as self.data must be explicitly requested with @auto_pickle(True)")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("Pickling of struct members such as self.data must be explicitly requested with @auto_pickle(True)")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("Pickling of struct members such as self.data must be explicitly requested with @auto_pickle(True)")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("csiquant.quantities.SIUnit.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":223
 * 
 *     @property
 *     def quantity(self):             # <<<<<<<<<<<<<<
 *         return self.data.quantity
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_8quantity_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_8quantity_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8csiquant_10quantities_8Quantity_8quantity___get__(((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_8quantity___get__(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "csiquant/quantities.pyx":224
 *     @property
 *     def quantity(self):
 *         return self.data.quantity             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->data.quantity); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":223
 * 
 *     @property
 *     def quantity(self):             # <<<<<<<<<<<<<<
 *         return self.data.quantity
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("csiquant.quantities.Quantity.quantity.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":227
 * 
 *     @property
 *     def units(self):             # <<<<<<<<<<<<<<
 *         cdef SIUnit units = SIUnit.__new__(SIUnit)
 *         units.data = self.data.units
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_5units_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_5units_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8csiquant_10quantities_8Quantity_5units___get__(((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_5units___get__(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self) {
  struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_units = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_t_8csiquant_6ctypes_UData __pyx_t_2;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "csiquant/quantities.pyx":228
 *     @property
 *     def units(self):
 *         cdef SIUnit units = SIUnit.__new__(SIUnit)             # <<<<<<<<<<<<<<
 *         units.data = self.data.units
 *         return units
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_8csiquant_10quantities_SIUnit(((PyTypeObject *)__pyx_ptype_8csiquant_10quantities_SIUnit), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 228, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_units = ((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "csiquant/quantities.pyx":229
 *     def units(self):
 *         cdef SIUnit units = SIUnit.__new__(SIUnit)
 *         units.data = self.data.units             # <<<<<<<<<<<<<<
 *         return units
 * 
 */
  __pyx_t_2 = __pyx_v_self->data.units;
  __pyx_v_units->data = __pyx_t_2;

  /* "csiquant/quantities.pyx":230
 *         cdef SIUnit units = SIUnit.__new__(SIUnit)
 *         units.data = self.data.units
 *         return units             # <<<<<<<<<<<<<<
 * 
 *     def __init__(Quantity self, double quantity, SIUnit units):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_units));
  __pyx_r = ((PyObject *)__pyx_v_units);
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":227
 * 
 *     @property
 *     def units(self):             # <<<<<<<<<<<<<<
 *         cdef SIUnit units = SIUnit.__new__(SIUnit)
 *         units.data = self.data.units
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("csiquant.quantities.Quantity.units.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_units);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":232
 *         return units
 * 
 *     def __init__(Quantity self, double quantity, SIUnit units):             # <<<<<<<<<<<<<<
 *         if units is None:
 *             raise TypeError()
 */

/* Python wrapper */
static int __pyx_pw_8csiquant_10quantities_8Quantity_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8csiquant_10quantities_8Quantity_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_quantity;
  struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_units = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_quantity,&__pyx_n_s_units,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_quantity)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_units)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); __PYX_ERR(1, 232, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(1, 232, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_quantity = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_quantity == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 232, __pyx_L3_error)
    __pyx_v_units = ((struct __pyx_obj_8csiquant_10quantities_SIUnit *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 232, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("csiquant.quantities.Quantity.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_units), __pyx_ptype_8csiquant_10quantities_SIUnit, 1, "units", 0))) __PYX_ERR(1, 232, __pyx_L1_error)
  __pyx_r = __pyx_pf_8csiquant_10quantities_8Quantity___init__(((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_v_self), __pyx_v_quantity, __pyx_v_units);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8csiquant_10quantities_8Quantity___init__(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self, double __pyx_v_quantity, struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_units) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  struct __pyx_t_8csiquant_6ctypes_UData __pyx_t_4;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "csiquant/quantities.pyx":233
 * 
 *     def __init__(Quantity self, double quantity, SIUnit units):
 *         if units is None:             # <<<<<<<<<<<<<<
 *             raise TypeError()
 *         self.data.quantity = quantity
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_units) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (unlikely(__pyx_t_2)) {

    /* "csiquant/quantities.pyx":234
 *     def __init__(Quantity self, double quantity, SIUnit units):
 *         if units is None:
 *             raise TypeError()             # <<<<<<<<<<<<<<
 *         self.data.quantity = quantity
 *         self.data.units = units.data
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_builtin_TypeError); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 234, __pyx_L1_error)

    /* "csiquant/quantities.pyx":233
 * 
 *     def __init__(Quantity self, double quantity, SIUnit units):
 *         if units is None:             # <<<<<<<<<<<<<<
 *             raise TypeError()
 *         self.data.quantity = quantity
 */
  }

  /* "csiquant/quantities.pyx":235
 *         if units is None:
 *             raise TypeError()
 *         self.data.quantity = quantity             # <<<<<<<<<<<<<<
 *         self.data.units = units.data
 * 
 */
  __pyx_v_self->data.quantity = __pyx_v_quantity;

  /* "csiquant/quantities.pyx":236
 *             raise TypeError()
 *         self.data.quantity = quantity
 *         self.data.units = units.data             # <<<<<<<<<<<<<<
 * 
 *     cpdef is_of(Quantity self, d.Dimensions dims):
 */
  __pyx_t_4 = __pyx_v_units->data;
  __pyx_v_self->data.units = __pyx_t_4;

  /* "csiquant/quantities.pyx":232
 *         return units
 * 
 *     def __init__(Quantity self, double quantity, SIUnit units):             # <<<<<<<<<<<<<<
 *         if units is None:
 *             raise TypeError()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("csiquant.quantities.Quantity.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":238
 *         self.data.units = units.data
 * 
 *     cpdef is_of(Quantity self, d.Dimensions dims):             # <<<<<<<<<<<<<<
 *         if dims is None:
 *             raise TypeError()
 */

static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_3is_of(PyObject *__pyx_v_self, PyObject *__pyx_v_dims); /*proto*/
static PyObject *__pyx_f_8csiquant_10quantities_8Quantity_is_of(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self, struct __pyx_obj_8csiquant_10dimensions_Dimensions *__pyx_v_dims, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("is_of", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
    static PY_UINT64_T tp_dict_version = 0, obj_dict_version = 0;
    if (likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict && tp_dict_version == __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) && (!Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset || obj_dict_version == __PYX_GET_DICT_VERSION(_PyObject_GetDictPtr(((PyObject *)__pyx_v_self))))));
    else {
      PY_UINT64_T type_dict_guard = (likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict)) ? __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) : 0;
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_of); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 238, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_8csiquant_10quantities_8Quantity_3is_of)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, ((PyObject *)__pyx_v_dims)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_dims));
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 238, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
      tp_dict_version = likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) ? __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) : 0;
      obj_dict_version = likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset) ? __PYX_GET_DICT_VERSION(_PyObject_GetDictPtr(((PyObject *)__pyx_v_self))) : 0;
      if (unlikely(type_dict_guard != tp_dict_version)) {
        tp_dict_version = obj_dict_version = 0;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
    }
    #endif
  }

  /* "csiquant/quantities.pyx":239
 * 
 *     cpdef is_of(Quantity self, d.Dimensions dims):
 *         if dims is None:             # <<<<<<<<<<<<<<
 *             raise TypeError()
 * 
 */
  __pyx_t_5 = (((PyObject *)__pyx_v_dims) == Py_None);
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (unlikely(__pyx_t_6)) {

    /* "csiquant/quantities.pyx":240
 *     cpdef is_of(Quantity self, d.Dimensions dims):
 *         if dims is None:
 *             raise TypeError()             # <<<<<<<<<<<<<<
 * 
 *         return c.eq_ddata(self.data.units.dimensions, dims.data)
 */
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_builtin_TypeError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 240, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 240, __pyx_L1_error)

    /* "csiquant/quantities.pyx":239
 * 
 *     cpdef is_of(Quantity self, d.Dimensions dims):
 *         if dims is None:             # <<<<<<<<<<<<<<
 *             raise TypeError()
 * 
 */
  }

  /* "csiquant/quantities.pyx":242
 *             raise TypeError()
 * 
 *         return c.eq_ddata(self.data.units.dimensions, dims.data)             # <<<<<<<<<<<<<<
 * 
 *     cpdef get_as(Quantity self, SIUnit units):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_8csiquant_6ctypes_eq_ddata(__pyx_v_self->data.units.dimensions, __pyx_v_dims->data)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":238
 *         self.data.units = units.data
 * 
 *     cpdef is_of(Quantity self, d.Dimensions dims):             # <<<<<<<<<<<<<<
 *         if dims is None:
 *             raise TypeError()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("csiquant.quantities.Quantity.is_of", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_3is_of(PyObject *__pyx_v_self, PyObject *__pyx_v_dims); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_3is_of(PyObject *__pyx_v_self, PyObject *__pyx_v_dims) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_of (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dims), __pyx_ptype_8csiquant_10dimensions_Dimensions, 1, "dims", 0))) __PYX_ERR(1, 238, __pyx_L1_error)
  __pyx_r = __pyx_pf_8csiquant_10quantities_8Quantity_2is_of(((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_v_self), ((struct __pyx_obj_8csiquant_10dimensions_Dimensions *)__pyx_v_dims));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_2is_of(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self, struct __pyx_obj_8csiquant_10dimensions_Dimensions *__pyx_v_dims) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("is_of", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8csiquant_10quantities_8Quantity_is_of(__pyx_v_self, __pyx_v_dims, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("csiquant.quantities.Quantity.is_of", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":244
 *         return c.eq_ddata(self.data.units.dimensions, dims.data)
 * 
 *     cpdef get_as(Quantity self, SIUnit units):             # <<<<<<<<<<<<<<
 *         if units is None:
 *             raise TypeError()
 */

static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_5get_as(PyObject *__pyx_v_self, PyObject *__pyx_v_units); /*proto*/
static PyObject *__pyx_f_8csiquant_10quantities_8Quantity_get_as(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self, struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_units, int __pyx_skip_dispatch) {
  enum __pyx_t_8csiquant_6ctypes_Error __pyx_v_error_code;
  double __pyx_v_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("get_as", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
    static PY_UINT64_T tp_dict_version = 0, obj_dict_version = 0;
    if (likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict && tp_dict_version == __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) && (!Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset || obj_dict_version == __PYX_GET_DICT_VERSION(_PyObject_GetDictPtr(((PyObject *)__pyx_v_self))))));
    else {
      PY_UINT64_T type_dict_guard = (likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict)) ? __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) : 0;
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_as); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 244, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_8csiquant_10quantities_8Quantity_5get_as)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, ((PyObject *)__pyx_v_units)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_units));
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 244, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
      tp_dict_version = likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) ? __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) : 0;
      obj_dict_version = likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset) ? __PYX_GET_DICT_VERSION(_PyObject_GetDictPtr(((PyObject *)__pyx_v_self))) : 0;
      if (unlikely(type_dict_guard != tp_dict_version)) {
        tp_dict_version = obj_dict_version = 0;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
    }
    #endif
  }

  /* "csiquant/quantities.pyx":245
 * 
 *     cpdef get_as(Quantity self, SIUnit units):
 *         if units is None:             # <<<<<<<<<<<<<<
 *             raise TypeError()
 * 
 */
  __pyx_t_5 = (((PyObject *)__pyx_v_units) == Py_None);
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (unlikely(__pyx_t_6)) {

    /* "csiquant/quantities.pyx":246
 *     cpdef get_as(Quantity self, SIUnit units):
 *         if units is None:
 *             raise TypeError()             # <<<<<<<<<<<<<<
 * 
 *         cdef c.Error error_code
 */
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_builtin_TypeError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 246, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 246, __pyx_L1_error)

    /* "csiquant/quantities.pyx":245
 * 
 *     cpdef get_as(Quantity self, SIUnit units):
 *         if units is None:             # <<<<<<<<<<<<<<
 *             raise TypeError()
 * 
 */
  }

  /* "csiquant/quantities.pyx":250
 *         cdef c.Error error_code
 *         cdef double value
 *         error_code = c.extract_quantity(value, self.data, units.data)             # <<<<<<<<<<<<<<
 *         if error_code == c.Success:
 *             return value
 */
  __pyx_v_error_code = __pyx_f_8csiquant_6ctypes_extract_quantity(__pyx_v_value, __pyx_v_self->data, __pyx_v_units->data);

  /* "csiquant/quantities.pyx":251
 *         cdef double value
 *         error_code = c.extract_quantity(value, self.data, units.data)
 *         if error_code == c.Success:             # <<<<<<<<<<<<<<
 *             return value
 * 
 */
  __pyx_t_6 = ((__pyx_v_error_code == __pyx_e_8csiquant_6ctypes_Success) != 0);
  if (__pyx_t_6) {

    /* "csiquant/quantities.pyx":252
 *         error_code = c.extract_quantity(value, self.data, units.data)
 *         if error_code == c.Success:
 *             return value             # <<<<<<<<<<<<<<
 * 
 *         if error_code == c.DimensionMismatch:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "csiquant/quantities.pyx":251
 *         cdef double value
 *         error_code = c.extract_quantity(value, self.data, units.data)
 *         if error_code == c.Success:             # <<<<<<<<<<<<<<
 *             return value
 * 
 */
  }

  /* "csiquant/quantities.pyx":254
 *             return value
 * 
 *         if error_code == c.DimensionMismatch:             # <<<<<<<<<<<<<<
 *             raise ValueError("units mismatch")
 * 
 */
  __pyx_t_6 = ((__pyx_v_error_code == __pyx_e_8csiquant_6ctypes_DimensionMismatch) != 0);
  if (unlikely(__pyx_t_6)) {

    /* "csiquant/quantities.pyx":255
 * 
 *         if error_code == c.DimensionMismatch:
 *             raise ValueError("units mismatch")             # <<<<<<<<<<<<<<
 * 
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 255, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 255, __pyx_L1_error)

    /* "csiquant/quantities.pyx":254
 *             return value
 * 
 *         if error_code == c.DimensionMismatch:             # <<<<<<<<<<<<<<
 *             raise ValueError("units mismatch")
 * 
 */
  }

  /* "csiquant/quantities.pyx":257
 *             raise ValueError("units mismatch")
 * 
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)             # <<<<<<<<<<<<<<
 * 
 *     cpdef Quantity cvt_to(Quantity self, SIUnit units):
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_8csiquant_6ctypes_Error(__pyx_v_error_code); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyUnicode_Format(__pyx_kp_u_Unknown_Error_Occurred_i, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_RuntimeError, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 257, __pyx_L1_error)

  /* "csiquant/quantities.pyx":244
 *         return c.eq_ddata(self.data.units.dimensions, dims.data)
 * 
 *     cpdef get_as(Quantity self, SIUnit units):             # <<<<<<<<<<<<<<
 *         if units is None:
 *             raise TypeError()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("csiquant.quantities.Quantity.get_as", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_5get_as(PyObject *__pyx_v_self, PyObject *__pyx_v_units); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_5get_as(PyObject *__pyx_v_self, PyObject *__pyx_v_units) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_as (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_units), __pyx_ptype_8csiquant_10quantities_SIUnit, 1, "units", 0))) __PYX_ERR(1, 244, __pyx_L1_error)
  __pyx_r = __pyx_pf_8csiquant_10quantities_8Quantity_4get_as(((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_v_self), ((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_v_units));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_4get_as(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self, struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_units) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_as", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8csiquant_10quantities_8Quantity_get_as(__pyx_v_self, __pyx_v_units, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("csiquant.quantities.Quantity.get_as", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":259
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)
 * 
 *     cpdef Quantity cvt_to(Quantity self, SIUnit units):             # <<<<<<<<<<<<<<
 *         if units is None:
 *             raise TypeError()
 */

static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_7cvt_to(PyObject *__pyx_v_self, PyObject *__pyx_v_units); /*proto*/
static struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_f_8csiquant_10quantities_8Quantity_cvt_to(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self, struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_units, int __pyx_skip_dispatch) {
  enum __pyx_t_8csiquant_6ctypes_Error __pyx_v_error_code;
  int __pyx_v_cmp;
  struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_ret = 0;
  struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("cvt_to", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
    static PY_UINT64_T tp_dict_version = 0, obj_dict_version = 0;
    if (likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict && tp_dict_version == __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) && (!Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset || obj_dict_version == __PYX_GET_DICT_VERSION(_PyObject_GetDictPtr(((PyObject *)__pyx_v_self))))));
    else {
      PY_UINT64_T type_dict_guard = (likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict)) ? __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) : 0;
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_cvt_to); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 259, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_8csiquant_10quantities_8Quantity_7cvt_to)) {
        __Pyx_XDECREF(((PyObject *)__pyx_r));
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, ((PyObject *)__pyx_v_units)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_units));
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 259, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_8csiquant_10quantities_Quantity))))) __PYX_ERR(1, 259, __pyx_L1_error)
        __pyx_r = ((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
      tp_dict_version = likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) ? __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) : 0;
      obj_dict_version = likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset) ? __PYX_GET_DICT_VERSION(_PyObject_GetDictPtr(((PyObject *)__pyx_v_self))) : 0;
      if (unlikely(type_dict_guard != tp_dict_version)) {
        tp_dict_version = obj_dict_version = 0;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
    }
    #endif
  }

  /* "csiquant/quantities.pyx":260
 * 
 *     cpdef Quantity cvt_to(Quantity self, SIUnit units):
 *         if units is None:             # <<<<<<<<<<<<<<
 *             raise TypeError()
 * 
 */
  __pyx_t_5 = (((PyObject *)__pyx_v_units) == Py_None);
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (unlikely(__pyx_t_6)) {

    /* "csiquant/quantities.pyx":261
 *     cpdef Quantity cvt_to(Quantity self, SIUnit units):
 *         if units is None:
 *             raise TypeError()             # <<<<<<<<<<<<<<
 * 
 *         cdef c.Error error_code
 */
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_builtin_TypeError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 261, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 261, __pyx_L1_error)

    /* "csiquant/quantities.pyx":260
 * 
 *     cpdef Quantity cvt_to(Quantity self, SIUnit units):
 *         if units is None:             # <<<<<<<<<<<<<<
 *             raise TypeError()
 * 
 */
  }

  /* "csiquant/quantities.pyx":266
 *         cdef int cmp
 * 
 *         error_code = c.cmp_udata(cmp, self.data.units, units.data)             # <<<<<<<<<<<<<<
 *         if error_code == c.DimensionMismatch:
 *             raise ValueError("units mismatch")
 */
  __pyx_v_error_code = __pyx_f_8csiquant_6ctypes_cmp_udata(__pyx_v_cmp, __pyx_v_self->data.units, __pyx_v_units->data);

  /* "csiquant/quantities.pyx":267
 * 
 *         error_code = c.cmp_udata(cmp, self.data.units, units.data)
 *         if error_code == c.DimensionMismatch:             # <<<<<<<<<<<<<<
 *             raise ValueError("units mismatch")
 * 
 */
  __pyx_t_6 = ((__pyx_v_error_code == __pyx_e_8csiquant_6ctypes_DimensionMismatch) != 0);
  if (unlikely(__pyx_t_6)) {

    /* "csiquant/quantities.pyx":268
 *         error_code = c.cmp_udata(cmp, self.data.units, units.data)
 *         if error_code == c.DimensionMismatch:
 *             raise ValueError("units mismatch")             # <<<<<<<<<<<<<<
 * 
 *         if cmp == 0:
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 268, __pyx_L1_error)

    /* "csiquant/quantities.pyx":267
 * 
 *         error_code = c.cmp_udata(cmp, self.data.units, units.data)
 *         if error_code == c.DimensionMismatch:             # <<<<<<<<<<<<<<
 *             raise ValueError("units mismatch")
 * 
 */
  }

  /* "csiquant/quantities.pyx":270
 *             raise ValueError("units mismatch")
 * 
 *         if cmp == 0:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */
  __pyx_t_6 = ((__pyx_v_cmp == 0) != 0);
  if (__pyx_t_6) {

    /* "csiquant/quantities.pyx":271
 * 
 *         if cmp == 0:
 *             return self             # <<<<<<<<<<<<<<
 * 
 *         cdef Quantity ret = Quantity.__new__(Quantity)
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __pyx_r = __pyx_v_self;
    goto __pyx_L0;

    /* "csiquant/quantities.pyx":270
 *             raise ValueError("units mismatch")
 * 
 *         if cmp == 0:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */
  }

  /* "csiquant/quantities.pyx":273
 *             return self
 * 
 *         cdef Quantity ret = Quantity.__new__(Quantity)             # <<<<<<<<<<<<<<
 *         c.cvt_quantity(ret.data, self.data, units.data)
 *         return ret
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_8csiquant_10quantities_Quantity(((PyTypeObject *)__pyx_ptype_8csiquant_10quantities_Quantity), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 273, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_ret = ((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "csiquant/quantities.pyx":274
 * 
 *         cdef Quantity ret = Quantity.__new__(Quantity)
 *         c.cvt_quantity(ret.data, self.data, units.data)             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
  (void)(__pyx_f_8csiquant_6ctypes_cvt_quantity(__pyx_v_ret->data, __pyx_v_self->data, __pyx_v_units->data));

  /* "csiquant/quantities.pyx":275
 *         cdef Quantity ret = Quantity.__new__(Quantity)
 *         c.cvt_quantity(ret.data, self.data, units.data)
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     cpdef Quantity round_to(Quantity self, SIUnit units):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_ret));
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":259
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)
 * 
 *     cpdef Quantity cvt_to(Quantity self, SIUnit units):             # <<<<<<<<<<<<<<
 *         if units is None:
 *             raise TypeError()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("csiquant.quantities.Quantity.cvt_to", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ret);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_7cvt_to(PyObject *__pyx_v_self, PyObject *__pyx_v_units); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_7cvt_to(PyObject *__pyx_v_self, PyObject *__pyx_v_units) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cvt_to (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_units), __pyx_ptype_8csiquant_10quantities_SIUnit, 1, "units", 0))) __PYX_ERR(1, 259, __pyx_L1_error)
  __pyx_r = __pyx_pf_8csiquant_10quantities_8Quantity_6cvt_to(((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_v_self), ((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_v_units));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_6cvt_to(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self, struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_units) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("cvt_to", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_8csiquant_10quantities_8Quantity_cvt_to(__pyx_v_self, __pyx_v_units, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("csiquant.quantities.Quantity.cvt_to", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":277
 *         return ret
 * 
 *     cpdef Quantity round_to(Quantity self, SIUnit units):             # <<<<<<<<<<<<<<
 *         if units is None:
 *             raise TypeError()
 */

static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_9round_to(PyObject *__pyx_v_self, PyObject *__pyx_v_units); /*proto*/
static struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_f_8csiquant_10quantities_8Quantity_round_to(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self, struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_units, int __pyx_skip_dispatch) {
  enum __pyx_t_8csiquant_6ctypes_Error __pyx_v_error_code;
  struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_ret = 0;
  struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("round_to", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
    static PY_UINT64_T tp_dict_version = 0, obj_dict_version = 0;
    if (likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict && tp_dict_version == __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) && (!Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset || obj_dict_version == __PYX_GET_DICT_VERSION(_PyObject_GetDictPtr(((PyObject *)__pyx_v_self))))));
    else {
      PY_UINT64_T type_dict_guard = (likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict)) ? __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) : 0;
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_round_to); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 277, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_8csiquant_10quantities_8Quantity_9round_to)) {
        __Pyx_XDECREF(((PyObject *)__pyx_r));
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, ((PyObject *)__pyx_v_units)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_units));
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 277, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_8csiquant_10quantities_Quantity))))) __PYX_ERR(1, 277, __pyx_L1_error)
        __pyx_r = ((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
      tp_dict_version = likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) ? __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) : 0;
      obj_dict_version = likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset) ? __PYX_GET_DICT_VERSION(_PyObject_GetDictPtr(((PyObject *)__pyx_v_self))) : 0;
      if (unlikely(type_dict_guard != tp_dict_version)) {
        tp_dict_version = obj_dict_version = 0;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
    }
    #endif
  }

  /* "csiquant/quantities.pyx":278
 * 
 *     cpdef Quantity round_to(Quantity self, SIUnit units):
 *         if units is None:             # <<<<<<<<<<<<<<
 *             raise TypeError()
 * 
 */
  __pyx_t_5 = (((PyObject *)__pyx_v_units) == Py_None);
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (unlikely(__pyx_t_6)) {

    /* "csiquant/quantities.pyx":279
 *     cpdef Quantity round_to(Quantity self, SIUnit units):
 *         if units is None:
 *             raise TypeError()             # <<<<<<<<<<<<<<
 * 
 *         cdef c.Error error_code
 */
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_builtin_TypeError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 279, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 279, __pyx_L1_error)

    /* "csiquant/quantities.pyx":278
 * 
 *     cpdef Quantity round_to(Quantity self, SIUnit units):
 *         if units is None:             # <<<<<<<<<<<<<<
 *             raise TypeError()
 * 
 */
  }

  /* "csiquant/quantities.pyx":282
 * 
 *         cdef c.Error error_code
 *         cdef Quantity ret = Quantity.__new__(Quantity)             # <<<<<<<<<<<<<<
 * 
 *         error_code = c.cvt_quantity(ret.data, self.data, units.data)
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_8csiquant_10quantities_Quantity(((PyTypeObject *)__pyx_ptype_8csiquant_10quantities_Quantity), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 282, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_ret = ((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "csiquant/quantities.pyx":284
 *         cdef Quantity ret = Quantity.__new__(Quantity)
 * 
 *         error_code = c.cvt_quantity(ret.data, self.data, units.data)             # <<<<<<<<<<<<<<
 *         if error_code == c.Success:
 *             ret.data.quantity = round(ret.data.quantity)
 */
  __pyx_v_error_code = __pyx_f_8csiquant_6ctypes_cvt_quantity(__pyx_v_ret->data, __pyx_v_self->data, __pyx_v_units->data);

  /* "csiquant/quantities.pyx":285
 * 
 *         error_code = c.cvt_quantity(ret.data, self.data, units.data)
 *         if error_code == c.Success:             # <<<<<<<<<<<<<<
 *             ret.data.quantity = round(ret.data.quantity)
 *             return ret
 */
  __pyx_t_6 = ((__pyx_v_error_code == __pyx_e_8csiquant_6ctypes_Success) != 0);
  if (__pyx_t_6) {

    /* "csiquant/quantities.pyx":286
 *         error_code = c.cvt_quantity(ret.data, self.data, units.data)
 *         if error_code == c.Success:
 *             ret.data.quantity = round(ret.data.quantity)             # <<<<<<<<<<<<<<
 *             return ret
 * 
 */
    __pyx_v_ret->data.quantity = round(__pyx_v_ret->data.quantity);

    /* "csiquant/quantities.pyx":287
 *         if error_code == c.Success:
 *             ret.data.quantity = round(ret.data.quantity)
 *             return ret             # <<<<<<<<<<<<<<
 * 
 *         if error_code == c.DimensionMismatch:
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    __Pyx_INCREF(((PyObject *)__pyx_v_ret));
    __pyx_r = __pyx_v_ret;
    goto __pyx_L0;

    /* "csiquant/quantities.pyx":285
 * 
 *         error_code = c.cvt_quantity(ret.data, self.data, units.data)
 *         if error_code == c.Success:             # <<<<<<<<<<<<<<
 *             ret.data.quantity = round(ret.data.quantity)
 *             return ret
 */
  }

  /* "csiquant/quantities.pyx":289
 *             return ret
 * 
 *         if error_code == c.DimensionMismatch:             # <<<<<<<<<<<<<<
 *             raise ValueError("units mismatch")
 * 
 */
  __pyx_t_6 = ((__pyx_v_error_code == __pyx_e_8csiquant_6ctypes_DimensionMismatch) != 0);
  if (unlikely(__pyx_t_6)) {

    /* "csiquant/quantities.pyx":290
 * 
 *         if error_code == c.DimensionMismatch:
 *             raise ValueError("units mismatch")             # <<<<<<<<<<<<<<
 * 
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 290, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 290, __pyx_L1_error)

    /* "csiquant/quantities.pyx":289
 *             return ret
 * 
 *         if error_code == c.DimensionMismatch:             # <<<<<<<<<<<<<<
 *             raise ValueError("units mismatch")
 * 
 */
  }

  /* "csiquant/quantities.pyx":292
 *             raise ValueError("units mismatch")
 * 
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)             # <<<<<<<<<<<<<<
 * 
 *     """
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_8csiquant_6ctypes_Error(__pyx_v_error_code); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyUnicode_Format(__pyx_kp_u_Unknown_Error_Occurred_i, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_RuntimeError, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 292, __pyx_L1_error)

  /* "csiquant/quantities.pyx":277
 *         return ret
 * 
 *     cpdef Quantity round_to(Quantity self, SIUnit units):             # <<<<<<<<<<<<<<
 *         if units is None:
 *             raise TypeError()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("csiquant.quantities.Quantity.round_to", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ret);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_9round_to(PyObject *__pyx_v_self, PyObject *__pyx_v_units); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_9round_to(PyObject *__pyx_v_self, PyObject *__pyx_v_units) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("round_to (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_units), __pyx_ptype_8csiquant_10quantities_SIUnit, 1, "units", 0))) __PYX_ERR(1, 277, __pyx_L1_error)
  __pyx_r = __pyx_pf_8csiquant_10quantities_8Quantity_8round_to(((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_v_self), ((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_v_units));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_8round_to(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self, struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_units) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("round_to", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_8csiquant_10quantities_8Quantity_round_to(__pyx_v_self, __pyx_v_units, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("csiquant.quantities.Quantity.round_to", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":298
 *     """
 * 
 *     def __eq__(lhs, rhs):             # <<<<<<<<<<<<<<
 *         if type(lhs) is not Quantity:
 *             return NotImplemented
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_11__eq__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_11__eq__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__eq__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8csiquant_10quantities_8Quantity_10__eq__(((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_v_lhs), ((PyObject *)__pyx_v_rhs));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_10__eq__(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("__eq__", 0);

  /* "csiquant/quantities.pyx":299
 * 
 *     def __eq__(lhs, rhs):
 *         if type(lhs) is not Quantity:             # <<<<<<<<<<<<<<
 *             return NotImplemented
 *         if type(rhs) is not Quantity:
 */
  __pyx_t_1 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_lhs))) != ((PyObject *)__pyx_ptype_8csiquant_10quantities_Quantity));
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "csiquant/quantities.pyx":300
 *     def __eq__(lhs, rhs):
 *         if type(lhs) is not Quantity:
 *             return NotImplemented             # <<<<<<<<<<<<<<
 *         if type(rhs) is not Quantity:
 *             return NotImplemented
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;

    /* "csiquant/quantities.pyx":299
 * 
 *     def __eq__(lhs, rhs):
 *         if type(lhs) is not Quantity:             # <<<<<<<<<<<<<<
 *             return NotImplemented
 *         if type(rhs) is not Quantity:
 */
  }

  /* "csiquant/quantities.pyx":301
 *         if type(lhs) is not Quantity:
 *             return NotImplemented
 *         if type(rhs) is not Quantity:             # <<<<<<<<<<<<<<
 *             return NotImplemented
 * 
 */
  __pyx_t_2 = (((PyObject *)Py_TYPE(__pyx_v_rhs)) != ((PyObject *)__pyx_ptype_8csiquant_10quantities_Quantity));
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "csiquant/quantities.pyx":302
 *             return NotImplemented
 *         if type(rhs) is not Quantity:
 *             return NotImplemented             # <<<<<<<<<<<<<<
 * 
 *         try:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;

    /* "csiquant/quantities.pyx":301
 *         if type(lhs) is not Quantity:
 *             return NotImplemented
 *         if type(rhs) is not Quantity:             # <<<<<<<<<<<<<<
 *             return NotImplemented
 * 
 */
  }

  /* "csiquant/quantities.pyx":304
 *             return NotImplemented
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             return lhs.cmp(rhs) == 0
 *         except ValueError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "csiquant/quantities.pyx":305
 * 
 *         try:
 *             return lhs.cmp(rhs) == 0             # <<<<<<<<<<<<<<
 *         except ValueError:
 *             return NotImplemented
 */
      __Pyx_XDECREF(__pyx_r);
      if (!(likely(((__pyx_v_rhs) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_rhs, __pyx_ptype_8csiquant_10quantities_Quantity))))) __PYX_ERR(1, 305, __pyx_L5_error)
      __pyx_t_6 = ((struct __pyx_vtabstruct_8csiquant_10quantities_Quantity *)__pyx_v_lhs->__pyx_vtab)->cmp(__pyx_v_lhs, ((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_v_rhs), 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 305, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyInt_EqObjC(__pyx_t_6, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 305, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_r = __pyx_t_7;
      __pyx_t_7 = 0;
      goto __pyx_L9_try_return;

      /* "csiquant/quantities.pyx":304
 *             return NotImplemented
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             return lhs.cmp(rhs) == 0
 *         except ValueError:
 */
    }
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "csiquant/quantities.pyx":306
 *         try:
 *             return lhs.cmp(rhs) == 0
 *         except ValueError:             # <<<<<<<<<<<<<<
 *             return NotImplemented
 * 
 */
    __pyx_t_8 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
    if (__pyx_t_8) {
      __Pyx_AddTraceback("csiquant.quantities.Quantity.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_6, &__pyx_t_9) < 0) __PYX_ERR(1, 306, __pyx_L7_except_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_9);

      /* "csiquant/quantities.pyx":307
 *             return lhs.cmp(rhs) == 0
 *         except ValueError:
 *             return NotImplemented             # <<<<<<<<<<<<<<
 * 
 *     def __ne__(lhs, rhs):
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_builtin_NotImplemented);
      __pyx_r = __pyx_builtin_NotImplemented;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L8_except_return;
    }
    goto __pyx_L7_except_error;
    __pyx_L7_except_error:;

    /* "csiquant/quantities.pyx":304
 *             return NotImplemented
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             return lhs.cmp(rhs) == 0
 *         except ValueError:
 */
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L9_try_return:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L0;
    __pyx_L8_except_return:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L0;
  }

  /* "csiquant/quantities.pyx":298
 *     """
 * 
 *     def __eq__(lhs, rhs):             # <<<<<<<<<<<<<<
 *         if type(lhs) is not Quantity:
 *             return NotImplemented
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("csiquant.quantities.Quantity.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":309
 *             return NotImplemented
 * 
 *     def __ne__(lhs, rhs):             # <<<<<<<<<<<<<<
 *         return not lhs == rhs
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_13__ne__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_13__ne__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__ne__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8csiquant_10quantities_8Quantity_12__ne__(((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_v_lhs), ((PyObject *)__pyx_v_rhs));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_12__ne__(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__ne__", 0);

  /* "csiquant/quantities.pyx":310
 * 
 *     def __ne__(lhs, rhs):
 *         return not lhs == rhs             # <<<<<<<<<<<<<<
 * 
 *     def __lt__(Quantity lhs not None, Quantity rhs not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_lhs), __pyx_v_rhs, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 310, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 310, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong((!__pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":309
 *             return NotImplemented
 * 
 *     def __ne__(lhs, rhs):             # <<<<<<<<<<<<<<
 *         return not lhs == rhs
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("csiquant.quantities.Quantity.__ne__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":312
 *         return not lhs == rhs
 * 
 *     def __lt__(Quantity lhs not None, Quantity rhs not None):             # <<<<<<<<<<<<<<
 *         return lhs.cmp(rhs) < 0
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_15__lt__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_15__lt__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__lt__ (wrapper)", 0);
  if (unlikely(((PyObject *)__pyx_v_lhs) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "lhs"); __PYX_ERR(1, 312, __pyx_L1_error)
  }
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rhs), __pyx_ptype_8csiquant_10quantities_Quantity, 0, "rhs", 0))) __PYX_ERR(1, 312, __pyx_L1_error)
  __pyx_r = __pyx_pf_8csiquant_10quantities_8Quantity_14__lt__(((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_v_lhs), ((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_v_rhs));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_14__lt__(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_lhs, struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_rhs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__lt__", 0);

  /* "csiquant/quantities.pyx":313
 * 
 *     def __lt__(Quantity lhs not None, Quantity rhs not None):
 *         return lhs.cmp(rhs) < 0             # <<<<<<<<<<<<<<
 * 
 *     def __le__(Quantity lhs not None, Quantity rhs not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_8csiquant_10quantities_Quantity *)__pyx_v_lhs->__pyx_vtab)->cmp(__pyx_v_lhs, __pyx_v_rhs, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 313, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":312
 *         return not lhs == rhs
 * 
 *     def __lt__(Quantity lhs not None, Quantity rhs not None):             # <<<<<<<<<<<<<<
 *         return lhs.cmp(rhs) < 0
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("csiquant.quantities.Quantity.__lt__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":315
 *         return lhs.cmp(rhs) < 0
 * 
 *     def __le__(Quantity lhs not None, Quantity rhs not None):             # <<<<<<<<<<<<<<
 *         return lhs.cmp(rhs) <= 0
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_17__le__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_17__le__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__le__ (wrapper)", 0);
  if (unlikely(((PyObject *)__pyx_v_lhs) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "lhs"); __PYX_ERR(1, 315, __pyx_L1_error)
  }
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rhs), __pyx_ptype_8csiquant_10quantities_Quantity, 0, "rhs", 0))) __PYX_ERR(1, 315, __pyx_L1_error)
  __pyx_r = __pyx_pf_8csiquant_10quantities_8Quantity_16__le__(((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_v_lhs), ((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_v_rhs));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_16__le__(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_lhs, struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_rhs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__le__", 0);

  /* "csiquant/quantities.pyx":316
 * 
 *     def __le__(Quantity lhs not None, Quantity rhs not None):
 *         return lhs.cmp(rhs) <= 0             # <<<<<<<<<<<<<<
 * 
 *     def __gt__(Quantity lhs not None, Quantity rhs not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_8csiquant_10quantities_Quantity *)__pyx_v_lhs->__pyx_vtab)->cmp(__pyx_v_lhs, __pyx_v_rhs, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_0, Py_LE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 316, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":315
 *         return lhs.cmp(rhs) < 0
 * 
 *     def __le__(Quantity lhs not None, Quantity rhs not None):             # <<<<<<<<<<<<<<
 *         return lhs.cmp(rhs) <= 0
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("csiquant.quantities.Quantity.__le__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":318
 *         return lhs.cmp(rhs) <= 0
 * 
 *     def __gt__(Quantity lhs not None, Quantity rhs not None):             # <<<<<<<<<<<<<<
 *         return lhs.cmp(rhs) > 0
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_19__gt__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_19__gt__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__gt__ (wrapper)", 0);
  if (unlikely(((PyObject *)__pyx_v_lhs) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "lhs"); __PYX_ERR(1, 318, __pyx_L1_error)
  }
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rhs), __pyx_ptype_8csiquant_10quantities_Quantity, 0, "rhs", 0))) __PYX_ERR(1, 318, __pyx_L1_error)
  __pyx_r = __pyx_pf_8csiquant_10quantities_8Quantity_18__gt__(((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_v_lhs), ((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_v_rhs));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_18__gt__(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_lhs, struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_rhs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__gt__", 0);

  /* "csiquant/quantities.pyx":319
 * 
 *     def __gt__(Quantity lhs not None, Quantity rhs not None):
 *         return lhs.cmp(rhs) > 0             # <<<<<<<<<<<<<<
 * 
 *     def __ge__(Quantity lhs not None, Quantity rhs not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_8csiquant_10quantities_Quantity *)__pyx_v_lhs->__pyx_vtab)->cmp(__pyx_v_lhs, __pyx_v_rhs, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 319, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":318
 *         return lhs.cmp(rhs) <= 0
 * 
 *     def __gt__(Quantity lhs not None, Quantity rhs not None):             # <<<<<<<<<<<<<<
 *         return lhs.cmp(rhs) > 0
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("csiquant.quantities.Quantity.__gt__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":321
 *         return lhs.cmp(rhs) > 0
 * 
 *     def __ge__(Quantity lhs not None, Quantity rhs not None):             # <<<<<<<<<<<<<<
 *         return lhs.cmp(rhs) >= 0
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_21__ge__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_21__ge__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__ge__ (wrapper)", 0);
  if (unlikely(((PyObject *)__pyx_v_lhs) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "lhs"); __PYX_ERR(1, 321, __pyx_L1_error)
  }
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rhs), __pyx_ptype_8csiquant_10quantities_Quantity, 0, "rhs", 0))) __PYX_ERR(1, 321, __pyx_L1_error)
  __pyx_r = __pyx_pf_8csiquant_10quantities_8Quantity_20__ge__(((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_v_lhs), ((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_v_rhs));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_20__ge__(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_lhs, struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_rhs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__ge__", 0);

  /* "csiquant/quantities.pyx":322
 * 
 *     def __ge__(Quantity lhs not None, Quantity rhs not None):
 *         return lhs.cmp(rhs) >= 0             # <<<<<<<<<<<<<<
 * 
 *     cpdef cmp(Quantity self, Quantity other):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_8csiquant_10quantities_Quantity *)__pyx_v_lhs->__pyx_vtab)->cmp(__pyx_v_lhs, __pyx_v_rhs, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_0, Py_GE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 322, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":321
 *         return lhs.cmp(rhs) > 0
 * 
 *     def __ge__(Quantity lhs not None, Quantity rhs not None):             # <<<<<<<<<<<<<<
 *         return lhs.cmp(rhs) >= 0
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("csiquant.quantities.Quantity.__ge__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":324
 *         return lhs.cmp(rhs) >= 0
 * 
 *     cpdef cmp(Quantity self, Quantity other):             # <<<<<<<<<<<<<<
 *         cdef int signum, error_code
 *         error_code = c.cmp_qdata(signum, self.data, other.data)
 */

static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_23cmp(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_f_8csiquant_10quantities_8Quantity_cmp(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self, struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_other, int __pyx_skip_dispatch) {
  int __pyx_v_signum;
  int __pyx_v_error_code;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("cmp", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
    static PY_UINT64_T tp_dict_version = 0, obj_dict_version = 0;
    if (likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict && tp_dict_version == __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) && (!Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset || obj_dict_version == __PYX_GET_DICT_VERSION(_PyObject_GetDictPtr(((PyObject *)__pyx_v_self))))));
    else {
      PY_UINT64_T type_dict_guard = (likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict)) ? __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) : 0;
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_cmp); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 324, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_8csiquant_10quantities_8Quantity_23cmp)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, ((PyObject *)__pyx_v_other)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_other));
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 324, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
      tp_dict_version = likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) ? __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) : 0;
      obj_dict_version = likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset) ? __PYX_GET_DICT_VERSION(_PyObject_GetDictPtr(((PyObject *)__pyx_v_self))) : 0;
      if (unlikely(type_dict_guard != tp_dict_version)) {
        tp_dict_version = obj_dict_version = 0;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
    }
    #endif
  }

  /* "csiquant/quantities.pyx":326
 *     cpdef cmp(Quantity self, Quantity other):
 *         cdef int signum, error_code
 *         error_code = c.cmp_qdata(signum, self.data, other.data)             # <<<<<<<<<<<<<<
 *         if error_code == c.Success:
 *             return signum
 */
  __pyx_v_error_code = __pyx_f_8csiquant_6ctypes_cmp_qdata(__pyx_v_signum, __pyx_v_self->data, __pyx_v_other->data);

  /* "csiquant/quantities.pyx":327
 *         cdef int signum, error_code
 *         error_code = c.cmp_qdata(signum, self.data, other.data)
 *         if error_code == c.Success:             # <<<<<<<<<<<<<<
 *             return signum
 * 
 */
  __pyx_t_5 = ((__pyx_v_error_code == __pyx_e_8csiquant_6ctypes_Success) != 0);
  if (__pyx_t_5) {

    /* "csiquant/quantities.pyx":328
 *         error_code = c.cmp_qdata(signum, self.data, other.data)
 *         if error_code == c.Success:
 *             return signum             # <<<<<<<<<<<<<<
 * 
 *         if error_code == c.DimensionMismatch:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_signum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 328, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "csiquant/quantities.pyx":327
 *         cdef int signum, error_code
 *         error_code = c.cmp_qdata(signum, self.data, other.data)
 *         if error_code == c.Success:             # <<<<<<<<<<<<<<
 *             return signum
 * 
 */
  }

  /* "csiquant/quantities.pyx":330
 *             return signum
 * 
 *         if error_code == c.DimensionMismatch:             # <<<<<<<<<<<<<<
 *             raise ValueError('unit mismatch')
 * 
 */
  __pyx_t_5 = ((__pyx_v_error_code == __pyx_e_8csiquant_6ctypes_DimensionMismatch) != 0);
  if (unlikely(__pyx_t_5)) {

    /* "csiquant/quantities.pyx":331
 * 
 *         if error_code == c.DimensionMismatch:
 *             raise ValueError('unit mismatch')             # <<<<<<<<<<<<<<
 * 
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 331, __pyx_L1_error)

    /* "csiquant/quantities.pyx":330
 *             return signum
 * 
 *         if error_code == c.DimensionMismatch:             # <<<<<<<<<<<<<<
 *             raise ValueError('unit mismatch')
 * 
 */
  }

  /* "csiquant/quantities.pyx":333
 *             raise ValueError('unit mismatch')
 * 
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)             # <<<<<<<<<<<<<<
 * 
 *     cpdef bint compatible(Quantity self, Quantity other):
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_error_code); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyUnicode_Format(__pyx_kp_u_Unknown_Error_Occurred_i, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_RuntimeError, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 333, __pyx_L1_error)

  /* "csiquant/quantities.pyx":324
 *         return lhs.cmp(rhs) >= 0
 * 
 *     cpdef cmp(Quantity self, Quantity other):             # <<<<<<<<<<<<<<
 *         cdef int signum, error_code
 *         error_code = c.cmp_qdata(signum, self.data, other.data)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("csiquant.quantities.Quantity.cmp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_23cmp(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_23cmp(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cmp (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8csiquant_10quantities_Quantity, 1, "other", 0))) __PYX_ERR(1, 324, __pyx_L1_error)
  __pyx_r = __pyx_pf_8csiquant_10quantities_8Quantity_22cmp(((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_v_self), ((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_22cmp(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self, struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("cmp", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8csiquant_10quantities_8Quantity_cmp(__pyx_v_self, __pyx_v_other, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("csiquant.quantities.Quantity.cmp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":335
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)
 * 
 *     cpdef bint compatible(Quantity self, Quantity other):             # <<<<<<<<<<<<<<
 *         return c.eq_ddata(self.data.units.dimensions, other.data.units.dimensions)
 * 
 */

static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_25compatible(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static int __pyx_f_8csiquant_10quantities_8Quantity_compatible(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self, struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_other, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("compatible", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
    static PY_UINT64_T tp_dict_version = 0, obj_dict_version = 0;
    if (likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict && tp_dict_version == __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) && (!Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset || obj_dict_version == __PYX_GET_DICT_VERSION(_PyObject_GetDictPtr(((PyObject *)__pyx_v_self))))));
    else {
      PY_UINT64_T type_dict_guard = (likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict)) ? __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) : 0;
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_compatible); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 335, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_8csiquant_10quantities_8Quantity_25compatible)) {
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, ((PyObject *)__pyx_v_other)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_other));
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 335, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 335, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_5;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
      tp_dict_version = likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) ? __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) : 0;
      obj_dict_version = likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset) ? __PYX_GET_DICT_VERSION(_PyObject_GetDictPtr(((PyObject *)__pyx_v_self))) : 0;
      if (unlikely(type_dict_guard != tp_dict_version)) {
        tp_dict_version = obj_dict_version = 0;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
    }
    #endif
  }

  /* "csiquant/quantities.pyx":336
 * 
 *     cpdef bint compatible(Quantity self, Quantity other):
 *         return c.eq_ddata(self.data.units.dimensions, other.data.units.dimensions)             # <<<<<<<<<<<<<<
 * 
 *     cpdef r_approx(Quantity self, Quantity other, double rtol=1e-9):
 */
  __pyx_r = __pyx_f_8csiquant_6ctypes_eq_ddata(__pyx_v_self->data.units.dimensions, __pyx_v_other->data.units.dimensions);
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":335
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)
 * 
 *     cpdef bint compatible(Quantity self, Quantity other):             # <<<<<<<<<<<<<<
 *         return c.eq_ddata(self.data.units.dimensions, other.data.units.dimensions)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("csiquant.quantities.Quantity.compatible", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_25compatible(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_25compatible(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compatible (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8csiquant_10quantities_Quantity, 1, "other", 0))) __PYX_ERR(1, 335, __pyx_L1_error)
  __pyx_r = __pyx_pf_8csiquant_10quantities_8Quantity_24compatible(((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_v_self), ((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_24compatible(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self, struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("compatible", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_8csiquant_10quantities_8Quantity_compatible(__pyx_v_self, __pyx_v_other, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("csiquant.quantities.Quantity.compatible", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":338
 *         return c.eq_ddata(self.data.units.dimensions, other.data.units.dimensions)
 * 
 *     cpdef r_approx(Quantity self, Quantity other, double rtol=1e-9):             # <<<<<<<<<<<<<<
 *         cdef int error_code
 *         cdef c.UData norm_udata
 */

static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_27r_approx(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_8csiquant_10quantities_8Quantity_r_approx(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self, struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_other, int __pyx_skip_dispatch, struct __pyx_opt_args_8csiquant_10quantities_8Quantity_r_approx *__pyx_optional_args) {
  double __pyx_v_rtol = ((double)1e-9);
  int __pyx_v_error_code;
  struct __pyx_t_8csiquant_6ctypes_UData __pyx_v_norm_udata;
  double __pyx_v_self_norm;
  double __pyx_v_other_norm;
  double __pyx_v_epsilon;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("r_approx", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_rtol = __pyx_optional_args->rtol;
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
    static PY_UINT64_T tp_dict_version = 0, obj_dict_version = 0;
    if (likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict && tp_dict_version == __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) && (!Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset || obj_dict_version == __PYX_GET_DICT_VERSION(_PyObject_GetDictPtr(((PyObject *)__pyx_v_self))))));
    else {
      PY_UINT64_T type_dict_guard = (likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict)) ? __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) : 0;
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_r_approx); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 338, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_8csiquant_10quantities_8Quantity_27r_approx)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = PyFloat_FromDouble(__pyx_v_rtol); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 338, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; __pyx_t_5 = NULL;
        __pyx_t_6 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
            __pyx_t_6 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_other), __pyx_t_3};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 338, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_other), __pyx_t_3};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 338, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else
        #endif
        {
          __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 338, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          if (__pyx_t_5) {
            __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
          }
          __Pyx_INCREF(((PyObject *)__pyx_v_other));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_other));
          PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, ((PyObject *)__pyx_v_other));
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_3);
          __pyx_t_3 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 338, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
      tp_dict_version = likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) ? __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) : 0;
      obj_dict_version = likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset) ? __PYX_GET_DICT_VERSION(_PyObject_GetDictPtr(((PyObject *)__pyx_v_self))) : 0;
      if (unlikely(type_dict_guard != tp_dict_version)) {
        tp_dict_version = obj_dict_version = 0;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
    }
    #endif
  }

  /* "csiquant/quantities.pyx":343
 *         cdef double self_norm, other_norm, epsilon
 * 
 *         error_code = c.min_udata(norm_udata, self.data.units, other.data.units)             # <<<<<<<<<<<<<<
 * 
 *         if error_code == c.Success:
 */
  __pyx_v_error_code = __pyx_f_8csiquant_6ctypes_min_udata(__pyx_v_norm_udata, __pyx_v_self->data.units, __pyx_v_other->data.units);

  /* "csiquant/quantities.pyx":345
 *         error_code = c.min_udata(norm_udata, self.data.units, other.data.units)
 * 
 *         if error_code == c.Success:             # <<<<<<<<<<<<<<
 * 
 *             self_norm = c.unsafe_extract_quantity(self.data, norm_udata)
 */
  __pyx_t_8 = ((__pyx_v_error_code == __pyx_e_8csiquant_6ctypes_Success) != 0);
  if (__pyx_t_8) {

    /* "csiquant/quantities.pyx":347
 *         if error_code == c.Success:
 * 
 *             self_norm = c.unsafe_extract_quantity(self.data, norm_udata)             # <<<<<<<<<<<<<<
 *             other_norm = c.unsafe_extract_quantity(other.data, norm_udata)
 * 
 */
    __pyx_v_self_norm = __pyx_f_8csiquant_6ctypes_unsafe_extract_quantity(__pyx_v_self->data, __pyx_v_norm_udata);

    /* "csiquant/quantities.pyx":348
 * 
 *             self_norm = c.unsafe_extract_quantity(self.data, norm_udata)
 *             other_norm = c.unsafe_extract_quantity(other.data, norm_udata)             # <<<<<<<<<<<<<<
 * 
 *             epsilon = fmax(1.0, fmax(self_norm, other_norm)) * rtol
 */
    __pyx_v_other_norm = __pyx_f_8csiquant_6ctypes_unsafe_extract_quantity(__pyx_v_other->data, __pyx_v_norm_udata);

    /* "csiquant/quantities.pyx":350
 *             other_norm = c.unsafe_extract_quantity(other.data, norm_udata)
 * 
 *             epsilon = fmax(1.0, fmax(self_norm, other_norm)) * rtol             # <<<<<<<<<<<<<<
 *             return fabs(self_norm - other_norm) <= fabs(epsilon)
 * 
 */
    __pyx_v_epsilon = (fmax(1.0, fmax(__pyx_v_self_norm, __pyx_v_other_norm)) * __pyx_v_rtol);

    /* "csiquant/quantities.pyx":351
 * 
 *             epsilon = fmax(1.0, fmax(self_norm, other_norm)) * rtol
 *             return fabs(self_norm - other_norm) <= fabs(epsilon)             # <<<<<<<<<<<<<<
 * 
 *         if error_code == c.DimensionMismatch:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyBool_FromLong((fabs((__pyx_v_self_norm - __pyx_v_other_norm)) <= fabs(__pyx_v_epsilon))); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "csiquant/quantities.pyx":345
 *         error_code = c.min_udata(norm_udata, self.data.units, other.data.units)
 * 
 *         if error_code == c.Success:             # <<<<<<<<<<<<<<
 * 
 *             self_norm = c.unsafe_extract_quantity(self.data, norm_udata)
 */
  }

  /* "csiquant/quantities.pyx":353
 *             return fabs(self_norm - other_norm) <= fabs(epsilon)
 * 
 *         if error_code == c.DimensionMismatch:             # <<<<<<<<<<<<<<
 *             raise ValueError("unit mismatch")
 * 
 */
  __pyx_t_8 = ((__pyx_v_error_code == __pyx_e_8csiquant_6ctypes_DimensionMismatch) != 0);
  if (unlikely(__pyx_t_8)) {

    /* "csiquant/quantities.pyx":354
 * 
 *         if error_code == c.DimensionMismatch:
 *             raise ValueError("unit mismatch")             # <<<<<<<<<<<<<<
 * 
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 354, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 354, __pyx_L1_error)

    /* "csiquant/quantities.pyx":353
 *             return fabs(self_norm - other_norm) <= fabs(epsilon)
 * 
 *         if error_code == c.DimensionMismatch:             # <<<<<<<<<<<<<<
 *             raise ValueError("unit mismatch")
 * 
 */
  }

  /* "csiquant/quantities.pyx":356
 *             raise ValueError("unit mismatch")
 * 
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)             # <<<<<<<<<<<<<<
 * 
 *     cpdef a_approx(Quantity self, Quantity other, double atol=1e-6):
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_error_code); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyUnicode_Format(__pyx_kp_u_Unknown_Error_Occurred_i, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_RuntimeError, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 356, __pyx_L1_error)

  /* "csiquant/quantities.pyx":338
 *         return c.eq_ddata(self.data.units.dimensions, other.data.units.dimensions)
 * 
 *     cpdef r_approx(Quantity self, Quantity other, double rtol=1e-9):             # <<<<<<<<<<<<<<
 *         cdef int error_code
 *         cdef c.UData norm_udata
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("csiquant.quantities.Quantity.r_approx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_27r_approx(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_27r_approx(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_other = 0;
  double __pyx_v_rtol;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("r_approx (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_other,&__pyx_n_s_rtol,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_other)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rtol);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "r_approx") < 0)) __PYX_ERR(1, 338, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_other = ((struct __pyx_obj_8csiquant_10quantities_Quantity *)values[0]);
    if (values[1]) {
      __pyx_v_rtol = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_rtol == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 338, __pyx_L3_error)
    } else {
      __pyx_v_rtol = ((double)1e-9);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("r_approx", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 338, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("csiquant.quantities.Quantity.r_approx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8csiquant_10quantities_Quantity, 1, "other", 0))) __PYX_ERR(1, 338, __pyx_L1_error)
  __pyx_r = __pyx_pf_8csiquant_10quantities_8Quantity_26r_approx(((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_v_self), __pyx_v_other, __pyx_v_rtol);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_26r_approx(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self, struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_other, double __pyx_v_rtol) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_8csiquant_10quantities_8Quantity_r_approx __pyx_t_2;
  __Pyx_RefNannySetupContext("r_approx", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.rtol = __pyx_v_rtol;
  __pyx_t_1 = __pyx_vtabptr_8csiquant_10quantities_Quantity->r_approx(__pyx_v_self, __pyx_v_other, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("csiquant.quantities.Quantity.r_approx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":358
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)
 * 
 *     cpdef a_approx(Quantity self, Quantity other, double atol=1e-6):             # <<<<<<<<<<<<<<
 *         cdef int error_code
 *         cdef c.UData norm_udata
 */

static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_29a_approx(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_8csiquant_10quantities_8Quantity_a_approx(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self, struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_other, int __pyx_skip_dispatch, struct __pyx_opt_args_8csiquant_10quantities_8Quantity_a_approx *__pyx_optional_args) {
  double __pyx_v_atol = ((double)1e-6);
  int __pyx_v_error_code;
  struct __pyx_t_8csiquant_6ctypes_UData __pyx_v_norm_udata;
  double __pyx_v_self_norm;
  double __pyx_v_other_norm;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("a_approx", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_atol = __pyx_optional_args->atol;
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
    static PY_UINT64_T tp_dict_version = 0, obj_dict_version = 0;
    if (likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict && tp_dict_version == __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) && (!Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset || obj_dict_version == __PYX_GET_DICT_VERSION(_PyObject_GetDictPtr(((PyObject *)__pyx_v_self))))));
    else {
      PY_UINT64_T type_dict_guard = (likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict)) ? __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) : 0;
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_a_approx); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 358, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_8csiquant_10quantities_8Quantity_29a_approx)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = PyFloat_FromDouble(__pyx_v_atol); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 358, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; __pyx_t_5 = NULL;
        __pyx_t_6 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
            __pyx_t_6 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_other), __pyx_t_3};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 358, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_other), __pyx_t_3};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 358, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else
        #endif
        {
          __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 358, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          if (__pyx_t_5) {
            __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
          }
          __Pyx_INCREF(((PyObject *)__pyx_v_other));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_other));
          PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, ((PyObject *)__pyx_v_other));
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_3);
          __pyx_t_3 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 358, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
      tp_dict_version = likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) ? __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) : 0;
      obj_dict_version = likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset) ? __PYX_GET_DICT_VERSION(_PyObject_GetDictPtr(((PyObject *)__pyx_v_self))) : 0;
      if (unlikely(type_dict_guard != tp_dict_version)) {
        tp_dict_version = obj_dict_version = 0;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
    }
    #endif
  }

  /* "csiquant/quantities.pyx":363
 *         cdef double self_norm, other_norm
 * 
 *         error_code = c.min_udata(norm_udata, self.data.units, other.data.units)             # <<<<<<<<<<<<<<
 *         if error_code == c.Success:
 *             self_norm = c.unsafe_extract_quantity(self.data, norm_udata)
 */
  __pyx_v_error_code = __pyx_f_8csiquant_6ctypes_min_udata(__pyx_v_norm_udata, __pyx_v_self->data.units, __pyx_v_other->data.units);

  /* "csiquant/quantities.pyx":364
 * 
 *         error_code = c.min_udata(norm_udata, self.data.units, other.data.units)
 *         if error_code == c.Success:             # <<<<<<<<<<<<<<
 *             self_norm = c.unsafe_extract_quantity(self.data, norm_udata)
 *             other_norm = c.unsafe_extract_quantity(other.data, norm_udata)
 */
  __pyx_t_8 = ((__pyx_v_error_code == __pyx_e_8csiquant_6ctypes_Success) != 0);
  if (__pyx_t_8) {

    /* "csiquant/quantities.pyx":365
 *         error_code = c.min_udata(norm_udata, self.data.units, other.data.units)
 *         if error_code == c.Success:
 *             self_norm = c.unsafe_extract_quantity(self.data, norm_udata)             # <<<<<<<<<<<<<<
 *             other_norm = c.unsafe_extract_quantity(other.data, norm_udata)
 *             return fabs(self_norm - other_norm) <= fabs(atol)
 */
    __pyx_v_self_norm = __pyx_f_8csiquant_6ctypes_unsafe_extract_quantity(__pyx_v_self->data, __pyx_v_norm_udata);

    /* "csiquant/quantities.pyx":366
 *         if error_code == c.Success:
 *             self_norm = c.unsafe_extract_quantity(self.data, norm_udata)
 *             other_norm = c.unsafe_extract_quantity(other.data, norm_udata)             # <<<<<<<<<<<<<<
 *             return fabs(self_norm - other_norm) <= fabs(atol)
 * 
 */
    __pyx_v_other_norm = __pyx_f_8csiquant_6ctypes_unsafe_extract_quantity(__pyx_v_other->data, __pyx_v_norm_udata);

    /* "csiquant/quantities.pyx":367
 *             self_norm = c.unsafe_extract_quantity(self.data, norm_udata)
 *             other_norm = c.unsafe_extract_quantity(other.data, norm_udata)
 *             return fabs(self_norm - other_norm) <= fabs(atol)             # <<<<<<<<<<<<<<
 * 
 *         if error_code == c.DimensionMismatch:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyBool_FromLong((fabs((__pyx_v_self_norm - __pyx_v_other_norm)) <= fabs(__pyx_v_atol))); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 367, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "csiquant/quantities.pyx":364
 * 
 *         error_code = c.min_udata(norm_udata, self.data.units, other.data.units)
 *         if error_code == c.Success:             # <<<<<<<<<<<<<<
 *             self_norm = c.unsafe_extract_quantity(self.data, norm_udata)
 *             other_norm = c.unsafe_extract_quantity(other.data, norm_udata)
 */
  }

  /* "csiquant/quantities.pyx":369
 *             return fabs(self_norm - other_norm) <= fabs(atol)
 * 
 *         if error_code == c.DimensionMismatch:             # <<<<<<<<<<<<<<
 *             raise ValueError("unit mismatch")
 * 
 */
  __pyx_t_8 = ((__pyx_v_error_code == __pyx_e_8csiquant_6ctypes_DimensionMismatch) != 0);
  if (unlikely(__pyx_t_8)) {

    /* "csiquant/quantities.pyx":370
 * 
 *         if error_code == c.DimensionMismatch:
 *             raise ValueError("unit mismatch")             # <<<<<<<<<<<<<<
 * 
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 370, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 370, __pyx_L1_error)

    /* "csiquant/quantities.pyx":369
 *             return fabs(self_norm - other_norm) <= fabs(atol)
 * 
 *         if error_code == c.DimensionMismatch:             # <<<<<<<<<<<<<<
 *             raise ValueError("unit mismatch")
 * 
 */
  }

  /* "csiquant/quantities.pyx":372
 *             raise ValueError("unit mismatch")
 * 
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_error_code); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyUnicode_Format(__pyx_kp_u_Unknown_Error_Occurred_i, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_RuntimeError, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 372, __pyx_L1_error)

  /* "csiquant/quantities.pyx":358
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)
 * 
 *     cpdef a_approx(Quantity self, Quantity other, double atol=1e-6):             # <<<<<<<<<<<<<<
 *         cdef int error_code
 *         cdef c.UData norm_udata
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("csiquant.quantities.Quantity.a_approx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_29a_approx(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_29a_approx(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_other = 0;
  double __pyx_v_atol;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("a_approx (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_other,&__pyx_n_s_atol,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_other)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_atol);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "a_approx") < 0)) __PYX_ERR(1, 358, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_other = ((struct __pyx_obj_8csiquant_10quantities_Quantity *)values[0]);
    if (values[1]) {
      __pyx_v_atol = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_atol == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 358, __pyx_L3_error)
    } else {
      __pyx_v_atol = ((double)1e-6);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("a_approx", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 358, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("csiquant.quantities.Quantity.a_approx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8csiquant_10quantities_Quantity, 1, "other", 0))) __PYX_ERR(1, 358, __pyx_L1_error)
  __pyx_r = __pyx_pf_8csiquant_10quantities_8Quantity_28a_approx(((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_v_self), __pyx_v_other, __pyx_v_atol);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_28a_approx(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self, struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_other, double __pyx_v_atol) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_8csiquant_10quantities_8Quantity_a_approx __pyx_t_2;
  __Pyx_RefNannySetupContext("a_approx", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.atol = __pyx_v_atol;
  __pyx_t_1 = __pyx_vtabptr_8csiquant_10quantities_Quantity->a_approx(__pyx_v_self, __pyx_v_other, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("csiquant.quantities.Quantity.a_approx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":375
 * 
 * 
 *     cpdef q_approx(Quantity self, Quantity other, Quantity qtol):             # <<<<<<<<<<<<<<
 *         cdef int error_code1, error_code2
 *         cdef double self_val, other_val
 */

static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_31q_approx(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_8csiquant_10quantities_8Quantity_q_approx(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self, struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_other, struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_qtol, int __pyx_skip_dispatch) {
  int __pyx_v_error_code1;
  int __pyx_v_error_code2;
  double __pyx_v_self_val;
  double __pyx_v_other_val;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("q_approx", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
    static PY_UINT64_T tp_dict_version = 0, obj_dict_version = 0;
    if (likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict && tp_dict_version == __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) && (!Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset || obj_dict_version == __PYX_GET_DICT_VERSION(_PyObject_GetDictPtr(((PyObject *)__pyx_v_self))))));
    else {
      PY_UINT64_T type_dict_guard = (likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict)) ? __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) : 0;
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_q_approx); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 375, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_8csiquant_10quantities_8Quantity_31q_approx)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[3] = {__pyx_t_4, ((PyObject *)__pyx_v_other), ((PyObject *)__pyx_v_qtol)};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 375, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[3] = {__pyx_t_4, ((PyObject *)__pyx_v_other), ((PyObject *)__pyx_v_qtol)};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 375, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        {
          __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 375, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          if (__pyx_t_4) {
            __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
          }
          __Pyx_INCREF(((PyObject *)__pyx_v_other));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_other));
          PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, ((PyObject *)__pyx_v_other));
          __Pyx_INCREF(((PyObject *)__pyx_v_qtol));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_qtol));
          PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, ((PyObject *)__pyx_v_qtol));
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 375, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
      tp_dict_version = likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) ? __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) : 0;
      obj_dict_version = likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset) ? __PYX_GET_DICT_VERSION(_PyObject_GetDictPtr(((PyObject *)__pyx_v_self))) : 0;
      if (unlikely(type_dict_guard != tp_dict_version)) {
        tp_dict_version = obj_dict_version = 0;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
    }
    #endif
  }

  /* "csiquant/quantities.pyx":378
 *         cdef int error_code1, error_code2
 *         cdef double self_val, other_val
 *         error_code1 = c.extract_quantity(self_val, self.data, qtol.data.units)             # <<<<<<<<<<<<<<
 *         error_code2 = c.extract_quantity(other_val, other.data, qtol.data.units)
 * 
 */
  __pyx_v_error_code1 = __pyx_f_8csiquant_6ctypes_extract_quantity(__pyx_v_self_val, __pyx_v_self->data, __pyx_v_qtol->data.units);

  /* "csiquant/quantities.pyx":379
 *         cdef double self_val, other_val
 *         error_code1 = c.extract_quantity(self_val, self.data, qtol.data.units)
 *         error_code2 = c.extract_quantity(other_val, other.data, qtol.data.units)             # <<<<<<<<<<<<<<
 * 
 *         if error_code1 | error_code2 == c.Success:
 */
  __pyx_v_error_code2 = __pyx_f_8csiquant_6ctypes_extract_quantity(__pyx_v_other_val, __pyx_v_other->data, __pyx_v_qtol->data.units);

  /* "csiquant/quantities.pyx":381
 *         error_code2 = c.extract_quantity(other_val, other.data, qtol.data.units)
 * 
 *         if error_code1 | error_code2 == c.Success:             # <<<<<<<<<<<<<<
 *             return fabs(self_val - other_val) <= fabs(qtol.data.quantity)
 * 
 */
  __pyx_t_7 = (((__pyx_v_error_code1 | __pyx_v_error_code2) == __pyx_e_8csiquant_6ctypes_Success) != 0);
  if (__pyx_t_7) {

    /* "csiquant/quantities.pyx":382
 * 
 *         if error_code1 | error_code2 == c.Success:
 *             return fabs(self_val - other_val) <= fabs(qtol.data.quantity)             # <<<<<<<<<<<<<<
 * 
 *         if error_code1 == c.DimensionMismatch:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyBool_FromLong((fabs((__pyx_v_self_val - __pyx_v_other_val)) <= fabs(__pyx_v_qtol->data.quantity))); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 382, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "csiquant/quantities.pyx":381
 *         error_code2 = c.extract_quantity(other_val, other.data, qtol.data.units)
 * 
 *         if error_code1 | error_code2 == c.Success:             # <<<<<<<<<<<<<<
 *             return fabs(self_val - other_val) <= fabs(qtol.data.quantity)
 * 
 */
  }

  /* "csiquant/quantities.pyx":384
 *             return fabs(self_val - other_val) <= fabs(qtol.data.quantity)
 * 
 *         if error_code1 == c.DimensionMismatch:             # <<<<<<<<<<<<<<
 *             raise ValueError("unit mismatch (lhs)")
 *         if error_code2 == c.DimensionMismatch:
 */
  __pyx_t_7 = ((__pyx_v_error_code1 == __pyx_e_8csiquant_6ctypes_DimensionMismatch) != 0);
  if (unlikely(__pyx_t_7)) {

    /* "csiquant/quantities.pyx":385
 * 
 *         if error_code1 == c.DimensionMismatch:
 *             raise ValueError("unit mismatch (lhs)")             # <<<<<<<<<<<<<<
 *         if error_code2 == c.DimensionMismatch:
 *             raise ValueError("unit mismatch (rhs)")
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 385, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 385, __pyx_L1_error)

    /* "csiquant/quantities.pyx":384
 *             return fabs(self_val - other_val) <= fabs(qtol.data.quantity)
 * 
 *         if error_code1 == c.DimensionMismatch:             # <<<<<<<<<<<<<<
 *             raise ValueError("unit mismatch (lhs)")
 *         if error_code2 == c.DimensionMismatch:
 */
  }

  /* "csiquant/quantities.pyx":386
 *         if error_code1 == c.DimensionMismatch:
 *             raise ValueError("unit mismatch (lhs)")
 *         if error_code2 == c.DimensionMismatch:             # <<<<<<<<<<<<<<
 *             raise ValueError("unit mismatch (rhs)")
 * 
 */
  __pyx_t_7 = ((__pyx_v_error_code2 == __pyx_e_8csiquant_6ctypes_DimensionMismatch) != 0);
  if (unlikely(__pyx_t_7)) {

    /* "csiquant/quantities.pyx":387
 *             raise ValueError("unit mismatch (lhs)")
 *         if error_code2 == c.DimensionMismatch:
 *             raise ValueError("unit mismatch (rhs)")             # <<<<<<<<<<<<<<
 * 
 *         raise RuntimeError("Unknown Error Occurred: %i" % (error_code1 | error_code2))
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 387, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 387, __pyx_L1_error)

    /* "csiquant/quantities.pyx":386
 *         if error_code1 == c.DimensionMismatch:
 *             raise ValueError("unit mismatch (lhs)")
 *         if error_code2 == c.DimensionMismatch:             # <<<<<<<<<<<<<<
 *             raise ValueError("unit mismatch (rhs)")
 * 
 */
  }

  /* "csiquant/quantities.pyx":389
 *             raise ValueError("unit mismatch (rhs)")
 * 
 *         raise RuntimeError("Unknown Error Occurred: %i" % (error_code1 | error_code2))             # <<<<<<<<<<<<<<
 * 
 *     """
 */
  __pyx_t_1 = __Pyx_PyInt_From_int((__pyx_v_error_code1 | __pyx_v_error_code2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyUnicode_Format(__pyx_kp_u_Unknown_Error_Occurred_i, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_RuntimeError, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 389, __pyx_L1_error)

  /* "csiquant/quantities.pyx":375
 * 
 * 
 *     cpdef q_approx(Quantity self, Quantity other, Quantity qtol):             # <<<<<<<<<<<<<<
 *         cdef int error_code1, error_code2
 *         cdef double self_val, other_val
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("csiquant.quantities.Quantity.q_approx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_31q_approx(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_31q_approx(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_other = 0;
  struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_qtol = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("q_approx (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_other,&__pyx_n_s_qtol,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_other)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_qtol)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("q_approx", 1, 2, 2, 1); __PYX_ERR(1, 375, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "q_approx") < 0)) __PYX_ERR(1, 375, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_other = ((struct __pyx_obj_8csiquant_10quantities_Quantity *)values[0]);
    __pyx_v_qtol = ((struct __pyx_obj_8csiquant_10quantities_Quantity *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("q_approx", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 375, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("csiquant.quantities.Quantity.q_approx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8csiquant_10quantities_Quantity, 1, "other", 0))) __PYX_ERR(1, 375, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_qtol), __pyx_ptype_8csiquant_10quantities_Quantity, 1, "qtol", 0))) __PYX_ERR(1, 375, __pyx_L1_error)
  __pyx_r = __pyx_pf_8csiquant_10quantities_8Quantity_30q_approx(((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_v_self), __pyx_v_other, __pyx_v_qtol);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_30q_approx(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self, struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_other, struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_qtol) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("q_approx", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8csiquant_10quantities_8Quantity_q_approx(__pyx_v_self, __pyx_v_other, __pyx_v_qtol, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("csiquant.quantities.Quantity.q_approx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":395
 *     """
 * 
 *     def __add__(Quantity lhs not None, Quantity rhs not None):             # <<<<<<<<<<<<<<
 *         cdef int error_code
 *         cdef Quantity ret = Quantity.__new__(Quantity)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_33__add__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_33__add__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__add__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_lhs), __pyx_ptype_8csiquant_10quantities_Quantity, 0, "lhs", 0))) __PYX_ERR(1, 395, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rhs), __pyx_ptype_8csiquant_10quantities_Quantity, 0, "rhs", 0))) __PYX_ERR(1, 395, __pyx_L1_error)
  __pyx_r = __pyx_pf_8csiquant_10quantities_8Quantity_32__add__(((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_v_lhs), ((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_v_rhs));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_32__add__(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_lhs, struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_rhs) {
  int __pyx_v_error_code;
  struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_ret = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__add__", 0);

  /* "csiquant/quantities.pyx":397
 *     def __add__(Quantity lhs not None, Quantity rhs not None):
 *         cdef int error_code
 *         cdef Quantity ret = Quantity.__new__(Quantity)             # <<<<<<<<<<<<<<
 *         error_code = c.add_qdata(ret.data, lhs.data, rhs.data)
 *         if error_code == c.Success:
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_8csiquant_10quantities_Quantity(((PyTypeObject *)__pyx_ptype_8csiquant_10quantities_Quantity), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 397, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_ret = ((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "csiquant/quantities.pyx":398
 *         cdef int error_code
 *         cdef Quantity ret = Quantity.__new__(Quantity)
 *         error_code = c.add_qdata(ret.data, lhs.data, rhs.data)             # <<<<<<<<<<<<<<
 *         if error_code == c.Success:
 *             return ret
 */
  __pyx_v_error_code = __pyx_f_8csiquant_6ctypes_add_qdata(__pyx_v_ret->data, __pyx_v_lhs->data, __pyx_v_rhs->data);

  /* "csiquant/quantities.pyx":399
 *         cdef Quantity ret = Quantity.__new__(Quantity)
 *         error_code = c.add_qdata(ret.data, lhs.data, rhs.data)
 *         if error_code == c.Success:             # <<<<<<<<<<<<<<
 *             return ret
 * 
 */
  __pyx_t_2 = ((__pyx_v_error_code == __pyx_e_8csiquant_6ctypes_Success) != 0);
  if (__pyx_t_2) {

    /* "csiquant/quantities.pyx":400
 *         error_code = c.add_qdata(ret.data, lhs.data, rhs.data)
 *         if error_code == c.Success:
 *             return ret             # <<<<<<<<<<<<<<
 * 
 *         if error_code == c.DimensionMismatch:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_ret));
    __pyx_r = ((PyObject *)__pyx_v_ret);
    goto __pyx_L0;

    /* "csiquant/quantities.pyx":399
 *         cdef Quantity ret = Quantity.__new__(Quantity)
 *         error_code = c.add_qdata(ret.data, lhs.data, rhs.data)
 *         if error_code == c.Success:             # <<<<<<<<<<<<<<
 *             return ret
 * 
 */
  }

  /* "csiquant/quantities.pyx":402
 *             return ret
 * 
 *         if error_code == c.DimensionMismatch:             # <<<<<<<<<<<<<<
 *             raise ValueError("unit mismatch")
 * 
 */
  __pyx_t_2 = ((__pyx_v_error_code == __pyx_e_8csiquant_6ctypes_DimensionMismatch) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "csiquant/quantities.pyx":403
 * 
 *         if error_code == c.DimensionMismatch:
 *             raise ValueError("unit mismatch")             # <<<<<<<<<<<<<<
 * 
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 403, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 403, __pyx_L1_error)

    /* "csiquant/quantities.pyx":402
 *             return ret
 * 
 *         if error_code == c.DimensionMismatch:             # <<<<<<<<<<<<<<
 *             raise ValueError("unit mismatch")
 * 
 */
  }

  /* "csiquant/quantities.pyx":405
 *             raise ValueError("unit mismatch")
 * 
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)             # <<<<<<<<<<<<<<
 * 
 *     def __sub__(Quantity lhs not None, Quantity rhs not None):
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_error_code); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_Unknown_Error_Occurred_i, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_RuntimeError, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 405, __pyx_L1_error)

  /* "csiquant/quantities.pyx":395
 *     """
 * 
 *     def __add__(Quantity lhs not None, Quantity rhs not None):             # <<<<<<<<<<<<<<
 *         cdef int error_code
 *         cdef Quantity ret = Quantity.__new__(Quantity)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("csiquant.quantities.Quantity.__add__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":407
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)
 * 
 *     def __sub__(Quantity lhs not None, Quantity rhs not None):             # <<<<<<<<<<<<<<
 *         cdef int error_code
 *         cdef Quantity ret = Quantity.__new__(Quantity)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_35__sub__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_35__sub__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__sub__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_lhs), __pyx_ptype_8csiquant_10quantities_Quantity, 0, "lhs", 0))) __PYX_ERR(1, 407, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rhs), __pyx_ptype_8csiquant_10quantities_Quantity, 0, "rhs", 0))) __PYX_ERR(1, 407, __pyx_L1_error)
  __pyx_r = __pyx_pf_8csiquant_10quantities_8Quantity_34__sub__(((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_v_lhs), ((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_v_rhs));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_34__sub__(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_lhs, struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_rhs) {
  int __pyx_v_error_code;
  struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_ret = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__sub__", 0);

  /* "csiquant/quantities.pyx":409
 *     def __sub__(Quantity lhs not None, Quantity rhs not None):
 *         cdef int error_code
 *         cdef Quantity ret = Quantity.__new__(Quantity)             # <<<<<<<<<<<<<<
 *         error_code = c.sub_qdata(ret.data, lhs.data, rhs.data)
 *         if error_code == c.Success:
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_8csiquant_10quantities_Quantity(((PyTypeObject *)__pyx_ptype_8csiquant_10quantities_Quantity), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 409, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_ret = ((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "csiquant/quantities.pyx":410
 *         cdef int error_code
 *         cdef Quantity ret = Quantity.__new__(Quantity)
 *         error_code = c.sub_qdata(ret.data, lhs.data, rhs.data)             # <<<<<<<<<<<<<<
 *         if error_code == c.Success:
 *             return ret
 */
  __pyx_v_error_code = __pyx_f_8csiquant_6ctypes_sub_qdata(__pyx_v_ret->data, __pyx_v_lhs->data, __pyx_v_rhs->data);

  /* "csiquant/quantities.pyx":411
 *         cdef Quantity ret = Quantity.__new__(Quantity)
 *         error_code = c.sub_qdata(ret.data, lhs.data, rhs.data)
 *         if error_code == c.Success:             # <<<<<<<<<<<<<<
 *             return ret
 * 
 */
  __pyx_t_2 = ((__pyx_v_error_code == __pyx_e_8csiquant_6ctypes_Success) != 0);
  if (__pyx_t_2) {

    /* "csiquant/quantities.pyx":412
 *         error_code = c.sub_qdata(ret.data, lhs.data, rhs.data)
 *         if error_code == c.Success:
 *             return ret             # <<<<<<<<<<<<<<
 * 
 *         if error_code == c.DimensionMismatch:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_ret));
    __pyx_r = ((PyObject *)__pyx_v_ret);
    goto __pyx_L0;

    /* "csiquant/quantities.pyx":411
 *         cdef Quantity ret = Quantity.__new__(Quantity)
 *         error_code = c.sub_qdata(ret.data, lhs.data, rhs.data)
 *         if error_code == c.Success:             # <<<<<<<<<<<<<<
 *             return ret
 * 
 */
  }

  /* "csiquant/quantities.pyx":414
 *             return ret
 * 
 *         if error_code == c.DimensionMismatch:             # <<<<<<<<<<<<<<
 *             raise ValueError("unit mismatch")
 * 
 */
  __pyx_t_2 = ((__pyx_v_error_code == __pyx_e_8csiquant_6ctypes_DimensionMismatch) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "csiquant/quantities.pyx":415
 * 
 *         if error_code == c.DimensionMismatch:
 *             raise ValueError("unit mismatch")             # <<<<<<<<<<<<<<
 * 
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 415, __pyx_L1_error)

    /* "csiquant/quantities.pyx":414
 *             return ret
 * 
 *         if error_code == c.DimensionMismatch:             # <<<<<<<<<<<<<<
 *             raise ValueError("unit mismatch")
 * 
 */
  }

  /* "csiquant/quantities.pyx":417
 *             raise ValueError("unit mismatch")
 * 
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)             # <<<<<<<<<<<<<<
 * 
 *     def __mul__(lhs not None, rhs not None):
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_error_code); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_Unknown_Error_Occurred_i, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_RuntimeError, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 417, __pyx_L1_error)

  /* "csiquant/quantities.pyx":407
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)
 * 
 *     def __sub__(Quantity lhs not None, Quantity rhs not None):             # <<<<<<<<<<<<<<
 *         cdef int error_code
 *         cdef Quantity ret = Quantity.__new__(Quantity)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("csiquant.quantities.Quantity.__sub__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":419
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)
 * 
 *     def __mul__(lhs not None, rhs not None):             # <<<<<<<<<<<<<<
 *         cdef Quantity ret = Quantity.__new__(Quantity)
 *         cdef c.QData other
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_37__mul__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_37__mul__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__mul__ (wrapper)", 0);
  if (unlikely(((PyObject *)__pyx_v_lhs) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "lhs"); __PYX_ERR(1, 419, __pyx_L1_error)
  }
  if (unlikely(((PyObject *)__pyx_v_rhs) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "rhs"); __PYX_ERR(1, 419, __pyx_L1_error)
  }
  __pyx_r = __pyx_pf_8csiquant_10quantities_8Quantity_36__mul__(((PyObject *)__pyx_v_lhs), ((PyObject *)__pyx_v_rhs));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_36__mul__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_ret = 0;
  struct __pyx_t_8csiquant_6ctypes_QData __pyx_v_other;
  int __pyx_v_operand_code;
  int __pyx_v_error_code;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__mul__", 0);

  /* "csiquant/quantities.pyx":420
 * 
 *     def __mul__(lhs not None, rhs not None):
 *         cdef Quantity ret = Quantity.__new__(Quantity)             # <<<<<<<<<<<<<<
 *         cdef c.QData other
 *         cdef int operand_code, error_code
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_8csiquant_10quantities_Quantity(((PyTypeObject *)__pyx_ptype_8csiquant_10quantities_Quantity), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 420, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_ret = ((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "csiquant/quantities.pyx":423
 *         cdef c.QData other
 *         cdef int operand_code, error_code
 *         operand_code = parse_qoperand(ret.data, lhs) | parse_qoperand(other, rhs)             # <<<<<<<<<<<<<<
 *         if operand_code & c.OBJECT:
 *             return NotImplemented
 */
  __pyx_v_operand_code = (__pyx_f_8csiquant_10quantities_parse_qoperand(__pyx_v_ret->data, __pyx_v_lhs) | __pyx_f_8csiquant_10quantities_parse_qoperand(__pyx_v_other, __pyx_v_rhs));

  /* "csiquant/quantities.pyx":424
 *         cdef int operand_code, error_code
 *         operand_code = parse_qoperand(ret.data, lhs) | parse_qoperand(other, rhs)
 *         if operand_code & c.OBJECT:             # <<<<<<<<<<<<<<
 *             return NotImplemented
 * 
 */
  __pyx_t_2 = ((__pyx_v_operand_code & __pyx_e_8csiquant_6ctypes_OBJECT) != 0);
  if (__pyx_t_2) {

    /* "csiquant/quantities.pyx":425
 *         operand_code = parse_qoperand(ret.data, lhs) | parse_qoperand(other, rhs)
 *         if operand_code & c.OBJECT:
 *             return NotImplemented             # <<<<<<<<<<<<<<
 * 
 *         error_code = c.mul_qdata(ret.data, ret.data, other)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;

    /* "csiquant/quantities.pyx":424
 *         cdef int operand_code, error_code
 *         operand_code = parse_qoperand(ret.data, lhs) | parse_qoperand(other, rhs)
 *         if operand_code & c.OBJECT:             # <<<<<<<<<<<<<<
 *             return NotImplemented
 * 
 */
  }

  /* "csiquant/quantities.pyx":427
 *             return NotImplemented
 * 
 *         error_code = c.mul_qdata(ret.data, ret.data, other)             # <<<<<<<<<<<<<<
 *         if error_code == c.Success:
 *             return ret
 */
  __pyx_v_error_code = __pyx_f_8csiquant_6ctypes_mul_qdata(__pyx_v_ret->data, __pyx_v_ret->data, __pyx_v_other);

  /* "csiquant/quantities.pyx":428
 * 
 *         error_code = c.mul_qdata(ret.data, ret.data, other)
 *         if error_code == c.Success:             # <<<<<<<<<<<<<<
 *             return ret
 * 
 */
  __pyx_t_2 = ((__pyx_v_error_code == __pyx_e_8csiquant_6ctypes_Success) != 0);
  if (__pyx_t_2) {

    /* "csiquant/quantities.pyx":429
 *         error_code = c.mul_qdata(ret.data, ret.data, other)
 *         if error_code == c.Success:
 *             return ret             # <<<<<<<<<<<<<<
 * 
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_ret));
    __pyx_r = ((PyObject *)__pyx_v_ret);
    goto __pyx_L0;

    /* "csiquant/quantities.pyx":428
 * 
 *         error_code = c.mul_qdata(ret.data, ret.data, other)
 *         if error_code == c.Success:             # <<<<<<<<<<<<<<
 *             return ret
 * 
 */
  }

  /* "csiquant/quantities.pyx":431
 *             return ret
 * 
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)             # <<<<<<<<<<<<<<
 * 
 *     def __truediv__(lhs not None, rhs not None):
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_error_code); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_Unknown_Error_Occurred_i, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_RuntimeError, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 431, __pyx_L1_error)

  /* "csiquant/quantities.pyx":419
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)
 * 
 *     def __mul__(lhs not None, rhs not None):             # <<<<<<<<<<<<<<
 *         cdef Quantity ret = Quantity.__new__(Quantity)
 *         cdef c.QData other
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("csiquant.quantities.Quantity.__mul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":433
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)
 * 
 *     def __truediv__(lhs not None, rhs not None):             # <<<<<<<<<<<<<<
 *         cdef Quantity ret = Quantity.__new__(Quantity)
 *         cdef c.QData other
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_39__truediv__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_39__truediv__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__truediv__ (wrapper)", 0);
  if (unlikely(((PyObject *)__pyx_v_lhs) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "lhs"); __PYX_ERR(1, 433, __pyx_L1_error)
  }
  if (unlikely(((PyObject *)__pyx_v_rhs) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "rhs"); __PYX_ERR(1, 433, __pyx_L1_error)
  }
  __pyx_r = __pyx_pf_8csiquant_10quantities_8Quantity_38__truediv__(((PyObject *)__pyx_v_lhs), ((PyObject *)__pyx_v_rhs));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_38__truediv__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_ret = 0;
  struct __pyx_t_8csiquant_6ctypes_QData __pyx_v_other;
  int __pyx_v_operand_code;
  int __pyx_v_error_code;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__truediv__", 0);

  /* "csiquant/quantities.pyx":434
 * 
 *     def __truediv__(lhs not None, rhs not None):
 *         cdef Quantity ret = Quantity.__new__(Quantity)             # <<<<<<<<<<<<<<
 *         cdef c.QData other
 *         cdef int operand_code, error_code
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_8csiquant_10quantities_Quantity(((PyTypeObject *)__pyx_ptype_8csiquant_10quantities_Quantity), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 434, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_ret = ((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "csiquant/quantities.pyx":437
 *         cdef c.QData other
 *         cdef int operand_code, error_code
 *         operand_code = parse_qoperand(ret.data, lhs) | parse_qoperand(other, rhs)             # <<<<<<<<<<<<<<
 *         if operand_code & c.OBJECT:
 *             return NotImplemented
 */
  __pyx_v_operand_code = (__pyx_f_8csiquant_10quantities_parse_qoperand(__pyx_v_ret->data, __pyx_v_lhs) | __pyx_f_8csiquant_10quantities_parse_qoperand(__pyx_v_other, __pyx_v_rhs));

  /* "csiquant/quantities.pyx":438
 *         cdef int operand_code, error_code
 *         operand_code = parse_qoperand(ret.data, lhs) | parse_qoperand(other, rhs)
 *         if operand_code & c.OBJECT:             # <<<<<<<<<<<<<<
 *             return NotImplemented
 *         error_code = c.div_qdata(ret.data, ret.data, other)
 */
  __pyx_t_2 = ((__pyx_v_operand_code & __pyx_e_8csiquant_6ctypes_OBJECT) != 0);
  if (__pyx_t_2) {

    /* "csiquant/quantities.pyx":439
 *         operand_code = parse_qoperand(ret.data, lhs) | parse_qoperand(other, rhs)
 *         if operand_code & c.OBJECT:
 *             return NotImplemented             # <<<<<<<<<<<<<<
 *         error_code = c.div_qdata(ret.data, ret.data, other)
 *         if error_code == c.Success:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;

    /* "csiquant/quantities.pyx":438
 *         cdef int operand_code, error_code
 *         operand_code = parse_qoperand(ret.data, lhs) | parse_qoperand(other, rhs)
 *         if operand_code & c.OBJECT:             # <<<<<<<<<<<<<<
 *             return NotImplemented
 *         error_code = c.div_qdata(ret.data, ret.data, other)
 */
  }

  /* "csiquant/quantities.pyx":440
 *         if operand_code & c.OBJECT:
 *             return NotImplemented
 *         error_code = c.div_qdata(ret.data, ret.data, other)             # <<<<<<<<<<<<<<
 *         if error_code == c.Success:
 *             return ret
 */
  __pyx_v_error_code = __pyx_f_8csiquant_6ctypes_div_qdata(__pyx_v_ret->data, __pyx_v_ret->data, __pyx_v_other);

  /* "csiquant/quantities.pyx":441
 *             return NotImplemented
 *         error_code = c.div_qdata(ret.data, ret.data, other)
 *         if error_code == c.Success:             # <<<<<<<<<<<<<<
 *             return ret
 * 
 */
  __pyx_t_2 = ((__pyx_v_error_code == __pyx_e_8csiquant_6ctypes_Success) != 0);
  if (__pyx_t_2) {

    /* "csiquant/quantities.pyx":442
 *         error_code = c.div_qdata(ret.data, ret.data, other)
 *         if error_code == c.Success:
 *             return ret             # <<<<<<<<<<<<<<
 * 
 *         if error_code == c.ZeroDiv:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_ret));
    __pyx_r = ((PyObject *)__pyx_v_ret);
    goto __pyx_L0;

    /* "csiquant/quantities.pyx":441
 *             return NotImplemented
 *         error_code = c.div_qdata(ret.data, ret.data, other)
 *         if error_code == c.Success:             # <<<<<<<<<<<<<<
 *             return ret
 * 
 */
  }

  /* "csiquant/quantities.pyx":444
 *             return ret
 * 
 *         if error_code == c.ZeroDiv:             # <<<<<<<<<<<<<<
 *             raise ZeroDivisionError()
 * 
 */
  __pyx_t_2 = ((__pyx_v_error_code == __pyx_e_8csiquant_6ctypes_ZeroDiv) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "csiquant/quantities.pyx":445
 * 
 *         if error_code == c.ZeroDiv:
 *             raise ZeroDivisionError()             # <<<<<<<<<<<<<<
 * 
 *         return RuntimeError("Unknown Error Occurred: %i" % error_code)
 */
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_builtin_ZeroDivisionError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 445, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 445, __pyx_L1_error)

    /* "csiquant/quantities.pyx":444
 *             return ret
 * 
 *         if error_code == c.ZeroDiv:             # <<<<<<<<<<<<<<
 *             raise ZeroDivisionError()
 * 
 */
  }

  /* "csiquant/quantities.pyx":447
 *             raise ZeroDivisionError()
 * 
 *         return RuntimeError("Unknown Error Occurred: %i" % error_code)             # <<<<<<<<<<<<<<
 * 
 *     def __pow__(lhs, rhs, modulo):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_error_code); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_Unknown_Error_Occurred_i, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_RuntimeError, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":433
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)
 * 
 *     def __truediv__(lhs not None, rhs not None):             # <<<<<<<<<<<<<<
 *         cdef Quantity ret = Quantity.__new__(Quantity)
 *         cdef c.QData other
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("csiquant.quantities.Quantity.__truediv__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":449
 *         return RuntimeError("Unknown Error Occurred: %i" % error_code)
 * 
 *     def __pow__(lhs, rhs, modulo):             # <<<<<<<<<<<<<<
 *         if type(lhs) is not Quantity:
 *             raise TypeError("Expected Quantity ** Number")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_41__pow__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs, PyObject *__pyx_v_modulo); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_41__pow__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs, PyObject *__pyx_v_modulo) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pow__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8csiquant_10quantities_8Quantity_40__pow__(((PyObject *)__pyx_v_lhs), ((PyObject *)__pyx_v_rhs), ((PyObject *)__pyx_v_modulo));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_40__pow__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs, CYTHON_UNUSED PyObject *__pyx_v_modulo) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__pow__", 0);

  /* "csiquant/quantities.pyx":450
 * 
 *     def __pow__(lhs, rhs, modulo):
 *         if type(lhs) is not Quantity:             # <<<<<<<<<<<<<<
 *             raise TypeError("Expected Quantity ** Number")
 *         return lhs.exp(rhs)
 */
  __pyx_t_1 = (((PyObject *)Py_TYPE(__pyx_v_lhs)) != ((PyObject *)__pyx_ptype_8csiquant_10quantities_Quantity));
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (unlikely(__pyx_t_2)) {

    /* "csiquant/quantities.pyx":451
 *     def __pow__(lhs, rhs, modulo):
 *         if type(lhs) is not Quantity:
 *             raise TypeError("Expected Quantity ** Number")             # <<<<<<<<<<<<<<
 *         return lhs.exp(rhs)
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 451, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 451, __pyx_L1_error)

    /* "csiquant/quantities.pyx":450
 * 
 *     def __pow__(lhs, rhs, modulo):
 *         if type(lhs) is not Quantity:             # <<<<<<<<<<<<<<
 *             raise TypeError("Expected Quantity ** Number")
 *         return lhs.exp(rhs)
 */
  }

  /* "csiquant/quantities.pyx":452
 *         if type(lhs) is not Quantity:
 *             raise TypeError("Expected Quantity ** Number")
 *         return lhs.exp(rhs)             # <<<<<<<<<<<<<<
 * 
 *     def __neg__(Quantity self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_lhs, __pyx_n_s_exp); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_rhs) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_rhs);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":449
 *         return RuntimeError("Unknown Error Occurred: %i" % error_code)
 * 
 *     def __pow__(lhs, rhs, modulo):             # <<<<<<<<<<<<<<
 *         if type(lhs) is not Quantity:
 *             raise TypeError("Expected Quantity ** Number")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("csiquant.quantities.Quantity.__pow__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":454
 *         return lhs.exp(rhs)
 * 
 *     def __neg__(Quantity self):             # <<<<<<<<<<<<<<
 *         cdef Quantity ret = Quantity.__new__(Quantity)
 *         ret.data.quantity = -self.data.quantity
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_43__neg__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_43__neg__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__neg__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8csiquant_10quantities_8Quantity_42__neg__(((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_42__neg__(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self) {
  struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_ret = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_t_8csiquant_6ctypes_UData __pyx_t_2;
  __Pyx_RefNannySetupContext("__neg__", 0);

  /* "csiquant/quantities.pyx":455
 * 
 *     def __neg__(Quantity self):
 *         cdef Quantity ret = Quantity.__new__(Quantity)             # <<<<<<<<<<<<<<
 *         ret.data.quantity = -self.data.quantity
 *         ret.data.units = self.data.units
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_8csiquant_10quantities_Quantity(((PyTypeObject *)__pyx_ptype_8csiquant_10quantities_Quantity), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 455, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_ret = ((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "csiquant/quantities.pyx":456
 *     def __neg__(Quantity self):
 *         cdef Quantity ret = Quantity.__new__(Quantity)
 *         ret.data.quantity = -self.data.quantity             # <<<<<<<<<<<<<<
 *         ret.data.units = self.data.units
 *         return ret
 */
  __pyx_v_ret->data.quantity = (-__pyx_v_self->data.quantity);

  /* "csiquant/quantities.pyx":457
 *         cdef Quantity ret = Quantity.__new__(Quantity)
 *         ret.data.quantity = -self.data.quantity
 *         ret.data.units = self.data.units             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
  __pyx_t_2 = __pyx_v_self->data.units;
  __pyx_v_ret->data.units = __pyx_t_2;

  /* "csiquant/quantities.pyx":458
 *         ret.data.quantity = -self.data.quantity
 *         ret.data.units = self.data.units
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     def __invert__(Quantity self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_ret));
  __pyx_r = ((PyObject *)__pyx_v_ret);
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":454
 *         return lhs.exp(rhs)
 * 
 *     def __neg__(Quantity self):             # <<<<<<<<<<<<<<
 *         cdef Quantity ret = Quantity.__new__(Quantity)
 *         ret.data.quantity = -self.data.quantity
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("csiquant.quantities.Quantity.__neg__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":460
 *         return ret
 * 
 *     def __invert__(Quantity self):             # <<<<<<<<<<<<<<
 *         cdef int error_code
 *         cdef Quantity ret = Quantity.__new__(Quantity)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_45__invert__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_45__invert__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__invert__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8csiquant_10quantities_8Quantity_44__invert__(((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_44__invert__(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self) {
  int __pyx_v_error_code;
  struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_ret = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__invert__", 0);

  /* "csiquant/quantities.pyx":462
 *     def __invert__(Quantity self):
 *         cdef int error_code
 *         cdef Quantity ret = Quantity.__new__(Quantity)             # <<<<<<<<<<<<<<
 *         ret.data.quantity = 1.0
 *         ret.data.units.scale = 1.0
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_8csiquant_10quantities_Quantity(((PyTypeObject *)__pyx_ptype_8csiquant_10quantities_Quantity), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 462, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_ret = ((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "csiquant/quantities.pyx":463
 *         cdef int error_code
 *         cdef Quantity ret = Quantity.__new__(Quantity)
 *         ret.data.quantity = 1.0             # <<<<<<<<<<<<<<
 *         ret.data.units.scale = 1.0
 *         error_code = c.div_qdata(ret.data, ret.data, self.data)
 */
  __pyx_v_ret->data.quantity = 1.0;

  /* "csiquant/quantities.pyx":464
 *         cdef Quantity ret = Quantity.__new__(Quantity)
 *         ret.data.quantity = 1.0
 *         ret.data.units.scale = 1.0             # <<<<<<<<<<<<<<
 *         error_code = c.div_qdata(ret.data, ret.data, self.data)
 *         if error_code == c.Success:
 */
  __pyx_v_ret->data.units.scale = 1.0;

  /* "csiquant/quantities.pyx":465
 *         ret.data.quantity = 1.0
 *         ret.data.units.scale = 1.0
 *         error_code = c.div_qdata(ret.data, ret.data, self.data)             # <<<<<<<<<<<<<<
 *         if error_code == c.Success:
 *             return ret
 */
  __pyx_v_error_code = __pyx_f_8csiquant_6ctypes_div_qdata(__pyx_v_ret->data, __pyx_v_ret->data, __pyx_v_self->data);

  /* "csiquant/quantities.pyx":466
 *         ret.data.units.scale = 1.0
 *         error_code = c.div_qdata(ret.data, ret.data, self.data)
 *         if error_code == c.Success:             # <<<<<<<<<<<<<<
 *             return ret
 * 
 */
  __pyx_t_2 = ((__pyx_v_error_code == __pyx_e_8csiquant_6ctypes_Success) != 0);
  if (__pyx_t_2) {

    /* "csiquant/quantities.pyx":467
 *         error_code = c.div_qdata(ret.data, ret.data, self.data)
 *         if error_code == c.Success:
 *             return ret             # <<<<<<<<<<<<<<
 * 
 *         if error_code == c.ZeroDiv:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_ret));
    __pyx_r = ((PyObject *)__pyx_v_ret);
    goto __pyx_L0;

    /* "csiquant/quantities.pyx":466
 *         ret.data.units.scale = 1.0
 *         error_code = c.div_qdata(ret.data, ret.data, self.data)
 *         if error_code == c.Success:             # <<<<<<<<<<<<<<
 *             return ret
 * 
 */
  }

  /* "csiquant/quantities.pyx":469
 *             return ret
 * 
 *         if error_code == c.ZeroDiv:             # <<<<<<<<<<<<<<
 *             raise ZeroDivisionError()
 * 
 */
  __pyx_t_2 = ((__pyx_v_error_code == __pyx_e_8csiquant_6ctypes_ZeroDiv) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "csiquant/quantities.pyx":470
 * 
 *         if error_code == c.ZeroDiv:
 *             raise ZeroDivisionError()             # <<<<<<<<<<<<<<
 * 
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)
 */
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_builtin_ZeroDivisionError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 470, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 470, __pyx_L1_error)

    /* "csiquant/quantities.pyx":469
 *             return ret
 * 
 *         if error_code == c.ZeroDiv:             # <<<<<<<<<<<<<<
 *             raise ZeroDivisionError()
 * 
 */
  }

  /* "csiquant/quantities.pyx":472
 *             raise ZeroDivisionError()
 * 
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)             # <<<<<<<<<<<<<<
 * 
 *     def __abs__(Quantity self):
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_error_code); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_Unknown_Error_Occurred_i, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_RuntimeError, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 472, __pyx_L1_error)

  /* "csiquant/quantities.pyx":460
 *         return ret
 * 
 *     def __invert__(Quantity self):             # <<<<<<<<<<<<<<
 *         cdef int error_code
 *         cdef Quantity ret = Quantity.__new__(Quantity)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("csiquant.quantities.Quantity.__invert__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":474
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)
 * 
 *     def __abs__(Quantity self):             # <<<<<<<<<<<<<<
 *         if self.data.quantity >= 0:
 *             return self
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_47__abs__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_47__abs__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__abs__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8csiquant_10quantities_8Quantity_46__abs__(((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_46__abs__(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self) {
  struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_ret = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  struct __pyx_t_8csiquant_6ctypes_UData __pyx_t_3;
  __Pyx_RefNannySetupContext("__abs__", 0);

  /* "csiquant/quantities.pyx":475
 * 
 *     def __abs__(Quantity self):
 *         if self.data.quantity >= 0:             # <<<<<<<<<<<<<<
 *             return self
 *         cdef Quantity ret = Quantity.__new__(Quantity)
 */
  __pyx_t_1 = ((__pyx_v_self->data.quantity >= 0.0) != 0);
  if (__pyx_t_1) {

    /* "csiquant/quantities.pyx":476
 *     def __abs__(Quantity self):
 *         if self.data.quantity >= 0:
 *             return self             # <<<<<<<<<<<<<<
 *         cdef Quantity ret = Quantity.__new__(Quantity)
 *         ret.data.quantity = fabs(self.data.quantity)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __pyx_r = ((PyObject *)__pyx_v_self);
    goto __pyx_L0;

    /* "csiquant/quantities.pyx":475
 * 
 *     def __abs__(Quantity self):
 *         if self.data.quantity >= 0:             # <<<<<<<<<<<<<<
 *             return self
 *         cdef Quantity ret = Quantity.__new__(Quantity)
 */
  }

  /* "csiquant/quantities.pyx":477
 *         if self.data.quantity >= 0:
 *             return self
 *         cdef Quantity ret = Quantity.__new__(Quantity)             # <<<<<<<<<<<<<<
 *         ret.data.quantity = fabs(self.data.quantity)
 *         ret.data.units = self.data.units
 */
  __pyx_t_2 = ((PyObject *)__pyx_tp_new_8csiquant_10quantities_Quantity(((PyTypeObject *)__pyx_ptype_8csiquant_10quantities_Quantity), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 477, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_v_ret = ((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "csiquant/quantities.pyx":478
 *             return self
 *         cdef Quantity ret = Quantity.__new__(Quantity)
 *         ret.data.quantity = fabs(self.data.quantity)             # <<<<<<<<<<<<<<
 *         ret.data.units = self.data.units
 *         return ret
 */
  __pyx_v_ret->data.quantity = fabs(__pyx_v_self->data.quantity);

  /* "csiquant/quantities.pyx":479
 *         cdef Quantity ret = Quantity.__new__(Quantity)
 *         ret.data.quantity = fabs(self.data.quantity)
 *         ret.data.units = self.data.units             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
  __pyx_t_3 = __pyx_v_self->data.units;
  __pyx_v_ret->data.units = __pyx_t_3;

  /* "csiquant/quantities.pyx":480
 *         ret.data.quantity = fabs(self.data.quantity)
 *         ret.data.units = self.data.units
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     cpdef Quantity exp(Quantity self, double power):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_ret));
  __pyx_r = ((PyObject *)__pyx_v_ret);
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":474
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)
 * 
 *     def __abs__(Quantity self):             # <<<<<<<<<<<<<<
 *         if self.data.quantity >= 0:
 *             return self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("csiquant.quantities.Quantity.__abs__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":482
 *         return ret
 * 
 *     cpdef Quantity exp(Quantity self, double power):             # <<<<<<<<<<<<<<
 *         cdef int error_code
 *         cdef Quantity ret = Quantity.__new__(Quantity)
 */

static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_49exp(PyObject *__pyx_v_self, PyObject *__pyx_arg_power); /*proto*/
static struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_f_8csiquant_10quantities_8Quantity_exp(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self, double __pyx_v_power, int __pyx_skip_dispatch) {
  int __pyx_v_error_code;
  struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_ret = 0;
  struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("exp", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
    static PY_UINT64_T tp_dict_version = 0, obj_dict_version = 0;
    if (likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict && tp_dict_version == __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) && (!Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset || obj_dict_version == __PYX_GET_DICT_VERSION(_PyObject_GetDictPtr(((PyObject *)__pyx_v_self))))));
    else {
      PY_UINT64_T type_dict_guard = (likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict)) ? __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) : 0;
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_exp); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 482, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_8csiquant_10quantities_8Quantity_49exp)) {
        __Pyx_XDECREF(((PyObject *)__pyx_r));
        __pyx_t_3 = PyFloat_FromDouble(__pyx_v_power); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 482, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 482, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_8csiquant_10quantities_Quantity))))) __PYX_ERR(1, 482, __pyx_L1_error)
        __pyx_r = ((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
      tp_dict_version = likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) ? __PYX_GET_DICT_VERSION(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dict) : 0;
      obj_dict_version = likely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset) ? __PYX_GET_DICT_VERSION(_PyObject_GetDictPtr(((PyObject *)__pyx_v_self))) : 0;
      if (unlikely(type_dict_guard != tp_dict_version)) {
        tp_dict_version = obj_dict_version = 0;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP
    }
    #endif
  }

  /* "csiquant/quantities.pyx":484
 *     cpdef Quantity exp(Quantity self, double power):
 *         cdef int error_code
 *         cdef Quantity ret = Quantity.__new__(Quantity)             # <<<<<<<<<<<<<<
 *         error_code = c.pow_qdata(ret.data, self.data, power)
 *         if error_code == c.Success:
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_8csiquant_10quantities_Quantity(((PyTypeObject *)__pyx_ptype_8csiquant_10quantities_Quantity), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 484, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_ret = ((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "csiquant/quantities.pyx":485
 *         cdef int error_code
 *         cdef Quantity ret = Quantity.__new__(Quantity)
 *         error_code = c.pow_qdata(ret.data, self.data, power)             # <<<<<<<<<<<<<<
 *         if error_code == c.Success:
 *             return ret
 */
  __pyx_v_error_code = __pyx_f_8csiquant_6ctypes_pow_qdata(__pyx_v_ret->data, __pyx_v_self->data, __pyx_v_power);

  /* "csiquant/quantities.pyx":486
 *         cdef Quantity ret = Quantity.__new__(Quantity)
 *         error_code = c.pow_qdata(ret.data, self.data, power)
 *         if error_code == c.Success:             # <<<<<<<<<<<<<<
 *             return ret
 * 
 */
  __pyx_t_6 = ((__pyx_v_error_code == __pyx_e_8csiquant_6ctypes_Success) != 0);
  if (__pyx_t_6) {

    /* "csiquant/quantities.pyx":487
 *         error_code = c.pow_qdata(ret.data, self.data, power)
 *         if error_code == c.Success:
 *             return ret             # <<<<<<<<<<<<<<
 * 
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    __Pyx_INCREF(((PyObject *)__pyx_v_ret));
    __pyx_r = __pyx_v_ret;
    goto __pyx_L0;

    /* "csiquant/quantities.pyx":486
 *         cdef Quantity ret = Quantity.__new__(Quantity)
 *         error_code = c.pow_qdata(ret.data, self.data, power)
 *         if error_code == c.Success:             # <<<<<<<<<<<<<<
 *             return ret
 * 
 */
  }

  /* "csiquant/quantities.pyx":489
 *             return ret
 * 
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)             # <<<<<<<<<<<<<<
 * 
 *     def __copy__(self):
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_error_code); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyUnicode_Format(__pyx_kp_u_Unknown_Error_Occurred_i, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_RuntimeError, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 489, __pyx_L1_error)

  /* "csiquant/quantities.pyx":482
 *         return ret
 * 
 *     cpdef Quantity exp(Quantity self, double power):             # <<<<<<<<<<<<<<
 *         cdef int error_code
 *         cdef Quantity ret = Quantity.__new__(Quantity)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("csiquant.quantities.Quantity.exp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ret);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_49exp(PyObject *__pyx_v_self, PyObject *__pyx_arg_power); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_49exp(PyObject *__pyx_v_self, PyObject *__pyx_arg_power) {
  double __pyx_v_power;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("exp (wrapper)", 0);
  assert(__pyx_arg_power); {
    __pyx_v_power = __pyx_PyFloat_AsDouble(__pyx_arg_power); if (unlikely((__pyx_v_power == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 482, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("csiquant.quantities.Quantity.exp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8csiquant_10quantities_8Quantity_48exp(((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_v_self), ((double)__pyx_v_power));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_48exp(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self, double __pyx_v_power) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("exp", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_8csiquant_10quantities_8Quantity_exp(__pyx_v_self, __pyx_v_power, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("csiquant.quantities.Quantity.exp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":491
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)
 * 
 *     def __copy__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_51__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_51__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__copy__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8csiquant_10quantities_8Quantity_50__copy__(((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_50__copy__(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__copy__", 0);

  /* "csiquant/quantities.pyx":492
 * 
 *     def __copy__(self):
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __deepcopy__(self, memodict={}):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":491
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)
 * 
 *     def __copy__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":494
 *         return self
 * 
 *     def __deepcopy__(self, memodict={}):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_53__deepcopy__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_53__deepcopy__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_memodict = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__deepcopy__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_memodict,0};
    PyObject* values[1] = {0};
    values[0] = __pyx_k__15;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_memodict);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__deepcopy__") < 0)) __PYX_ERR(1, 494, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_memodict = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__deepcopy__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 494, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("csiquant.quantities.Quantity.__deepcopy__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8csiquant_10quantities_8Quantity_52__deepcopy__(((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_v_self), __pyx_v_memodict);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_52__deepcopy__(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_memodict) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__deepcopy__", 0);

  /* "csiquant/quantities.pyx":495
 * 
 *     def __deepcopy__(self, memodict={}):
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __bool__(Quantity self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":494
 *         return self
 * 
 *     def __deepcopy__(self, memodict={}):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":497
 *         return self
 * 
 *     def __bool__(Quantity self):             # <<<<<<<<<<<<<<
 *         return bool(self.data.quantity)
 * 
 */

/* Python wrapper */
static int __pyx_pw_8csiquant_10quantities_8Quantity_55__bool__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_8csiquant_10quantities_8Quantity_55__bool__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__bool__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8csiquant_10quantities_8Quantity_54__bool__(((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8csiquant_10quantities_8Quantity_54__bool__(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__bool__", 0);

  /* "csiquant/quantities.pyx":498
 * 
 *     def __bool__(Quantity self):
 *         return bool(self.data.quantity)             # <<<<<<<<<<<<<<
 * 
 *     def __float__(Quantity self):
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->data.quantity); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 498, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = (!(!__pyx_t_2));
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":497
 *         return self
 * 
 *     def __bool__(Quantity self):             # <<<<<<<<<<<<<<
 *         return bool(self.data.quantity)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("csiquant.quantities.Quantity.__bool__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":500
 *         return bool(self.data.quantity)
 * 
 *     def __float__(Quantity self):             # <<<<<<<<<<<<<<
 *         return float(self.data.quantity)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_57__float__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_57__float__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__float__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8csiquant_10quantities_8Quantity_56__float__(((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_56__float__(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__float__", 0);

  /* "csiquant/quantities.pyx":501
 * 
 *     def __float__(Quantity self):
 *         return float(self.data.quantity)             # <<<<<<<<<<<<<<
 * 
 *     def __int__(Quantity self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->data.quantity); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":500
 *         return bool(self.data.quantity)
 * 
 *     def __float__(Quantity self):             # <<<<<<<<<<<<<<
 *         return float(self.data.quantity)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("csiquant.quantities.Quantity.__float__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":503
 *         return float(self.data.quantity)
 * 
 *     def __int__(Quantity self):             # <<<<<<<<<<<<<<
 *         return int(self.data.quantity)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_59__int__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_59__int__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__int__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8csiquant_10quantities_8Quantity_58__int__(((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_58__int__(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__int__", 0);

  /* "csiquant/quantities.pyx":504
 * 
 *     def __int__(Quantity self):
 *         return int(self.data.quantity)             # <<<<<<<<<<<<<<
 * 
 *     def __hash__(Quantity self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromDouble(__pyx_v_self->data.quantity); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":503
 *         return float(self.data.quantity)
 * 
 *     def __int__(Quantity self):             # <<<<<<<<<<<<<<
 *         return int(self.data.quantity)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("csiquant.quantities.Quantity.__int__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":506
 *         return int(self.data.quantity)
 * 
 *     def __hash__(Quantity self):             # <<<<<<<<<<<<<<
 *         cdef double normalized = self.data.quantity * self.data.units.scale
 *         exponents = tuple(self.data.units.dimensions.exponents)
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_8csiquant_10quantities_8Quantity_61__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_8csiquant_10quantities_8Quantity_61__hash__(PyObject *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8csiquant_10quantities_8Quantity_60__hash__(((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_8csiquant_10quantities_8Quantity_60__hash__(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self) {
  double __pyx_v_normalized;
  PyObject *__pyx_v_exponents = NULL;
  PyObject *__pyx_v_qtuple = NULL;
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_hash_t __pyx_t_3;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "csiquant/quantities.pyx":507
 * 
 *     def __hash__(Quantity self):
 *         cdef double normalized = self.data.quantity * self.data.units.scale             # <<<<<<<<<<<<<<
 *         exponents = tuple(self.data.units.dimensions.exponents)
 *         qtuple = (normalized, exponents)
 */
  __pyx_v_normalized = (__pyx_v_self->data.quantity * __pyx_v_self->data.units.scale);

  /* "csiquant/quantities.pyx":508
 *     def __hash__(Quantity self):
 *         cdef double normalized = self.data.quantity * self.data.units.scale
 *         exponents = tuple(self.data.units.dimensions.exponents)             # <<<<<<<<<<<<<<
 *         qtuple = (normalized, exponents)
 *         return hash(qtuple)
 */
  __pyx_t_1 = __Pyx_carray_to_py_double(__pyx_v_self->data.units.dimensions.exponents, 7); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PySequence_Tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_exponents = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "csiquant/quantities.pyx":509
 *         cdef double normalized = self.data.quantity * self.data.units.scale
 *         exponents = tuple(self.data.units.dimensions.exponents)
 *         qtuple = (normalized, exponents)             # <<<<<<<<<<<<<<
 *         return hash(qtuple)
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_normalized); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_INCREF(__pyx_v_exponents);
  __Pyx_GIVEREF(__pyx_v_exponents);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_exponents);
  __pyx_t_2 = 0;
  __pyx_v_qtuple = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "csiquant/quantities.pyx":510
 *         exponents = tuple(self.data.units.dimensions.exponents)
 *         qtuple = (normalized, exponents)
 *         return hash(qtuple)             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __pyx_t_3 = PyObject_Hash(__pyx_v_qtuple); if (unlikely(__pyx_t_3 == ((Py_hash_t)-1))) __PYX_ERR(1, 510, __pyx_L1_error)
  __pyx_r = __pyx_t_3;
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":506
 *         return int(self.data.quantity)
 * 
 *     def __hash__(Quantity self):             # <<<<<<<<<<<<<<
 *         cdef double normalized = self.data.quantity * self.data.units.scale
 *         exponents = tuple(self.data.units.dimensions.exponents)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("csiquant.quantities.Quantity.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_exponents);
  __Pyx_XDECREF(__pyx_v_qtuple);
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pyx":512
 *         return hash(qtuple)
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return 'Quantity(%f, %r)' % (self.quantity, self.units)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_63__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_63__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8csiquant_10quantities_8Quantity_62__repr__(((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_62__repr__(struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "csiquant/quantities.pyx":513
 * 
 *     def __repr__(self):
 *         return 'Quantity(%f, %r)' % (self.quantity, self.units)             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u_Quantity);
  __pyx_t_2 += 9;
  __Pyx_GIVEREF(__pyx_kp_u_Quantity);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Quantity);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_quantity); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_Format(__pyx_t_4, __pyx_n_u_f); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u__8);
  __pyx_t_2 += 2;
  __Pyx_GIVEREF(__pyx_kp_u__8);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u__8);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_units); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_t_5), __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__9);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__9);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u__9);
  __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_1, 5, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "csiquant/quantities.pyx":512
 *         return hash(qtuple)
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return 'Quantity(%f, %r)' % (self.quantity, self.units)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("csiquant.quantities.Quantity.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("Pickling of struct members such as self.data must be explicitly requested with @auto_pickle(True)")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_65__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_65__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8csiquant_10quantities_8Quantity_64__reduce_cython__(((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_64__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("Pickling of struct members such as self.data must be explicitly requested with @auto_pickle(True)")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("Pickling of struct members such as self.data must be explicitly requested with @auto_pickle(True)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("Pickling of struct members such as self.data must be explicitly requested with @auto_pickle(True)")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("csiquant.quantities.Quantity.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("Pickling of struct members such as self.data must be explicitly requested with @auto_pickle(True)")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("Pickling of struct members such as self.data must be explicitly requested with @auto_pickle(True)")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_67__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8csiquant_10quantities_8Quantity_67__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8csiquant_10quantities_8Quantity_66__setstate_cython__(((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8csiquant_10quantities_8Quantity_66__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("Pickling of struct members such as self.data must be explicitly requested with @auto_pickle(True)")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("Pickling of struct members such as self.data must be explicitly requested with @auto_pickle(True)")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("Pickling of struct members such as self.data must be explicitly requested with @auto_pickle(True)")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("Pickling of struct members such as self.data must be explicitly requested with @auto_pickle(True)")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("csiquant.quantities.Quantity.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pxd":42
 *     cpdef Quantity exp(Quantity self, double power)
 * 
 * cdef inline Quantity mul_quantities(const c.QData& lhs, const c.QData& rhs):             # <<<<<<<<<<<<<<
 *     cdef c.Error error_code
 *     cdef Quantity ret = Quantity.__new__(Quantity)
 */

static CYTHON_INLINE struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_f_8csiquant_10quantities_mul_quantities(struct __pyx_t_8csiquant_6ctypes_QData const &__pyx_v_lhs, struct __pyx_t_8csiquant_6ctypes_QData const &__pyx_v_rhs) {
  enum __pyx_t_8csiquant_6ctypes_Error __pyx_v_error_code;
  struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_ret = 0;
  struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("mul_quantities", 0);

  /* "csiquant/quantities.pxd":44
 * cdef inline Quantity mul_quantities(const c.QData& lhs, const c.QData& rhs):
 *     cdef c.Error error_code
 *     cdef Quantity ret = Quantity.__new__(Quantity)             # <<<<<<<<<<<<<<
 *     error_code = c.mul_qdata(ret.data, lhs, rhs)
 *     if error_code == c.Success:
 */
  __pyx_t_1 = __Pyx_tp_new(((PyObject *)__pyx_ptype_8csiquant_10quantities_Quantity), __pyx_empty_tuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_8csiquant_10quantities_Quantity)))) __PYX_ERR(0, 44, __pyx_L1_error)
  __pyx_v_ret = ((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "csiquant/quantities.pxd":45
 *     cdef c.Error error_code
 *     cdef Quantity ret = Quantity.__new__(Quantity)
 *     error_code = c.mul_qdata(ret.data, lhs, rhs)             # <<<<<<<<<<<<<<
 *     if error_code == c.Success:
 *         return ret
 */
  __pyx_v_error_code = __pyx_f_8csiquant_6ctypes_mul_qdata(__pyx_v_ret->data, __pyx_v_lhs, __pyx_v_rhs);

  /* "csiquant/quantities.pxd":46
 *     cdef Quantity ret = Quantity.__new__(Quantity)
 *     error_code = c.mul_qdata(ret.data, lhs, rhs)
 *     if error_code == c.Success:             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
  __pyx_t_2 = ((__pyx_v_error_code == __pyx_e_8csiquant_6ctypes_Success) != 0);
  if (__pyx_t_2) {

    /* "csiquant/quantities.pxd":47
 *     error_code = c.mul_qdata(ret.data, lhs, rhs)
 *     if error_code == c.Success:
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     raise RuntimeError("Unknown Error Occurred: %i" % error_code)
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    __Pyx_INCREF(((PyObject *)__pyx_v_ret));
    __pyx_r = __pyx_v_ret;
    goto __pyx_L0;

    /* "csiquant/quantities.pxd":46
 *     cdef Quantity ret = Quantity.__new__(Quantity)
 *     error_code = c.mul_qdata(ret.data, lhs, rhs)
 *     if error_code == c.Success:             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
  }

  /* "csiquant/quantities.pxd":49
 *         return ret
 * 
 *     raise RuntimeError("Unknown Error Occurred: %i" % error_code)             # <<<<<<<<<<<<<<
 * 
 * cdef inline SIUnit mul_units(const c.UData& lhs, const c.UData& rhs):
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_8csiquant_6ctypes_Error(__pyx_v_error_code); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_Unknown_Error_Occurred_i, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_RuntimeError, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 49, __pyx_L1_error)

  /* "csiquant/quantities.pxd":42
 *     cpdef Quantity exp(Quantity self, double power)
 * 
 * cdef inline Quantity mul_quantities(const c.QData& lhs, const c.QData& rhs):             # <<<<<<<<<<<<<<
 *     cdef c.Error error_code
 *     cdef Quantity ret = Quantity.__new__(Quantity)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("csiquant.quantities.mul_quantities", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ret);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pxd":51
 *     raise RuntimeError("Unknown Error Occurred: %i" % error_code)
 * 
 * cdef inline SIUnit mul_units(const c.UData& lhs, const c.UData& rhs):             # <<<<<<<<<<<<<<
 *     cdef c.Error error_code
 *     cdef SIUnit ret = SIUnit.__new__(SIUnit)
 */

static CYTHON_INLINE struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_f_8csiquant_10quantities_mul_units(struct __pyx_t_8csiquant_6ctypes_UData const &__pyx_v_lhs, struct __pyx_t_8csiquant_6ctypes_UData const &__pyx_v_rhs) {
  enum __pyx_t_8csiquant_6ctypes_Error __pyx_v_error_code;
  struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_ret = 0;
  struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("mul_units", 0);

  /* "csiquant/quantities.pxd":53
 * cdef inline SIUnit mul_units(const c.UData& lhs, const c.UData& rhs):
 *     cdef c.Error error_code
 *     cdef SIUnit ret = SIUnit.__new__(SIUnit)             # <<<<<<<<<<<<<<
 *     error_code = c.mul_udata(ret.data, lhs, rhs)
 *     if error_code == c.Success:
 */
  __pyx_t_1 = __Pyx_tp_new(((PyObject *)__pyx_ptype_8csiquant_10quantities_SIUnit), __pyx_empty_tuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_8csiquant_10quantities_SIUnit)))) __PYX_ERR(0, 53, __pyx_L1_error)
  __pyx_v_ret = ((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "csiquant/quantities.pxd":54
 *     cdef c.Error error_code
 *     cdef SIUnit ret = SIUnit.__new__(SIUnit)
 *     error_code = c.mul_udata(ret.data, lhs, rhs)             # <<<<<<<<<<<<<<
 *     if error_code == c.Success:
 *         return ret
 */
  __pyx_v_error_code = __pyx_f_8csiquant_6ctypes_mul_udata(__pyx_v_ret->data, __pyx_v_lhs, __pyx_v_rhs);

  /* "csiquant/quantities.pxd":55
 *     cdef SIUnit ret = SIUnit.__new__(SIUnit)
 *     error_code = c.mul_udata(ret.data, lhs, rhs)
 *     if error_code == c.Success:             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
  __pyx_t_2 = ((__pyx_v_error_code == __pyx_e_8csiquant_6ctypes_Success) != 0);
  if (__pyx_t_2) {

    /* "csiquant/quantities.pxd":56
 *     error_code = c.mul_udata(ret.data, lhs, rhs)
 *     if error_code == c.Success:
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     raise RuntimeError("Unknow Error Occurred: %i" % error_code)
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    __Pyx_INCREF(((PyObject *)__pyx_v_ret));
    __pyx_r = __pyx_v_ret;
    goto __pyx_L0;

    /* "csiquant/quantities.pxd":55
 *     cdef SIUnit ret = SIUnit.__new__(SIUnit)
 *     error_code = c.mul_udata(ret.data, lhs, rhs)
 *     if error_code == c.Success:             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
  }

  /* "csiquant/quantities.pxd":58
 *         return ret
 * 
 *     raise RuntimeError("Unknow Error Occurred: %i" % error_code)             # <<<<<<<<<<<<<<
 * 
 * cdef inline Quantity div_quantities(const c.QData& lhs, const c.QData& rhs):
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_8csiquant_6ctypes_Error(__pyx_v_error_code); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_Unknow_Error_Occurred_i, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_RuntimeError, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 58, __pyx_L1_error)

  /* "csiquant/quantities.pxd":51
 *     raise RuntimeError("Unknown Error Occurred: %i" % error_code)
 * 
 * cdef inline SIUnit mul_units(const c.UData& lhs, const c.UData& rhs):             # <<<<<<<<<<<<<<
 *     cdef c.Error error_code
 *     cdef SIUnit ret = SIUnit.__new__(SIUnit)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("csiquant.quantities.mul_units", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ret);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pxd":60
 *     raise RuntimeError("Unknow Error Occurred: %i" % error_code)
 * 
 * cdef inline Quantity div_quantities(const c.QData& lhs, const c.QData& rhs):             # <<<<<<<<<<<<<<
 *     cdef c.Error error_code
 *     cdef Quantity ret = Quantity.__new__(Quantity)
 */

static CYTHON_INLINE struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_f_8csiquant_10quantities_div_quantities(struct __pyx_t_8csiquant_6ctypes_QData const &__pyx_v_lhs, struct __pyx_t_8csiquant_6ctypes_QData const &__pyx_v_rhs) {
  enum __pyx_t_8csiquant_6ctypes_Error __pyx_v_error_code;
  struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_ret = 0;
  struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("div_quantities", 0);

  /* "csiquant/quantities.pxd":62
 * cdef inline Quantity div_quantities(const c.QData& lhs, const c.QData& rhs):
 *     cdef c.Error error_code
 *     cdef Quantity ret = Quantity.__new__(Quantity)             # <<<<<<<<<<<<<<
 *     error_code = c.div_qdata(ret.data, lhs, rhs)
 *     if error_code == c.Success:
 */
  __pyx_t_1 = __Pyx_tp_new(((PyObject *)__pyx_ptype_8csiquant_10quantities_Quantity), __pyx_empty_tuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_8csiquant_10quantities_Quantity)))) __PYX_ERR(0, 62, __pyx_L1_error)
  __pyx_v_ret = ((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "csiquant/quantities.pxd":63
 *     cdef c.Error error_code
 *     cdef Quantity ret = Quantity.__new__(Quantity)
 *     error_code = c.div_qdata(ret.data, lhs, rhs)             # <<<<<<<<<<<<<<
 *     if error_code == c.Success:
 *         return ret
 */
  __pyx_v_error_code = __pyx_f_8csiquant_6ctypes_div_qdata(__pyx_v_ret->data, __pyx_v_lhs, __pyx_v_rhs);

  /* "csiquant/quantities.pxd":64
 *     cdef Quantity ret = Quantity.__new__(Quantity)
 *     error_code = c.div_qdata(ret.data, lhs, rhs)
 *     if error_code == c.Success:             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
  __pyx_t_2 = ((__pyx_v_error_code == __pyx_e_8csiquant_6ctypes_Success) != 0);
  if (__pyx_t_2) {

    /* "csiquant/quantities.pxd":65
 *     error_code = c.div_qdata(ret.data, lhs, rhs)
 *     if error_code == c.Success:
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     if error_code == c.ZeroDiv:
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    __Pyx_INCREF(((PyObject *)__pyx_v_ret));
    __pyx_r = __pyx_v_ret;
    goto __pyx_L0;

    /* "csiquant/quantities.pxd":64
 *     cdef Quantity ret = Quantity.__new__(Quantity)
 *     error_code = c.div_qdata(ret.data, lhs, rhs)
 *     if error_code == c.Success:             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
  }

  /* "csiquant/quantities.pxd":67
 *         return ret
 * 
 *     if error_code == c.ZeroDiv:             # <<<<<<<<<<<<<<
 *         raise ZeroDivisionError()
 * 
 */
  __pyx_t_2 = ((__pyx_v_error_code == __pyx_e_8csiquant_6ctypes_ZeroDiv) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "csiquant/quantities.pxd":68
 * 
 *     if error_code == c.ZeroDiv:
 *         raise ZeroDivisionError()             # <<<<<<<<<<<<<<
 * 
 *     raise RuntimeError("Unknown Error Occurred: %d" % error_code)
 */
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_builtin_ZeroDivisionError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 68, __pyx_L1_error)

    /* "csiquant/quantities.pxd":67
 *         return ret
 * 
 *     if error_code == c.ZeroDiv:             # <<<<<<<<<<<<<<
 *         raise ZeroDivisionError()
 * 
 */
  }

  /* "csiquant/quantities.pxd":70
 *         raise ZeroDivisionError()
 * 
 *     raise RuntimeError("Unknown Error Occurred: %d" % error_code)             # <<<<<<<<<<<<<<
 * 
 * cdef inline SIUnit div_units(const c.UData& lhs, const c.UData& rhs):
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_8csiquant_6ctypes_Error(__pyx_v_error_code); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_Unknown_Error_Occurred_d, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_RuntimeError, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 70, __pyx_L1_error)

  /* "csiquant/quantities.pxd":60
 *     raise RuntimeError("Unknow Error Occurred: %i" % error_code)
 * 
 * cdef inline Quantity div_quantities(const c.QData& lhs, const c.QData& rhs):             # <<<<<<<<<<<<<<
 *     cdef c.Error error_code
 *     cdef Quantity ret = Quantity.__new__(Quantity)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("csiquant.quantities.div_quantities", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ret);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pxd":72
 *     raise RuntimeError("Unknown Error Occurred: %d" % error_code)
 * 
 * cdef inline SIUnit div_units(const c.UData& lhs, const c.UData& rhs):             # <<<<<<<<<<<<<<
 *     cdef c.Error error_code
 *     cdef SIUnit ret = SIUnit.__new__(SIUnit)
 */

static CYTHON_INLINE struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_f_8csiquant_10quantities_div_units(struct __pyx_t_8csiquant_6ctypes_UData const &__pyx_v_lhs, struct __pyx_t_8csiquant_6ctypes_UData const &__pyx_v_rhs) {
  enum __pyx_t_8csiquant_6ctypes_Error __pyx_v_error_code;
  struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_ret = 0;
  struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("div_units", 0);

  /* "csiquant/quantities.pxd":74
 * cdef inline SIUnit div_units(const c.UData& lhs, const c.UData& rhs):
 *     cdef c.Error error_code
 *     cdef SIUnit ret = SIUnit.__new__(SIUnit)             # <<<<<<<<<<<<<<
 *     error_code = c.div_udata(ret.data, lhs, rhs)
 *     if error_code == c.Success:
 */
  __pyx_t_1 = __Pyx_tp_new(((PyObject *)__pyx_ptype_8csiquant_10quantities_SIUnit), __pyx_empty_tuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_8csiquant_10quantities_SIUnit)))) __PYX_ERR(0, 74, __pyx_L1_error)
  __pyx_v_ret = ((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "csiquant/quantities.pxd":75
 *     cdef c.Error error_code
 *     cdef SIUnit ret = SIUnit.__new__(SIUnit)
 *     error_code = c.div_udata(ret.data, lhs, rhs)             # <<<<<<<<<<<<<<
 *     if error_code == c.Success:
 *         return ret
 */
  __pyx_v_error_code = __pyx_f_8csiquant_6ctypes_div_udata(__pyx_v_ret->data, __pyx_v_lhs, __pyx_v_rhs);

  /* "csiquant/quantities.pxd":76
 *     cdef SIUnit ret = SIUnit.__new__(SIUnit)
 *     error_code = c.div_udata(ret.data, lhs, rhs)
 *     if error_code == c.Success:             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
  __pyx_t_2 = ((__pyx_v_error_code == __pyx_e_8csiquant_6ctypes_Success) != 0);
  if (__pyx_t_2) {

    /* "csiquant/quantities.pxd":77
 *     error_code = c.div_udata(ret.data, lhs, rhs)
 *     if error_code == c.Success:
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     if error_code == c.ZeroDiv:
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    __Pyx_INCREF(((PyObject *)__pyx_v_ret));
    __pyx_r = __pyx_v_ret;
    goto __pyx_L0;

    /* "csiquant/quantities.pxd":76
 *     cdef SIUnit ret = SIUnit.__new__(SIUnit)
 *     error_code = c.div_udata(ret.data, lhs, rhs)
 *     if error_code == c.Success:             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
  }

  /* "csiquant/quantities.pxd":79
 *         return ret
 * 
 *     if error_code == c.ZeroDiv:             # <<<<<<<<<<<<<<
 *         raise ZeroDivisionError()
 * 
 */
  __pyx_t_2 = ((__pyx_v_error_code == __pyx_e_8csiquant_6ctypes_ZeroDiv) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "csiquant/quantities.pxd":80
 * 
 *     if error_code == c.ZeroDiv:
 *         raise ZeroDivisionError()             # <<<<<<<<<<<<<<
 * 
 *     raise RuntimeError("Unknown Error Occurred: %d" % error_code)
 */
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_builtin_ZeroDivisionError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 80, __pyx_L1_error)

    /* "csiquant/quantities.pxd":79
 *         return ret
 * 
 *     if error_code == c.ZeroDiv:             # <<<<<<<<<<<<<<
 *         raise ZeroDivisionError()
 * 
 */
  }

  /* "csiquant/quantities.pxd":82
 *         raise ZeroDivisionError()
 * 
 *     raise RuntimeError("Unknown Error Occurred: %d" % error_code)             # <<<<<<<<<<<<<<
 * 
 * # parsing functions
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_8csiquant_6ctypes_Error(__pyx_v_error_code); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_Unknown_Error_Occurred_d, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_RuntimeError, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 82, __pyx_L1_error)

  /* "csiquant/quantities.pxd":72
 *     raise RuntimeError("Unknown Error Occurred: %d" % error_code)
 * 
 * cdef inline SIUnit div_units(const c.UData& lhs, const c.UData& rhs):             # <<<<<<<<<<<<<<
 *     cdef c.Error error_code
 *     cdef SIUnit ret = SIUnit.__new__(SIUnit)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("csiquant.quantities.div_units", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ret);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pxd":86
 * # parsing functions
 * 
 * cdef inline c.Operand parse_uoperand(c.QData& out, object py_obj):             # <<<<<<<<<<<<<<
 *     op_type = type(py_obj)
 *     if op_type is float or op_type is int:
 */

static CYTHON_INLINE enum __pyx_t_8csiquant_6ctypes_Operand __pyx_f_8csiquant_10quantities_parse_uoperand(struct __pyx_t_8csiquant_6ctypes_QData &__pyx_v_out, PyObject *__pyx_v_py_obj) {
  PyTypeObject *__pyx_v_op_type = NULL;
  enum __pyx_t_8csiquant_6ctypes_Operand __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  double __pyx_t_4;
  double __pyx_t_5[7];
  __Pyx_RefNannySetupContext("parse_uoperand", 0);

  /* "csiquant/quantities.pxd":87
 * 
 * cdef inline c.Operand parse_uoperand(c.QData& out, object py_obj):
 *     op_type = type(py_obj)             # <<<<<<<<<<<<<<
 *     if op_type is float or op_type is int:
 *         out.quantity = <double>py_obj
 */
  __Pyx_INCREF(((PyObject *)Py_TYPE(__pyx_v_py_obj)));
  __pyx_v_op_type = ((PyTypeObject*)((PyObject *)Py_TYPE(__pyx_v_py_obj)));

  /* "csiquant/quantities.pxd":88
 * cdef inline c.Operand parse_uoperand(c.QData& out, object py_obj):
 *     op_type = type(py_obj)
 *     if op_type is float or op_type is int:             # <<<<<<<<<<<<<<
 *         out.quantity = <double>py_obj
 *         out.units.scale = 1.0
 */
  __pyx_t_2 = (__pyx_v_op_type == (&PyFloat_Type));
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_op_type == (&PyInt_Type));
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "csiquant/quantities.pxd":89
 *     op_type = type(py_obj)
 *     if op_type is float or op_type is int:
 *         out.quantity = <double>py_obj             # <<<<<<<<<<<<<<
 *         out.units.scale = 1.0
 *         out.units.dimensions.exponents[:] = [0,0,0,0,0,0,0]
 */
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_py_obj); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 89, __pyx_L1_error)
    __pyx_v_out.quantity = ((double)__pyx_t_4);

    /* "csiquant/quantities.pxd":90
 *     if op_type is float or op_type is int:
 *         out.quantity = <double>py_obj
 *         out.units.scale = 1.0             # <<<<<<<<<<<<<<
 *         out.units.dimensions.exponents[:] = [0,0,0,0,0,0,0]
 *         return c.QUANTITY
 */
    __pyx_v_out.units.scale = 1.0;

    /* "csiquant/quantities.pxd":91
 *         out.quantity = <double>py_obj
 *         out.units.scale = 1.0
 *         out.units.dimensions.exponents[:] = [0,0,0,0,0,0,0]             # <<<<<<<<<<<<<<
 *         return c.QUANTITY
 *     elif op_type is SIUnit:
 */
    __pyx_t_5[0] = 0.0;
    __pyx_t_5[1] = 0.0;
    __pyx_t_5[2] = 0.0;
    __pyx_t_5[3] = 0.0;
    __pyx_t_5[4] = 0.0;
    __pyx_t_5[5] = 0.0;
    __pyx_t_5[6] = 0.0;
    memcpy(&(__pyx_v_out.units.dimensions.exponents[0]), __pyx_t_5, sizeof(__pyx_v_out.units.dimensions.exponents[0]) * (7));

    /* "csiquant/quantities.pxd":92
 *         out.units.scale = 1.0
 *         out.units.dimensions.exponents[:] = [0,0,0,0,0,0,0]
 *         return c.QUANTITY             # <<<<<<<<<<<<<<
 *     elif op_type is SIUnit:
 *         out.quantity = 1.0
 */
    __pyx_r = __pyx_e_8csiquant_6ctypes_QUANTITY;
    goto __pyx_L0;

    /* "csiquant/quantities.pxd":88
 * cdef inline c.Operand parse_uoperand(c.QData& out, object py_obj):
 *     op_type = type(py_obj)
 *     if op_type is float or op_type is int:             # <<<<<<<<<<<<<<
 *         out.quantity = <double>py_obj
 *         out.units.scale = 1.0
 */
  }

  /* "csiquant/quantities.pxd":93
 *         out.units.dimensions.exponents[:] = [0,0,0,0,0,0,0]
 *         return c.QUANTITY
 *     elif op_type is SIUnit:             # <<<<<<<<<<<<<<
 *         out.quantity = 1.0
 *         return extract_udata(out.units, py_obj)
 */
  __pyx_t_1 = (__pyx_v_op_type == __pyx_ptype_8csiquant_10quantities_SIUnit);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "csiquant/quantities.pxd":94
 *         return c.QUANTITY
 *     elif op_type is SIUnit:
 *         out.quantity = 1.0             # <<<<<<<<<<<<<<
 *         return extract_udata(out.units, py_obj)
 *     elif op_type is Quantity:
 */
    __pyx_v_out.quantity = 1.0;

    /* "csiquant/quantities.pxd":95
 *     elif op_type is SIUnit:
 *         out.quantity = 1.0
 *         return extract_udata(out.units, py_obj)             # <<<<<<<<<<<<<<
 *     elif op_type is Quantity:
 *         return extract_qdata(out, py_obj)
 */
    if (!(likely(((__pyx_v_py_obj) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_py_obj, __pyx_ptype_8csiquant_10quantities_SIUnit))))) __PYX_ERR(0, 95, __pyx_L1_error)
    __pyx_r = __pyx_f_8csiquant_10quantities_extract_udata(__pyx_v_out.units, ((struct __pyx_obj_8csiquant_10quantities_SIUnit *)__pyx_v_py_obj));
    goto __pyx_L0;

    /* "csiquant/quantities.pxd":93
 *         out.units.dimensions.exponents[:] = [0,0,0,0,0,0,0]
 *         return c.QUANTITY
 *     elif op_type is SIUnit:             # <<<<<<<<<<<<<<
 *         out.quantity = 1.0
 *         return extract_udata(out.units, py_obj)
 */
  }

  /* "csiquant/quantities.pxd":96
 *         out.quantity = 1.0
 *         return extract_udata(out.units, py_obj)
 *     elif op_type is Quantity:             # <<<<<<<<<<<<<<
 *         return extract_qdata(out, py_obj)
 *     else:
 */
  __pyx_t_2 = (__pyx_v_op_type == __pyx_ptype_8csiquant_10quantities_Quantity);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "csiquant/quantities.pxd":97
 *         return extract_udata(out.units, py_obj)
 *     elif op_type is Quantity:
 *         return extract_qdata(out, py_obj)             # <<<<<<<<<<<<<<
 *     else:
 *         return c.OBJECT
 */
    if (!(likely(((__pyx_v_py_obj) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_py_obj, __pyx_ptype_8csiquant_10quantities_Quantity))))) __PYX_ERR(0, 97, __pyx_L1_error)
    __pyx_r = __pyx_f_8csiquant_10quantities_extract_qdata(__pyx_v_out, ((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_v_py_obj));
    goto __pyx_L0;

    /* "csiquant/quantities.pxd":96
 *         out.quantity = 1.0
 *         return extract_udata(out.units, py_obj)
 *     elif op_type is Quantity:             # <<<<<<<<<<<<<<
 *         return extract_qdata(out, py_obj)
 *     else:
 */
  }

  /* "csiquant/quantities.pxd":99
 *         return extract_qdata(out, py_obj)
 *     else:
 *         return c.OBJECT             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_r = __pyx_e_8csiquant_6ctypes_OBJECT;
    goto __pyx_L0;
  }

  /* "csiquant/quantities.pxd":86
 * # parsing functions
 * 
 * cdef inline c.Operand parse_uoperand(c.QData& out, object py_obj):             # <<<<<<<<<<<<<<
 *     op_type = type(py_obj)
 *     if op_type is float or op_type is int:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("csiquant.quantities.parse_uoperand", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = (enum __pyx_t_8csiquant_6ctypes_Operand) 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_op_type);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pxd":102
 * 
 * 
 * cdef inline c.Operand parse_qoperand(c.QData& out, object py_obj):             # <<<<<<<<<<<<<<
 *     op_type = type(py_obj)
 *     if op_type is Quantity:
 */

static CYTHON_INLINE enum __pyx_t_8csiquant_6ctypes_Operand __pyx_f_8csiquant_10quantities_parse_qoperand(struct __pyx_t_8csiquant_6ctypes_QData &__pyx_v_out, PyObject *__pyx_v_py_obj) {
  PyTypeObject *__pyx_v_op_type = NULL;
  enum __pyx_t_8csiquant_6ctypes_Operand __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  double __pyx_t_4;
  double __pyx_t_5[7];
  __Pyx_RefNannySetupContext("parse_qoperand", 0);

  /* "csiquant/quantities.pxd":103
 * 
 * cdef inline c.Operand parse_qoperand(c.QData& out, object py_obj):
 *     op_type = type(py_obj)             # <<<<<<<<<<<<<<
 *     if op_type is Quantity:
 *         return extract_qdata(out, py_obj)
 */
  __Pyx_INCREF(((PyObject *)Py_TYPE(__pyx_v_py_obj)));
  __pyx_v_op_type = ((PyTypeObject*)((PyObject *)Py_TYPE(__pyx_v_py_obj)));

  /* "csiquant/quantities.pxd":104
 * cdef inline c.Operand parse_qoperand(c.QData& out, object py_obj):
 *     op_type = type(py_obj)
 *     if op_type is Quantity:             # <<<<<<<<<<<<<<
 *         return extract_qdata(out, py_obj)
 *     elif op_type is float or op_type is int:
 */
  __pyx_t_1 = (__pyx_v_op_type == __pyx_ptype_8csiquant_10quantities_Quantity);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "csiquant/quantities.pxd":105
 *     op_type = type(py_obj)
 *     if op_type is Quantity:
 *         return extract_qdata(out, py_obj)             # <<<<<<<<<<<<<<
 *     elif op_type is float or op_type is int:
 *         out.quantity = <double>py_obj
 */
    if (!(likely(((__pyx_v_py_obj) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_py_obj, __pyx_ptype_8csiquant_10quantities_Quantity))))) __PYX_ERR(0, 105, __pyx_L1_error)
    __pyx_r = __pyx_f_8csiquant_10quantities_extract_qdata(__pyx_v_out, ((struct __pyx_obj_8csiquant_10quantities_Quantity *)__pyx_v_py_obj));
    goto __pyx_L0;

    /* "csiquant/quantities.pxd":104
 * cdef inline c.Operand parse_qoperand(c.QData& out, object py_obj):
 *     op_type = type(py_obj)
 *     if op_type is Quantity:             # <<<<<<<<<<<<<<
 *         return extract_qdata(out, py_obj)
 *     elif op_type is float or op_type is int:
 */
  }

  /* "csiquant/quantities.pxd":106
 *     if op_type is Quantity:
 *         return extract_qdata(out, py_obj)
 *     elif op_type is float or op_type is int:             # <<<<<<<<<<<<<<
 *         out.quantity = <double>py_obj
 *         out.units.scale = 1.0
 */
  __pyx_t_1 = (__pyx_v_op_type == (&PyFloat_Type));
  __pyx_t_3 = (__pyx_t_1 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_op_type == (&PyInt_Type));
  __pyx_t_1 = (__pyx_t_3 != 0);
  __pyx_t_2 = __pyx_t_1;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "csiquant/quantities.pxd":107
 *         return extract_qdata(out, py_obj)
 *     elif op_type is float or op_type is int:
 *         out.quantity = <double>py_obj             # <<<<<<<<<<<<<<
 *         out.units.scale = 1.0
 *         out.units.dimensions.exponents[:] = [0,0,0,0,0,0,0]
 */
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_py_obj); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 107, __pyx_L1_error)
    __pyx_v_out.quantity = ((double)__pyx_t_4);

    /* "csiquant/quantities.pxd":108
 *     elif op_type is float or op_type is int:
 *         out.quantity = <double>py_obj
 *         out.units.scale = 1.0             # <<<<<<<<<<<<<<
 *         out.units.dimensions.exponents[:] = [0,0,0,0,0,0,0]
 *         return c.QUANTITY
 */
    __pyx_v_out.units.scale = 1.0;

    /* "csiquant/quantities.pxd":109
 *         out.quantity = <double>py_obj
 *         out.units.scale = 1.0
 *         out.units.dimensions.exponents[:] = [0,0,0,0,0,0,0]             # <<<<<<<<<<<<<<
 *         return c.QUANTITY
 *     return c.OBJECT
 */
    __pyx_t_5[0] = 0.0;
    __pyx_t_5[1] = 0.0;
    __pyx_t_5[2] = 0.0;
    __pyx_t_5[3] = 0.0;
    __pyx_t_5[4] = 0.0;
    __pyx_t_5[5] = 0.0;
    __pyx_t_5[6] = 0.0;
    memcpy(&(__pyx_v_out.units.dimensions.exponents[0]), __pyx_t_5, sizeof(__pyx_v_out.units.dimensions.exponents[0]) * (7));

    /* "csiquant/quantities.pxd":110
 *         out.units.scale = 1.0
 *         out.units.dimensions.exponents[:] = [0,0,0,0,0,0,0]
 *         return c.QUANTITY             # <<<<<<<<<<<<<<
 *     return c.OBJECT
 * 
 */
    __pyx_r = __pyx_e_8csiquant_6ctypes_QUANTITY;
    goto __pyx_L0;

    /* "csiquant/quantities.pxd":106
 *     if op_type is Quantity:
 *         return extract_qdata(out, py_obj)
 *     elif op_type is float or op_type is int:             # <<<<<<<<<<<<<<
 *         out.quantity = <double>py_obj
 *         out.units.scale = 1.0
 */
  }

  /* "csiquant/quantities.pxd":111
 *         out.units.dimensions.exponents[:] = [0,0,0,0,0,0,0]
 *         return c.QUANTITY
 *     return c.OBJECT             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_e_8csiquant_6ctypes_OBJECT;
  goto __pyx_L0;

  /* "csiquant/quantities.pxd":102
 * 
 * 
 * cdef inline c.Operand parse_qoperand(c.QData& out, object py_obj):             # <<<<<<<<<<<<<<
 *     op_type = type(py_obj)
 *     if op_type is Quantity:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("csiquant.quantities.parse_qoperand", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = (enum __pyx_t_8csiquant_6ctypes_Operand) 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_op_type);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pxd":114
 * 
 * 
 * cdef inline c.Operand extract_udata(c.UData& out, SIUnit py_obj):             # <<<<<<<<<<<<<<
 *     (&out)[0] = py_obj.data
 *     return c.UNIT
 */

static CYTHON_INLINE enum __pyx_t_8csiquant_6ctypes_Operand __pyx_f_8csiquant_10quantities_extract_udata(struct __pyx_t_8csiquant_6ctypes_UData &__pyx_v_out, struct __pyx_obj_8csiquant_10quantities_SIUnit *__pyx_v_py_obj) {
  enum __pyx_t_8csiquant_6ctypes_Operand __pyx_r;
  __Pyx_RefNannyDeclarations
  struct __pyx_t_8csiquant_6ctypes_UData __pyx_t_1;
  __Pyx_RefNannySetupContext("extract_udata", 0);

  /* "csiquant/quantities.pxd":115
 * 
 * cdef inline c.Operand extract_udata(c.UData& out, SIUnit py_obj):
 *     (&out)[0] = py_obj.data             # <<<<<<<<<<<<<<
 *     return c.UNIT
 * 
 */
  __pyx_t_1 = __pyx_v_py_obj->data;
  ((&__pyx_v_out)[0]) = __pyx_t_1;

  /* "csiquant/quantities.pxd":116
 * cdef inline c.Operand extract_udata(c.UData& out, SIUnit py_obj):
 *     (&out)[0] = py_obj.data
 *     return c.UNIT             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_e_8csiquant_6ctypes_UNIT;
  goto __pyx_L0;

  /* "csiquant/quantities.pxd":114
 * 
 * 
 * cdef inline c.Operand extract_udata(c.UData& out, SIUnit py_obj):             # <<<<<<<<<<<<<<
 *     (&out)[0] = py_obj.data
 *     return c.UNIT
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/quantities.pxd":119
 * 
 * 
 * cdef inline c.Operand extract_qdata(c.QData& out, Quantity py_obj):             # <<<<<<<<<<<<<<
 *     (&out)[0] = py_obj.data
 *     return c.QUANTITY
 */

static CYTHON_INLINE enum __pyx_t_8csiquant_6ctypes_Operand __pyx_f_8csiquant_10quantities_extract_qdata(struct __pyx_t_8csiquant_6ctypes_QData &__pyx_v_out, struct __pyx_obj_8csiquant_10quantities_Quantity *__pyx_v_py_obj) {
  enum __pyx_t_8csiquant_6ctypes_Operand __pyx_r;
  __Pyx_RefNannyDeclarations
  struct __pyx_t_8csiquant_6ctypes_QData __pyx_t_1;
  __Pyx_RefNannySetupContext("extract_qdata", 0);

  /* "csiquant/quantities.pxd":120
 * 
 * cdef inline c.Operand extract_qdata(c.QData& out, Quantity py_obj):
 *     (&out)[0] = py_obj.data             # <<<<<<<<<<<<<<
 *     return c.QUANTITY
 */
  __pyx_t_1 = __pyx_v_py_obj->data;
  ((&__pyx_v_out)[0]) = __pyx_t_1;

  /* "csiquant/quantities.pxd":121
 * cdef inline c.Operand extract_qdata(c.QData& out, Quantity py_obj):
 *     (&out)[0] = py_obj.data
 *     return c.QUANTITY             # <<<<<<<<<<<<<<
 */
  __pyx_r = __pyx_e_8csiquant_6ctypes_QUANTITY;
  goto __pyx_L0;

  /* "csiquant/quantities.pxd":119
 * 
 * 
 * cdef inline c.Operand extract_qdata(c.QData& out, Quantity py_obj):             # <<<<<<<<<<<<<<
 *     (&out)[0] = py_obj.data
 *     return c.QUANTITY
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/ctypes.pxd":20
 *     QUANTITY = 4
 * 
 * cdef inline bint fapprox(double a, double b, double rtol, double atol):             # <<<<<<<<<<<<<<
 *     cdef double epsilon = fabs(fmax(atol, rtol * fmax(1, fmax(a, b))))
 *     return fabs(a - b) <= epsilon
 */

static CYTHON_INLINE int __pyx_f_8csiquant_6ctypes_fapprox(double __pyx_v_a, double __pyx_v_b, double __pyx_v_rtol, double __pyx_v_atol) {
  double __pyx_v_epsilon;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fapprox", 0);

  /* "csiquant/ctypes.pxd":21
 * 
 * cdef inline bint fapprox(double a, double b, double rtol, double atol):
 *     cdef double epsilon = fabs(fmax(atol, rtol * fmax(1, fmax(a, b))))             # <<<<<<<<<<<<<<
 *     return fabs(a - b) <= epsilon
 * 
 */
  __pyx_v_epsilon = fabs(fmax(__pyx_v_atol, (__pyx_v_rtol * fmax(1.0, fmax(__pyx_v_a, __pyx_v_b)))));

  /* "csiquant/ctypes.pxd":22
 * cdef inline bint fapprox(double a, double b, double rtol, double atol):
 *     cdef double epsilon = fabs(fmax(atol, rtol * fmax(1, fmax(a, b))))
 *     return fabs(a - b) <= epsilon             # <<<<<<<<<<<<<<
 * 
 * cdef inline bint eq_ddata(const DData& lhs, const DData& rhs):
 */
  __pyx_r = (fabs((__pyx_v_a - __pyx_v_b)) <= __pyx_v_epsilon);
  goto __pyx_L0;

  /* "csiquant/ctypes.pxd":20
 *     QUANTITY = 4
 * 
 * cdef inline bint fapprox(double a, double b, double rtol, double atol):             # <<<<<<<<<<<<<<
 *     cdef double epsilon = fabs(fmax(atol, rtol * fmax(1, fmax(a, b))))
 *     return fabs(a - b) <= epsilon
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/ctypes.pxd":24
 *     return fabs(a - b) <= epsilon
 * 
 * cdef inline bint eq_ddata(const DData& lhs, const DData& rhs):             # <<<<<<<<<<<<<<
 *     return memcmp(&lhs, &rhs, sizeof(DData)) == 0
 * 
 */

static CYTHON_INLINE int __pyx_f_8csiquant_6ctypes_eq_ddata(struct __pyx_t_8csiquant_6ctypes_DData const &__pyx_v_lhs, struct __pyx_t_8csiquant_6ctypes_DData const &__pyx_v_rhs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("eq_ddata", 0);

  /* "csiquant/ctypes.pxd":25
 * 
 * cdef inline bint eq_ddata(const DData& lhs, const DData& rhs):
 *     return memcmp(&lhs, &rhs, sizeof(DData)) == 0             # <<<<<<<<<<<<<<
 * 
 * cdef inline double unsafe_extract_quantity(const QData& src, const UData& units):
 */
  __pyx_r = (memcmp((&__pyx_v_lhs), (&__pyx_v_rhs), (sizeof(struct __pyx_t_8csiquant_6ctypes_DData))) == 0);
  goto __pyx_L0;

  /* "csiquant/ctypes.pxd":24
 *     return fabs(a - b) <= epsilon
 * 
 * cdef inline bint eq_ddata(const DData& lhs, const DData& rhs):             # <<<<<<<<<<<<<<
 *     return memcmp(&lhs, &rhs, sizeof(DData)) == 0
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/ctypes.pxd":27
 *     return memcmp(&lhs, &rhs, sizeof(DData)) == 0
 * 
 * cdef inline double unsafe_extract_quantity(const QData& src, const UData& units):             # <<<<<<<<<<<<<<
 *     return src.quantity * src.units.scale / units.scale
 * 
 */

static CYTHON_INLINE double __pyx_f_8csiquant_6ctypes_unsafe_extract_quantity(struct __pyx_t_8csiquant_6ctypes_QData const &__pyx_v_src, struct __pyx_t_8csiquant_6ctypes_UData const &__pyx_v_units) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("unsafe_extract_quantity", 0);

  /* "csiquant/ctypes.pxd":28
 * 
 * cdef inline double unsafe_extract_quantity(const QData& src, const UData& units):
 *     return src.quantity * src.units.scale / units.scale             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = (__pyx_v_src.quantity * __pyx_v_src.units.scale);
  if (unlikely(__pyx_v_units.scale == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(3, 28, __pyx_L1_error)
  }
  __pyx_r = (__pyx_t_1 / __pyx_v_units.scale);
  goto __pyx_L0;

  /* "csiquant/ctypes.pxd":27
 *     return memcmp(&lhs, &rhs, sizeof(DData)) == 0
 * 
 * cdef inline double unsafe_extract_quantity(const QData& src, const UData& units):             # <<<<<<<<<<<<<<
 *     return src.quantity * src.units.scale / units.scale
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("csiquant.ctypes.unsafe_extract_quantity", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/ctypes.pxd":43
 * 
 * #Success
 * cdef inline Error mul_ddata(DData& out, const DData& lhs, const DData& rhs):             # <<<<<<<<<<<<<<
 *     cdef int i
 *     for i in range(7):
 */

static CYTHON_INLINE enum __pyx_t_8csiquant_6ctypes_Error __pyx_f_8csiquant_6ctypes_mul_ddata(struct __pyx_t_8csiquant_6ctypes_DData &__pyx_v_out, struct __pyx_t_8csiquant_6ctypes_DData const &__pyx_v_lhs, struct __pyx_t_8csiquant_6ctypes_DData const &__pyx_v_rhs) {
  int __pyx_v_i;
  enum __pyx_t_8csiquant_6ctypes_Error __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("mul_ddata", 0);

  /* "csiquant/ctypes.pxd":45
 * cdef inline Error mul_ddata(DData& out, const DData& lhs, const DData& rhs):
 *     cdef int i
 *     for i in range(7):             # <<<<<<<<<<<<<<
 *         out.exponents[i] = lhs.exponents[i] + rhs.exponents[i]
 *     return Success
 */
  for (__pyx_t_1 = 0; __pyx_t_1 < 7; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "csiquant/ctypes.pxd":46
 *     cdef int i
 *     for i in range(7):
 *         out.exponents[i] = lhs.exponents[i] + rhs.exponents[i]             # <<<<<<<<<<<<<<
 *     return Success
 * 
 */
    (__pyx_v_out.exponents[__pyx_v_i]) = ((__pyx_v_lhs.exponents[__pyx_v_i]) + (__pyx_v_rhs.exponents[__pyx_v_i]));
  }

  /* "csiquant/ctypes.pxd":47
 *     for i in range(7):
 *         out.exponents[i] = lhs.exponents[i] + rhs.exponents[i]
 *     return Success             # <<<<<<<<<<<<<<
 * 
 * #Success
 */
  __pyx_r = __pyx_e_8csiquant_6ctypes_Success;
  goto __pyx_L0;

  /* "csiquant/ctypes.pxd":43
 * 
 * #Success
 * cdef inline Error mul_ddata(DData& out, const DData& lhs, const DData& rhs):             # <<<<<<<<<<<<<<
 *     cdef int i
 *     for i in range(7):
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/ctypes.pxd":50
 * 
 * #Success
 * cdef inline Error div_ddata(DData& out, const DData& lhs, const DData& rhs):             # <<<<<<<<<<<<<<
 *     cdef int i
 *     for i in range(7):
 */

static CYTHON_INLINE enum __pyx_t_8csiquant_6ctypes_Error __pyx_f_8csiquant_6ctypes_div_ddata(struct __pyx_t_8csiquant_6ctypes_DData &__pyx_v_out, struct __pyx_t_8csiquant_6ctypes_DData const &__pyx_v_lhs, struct __pyx_t_8csiquant_6ctypes_DData const &__pyx_v_rhs) {
  int __pyx_v_i;
  enum __pyx_t_8csiquant_6ctypes_Error __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("div_ddata", 0);

  /* "csiquant/ctypes.pxd":52
 * cdef inline Error div_ddata(DData& out, const DData& lhs, const DData& rhs):
 *     cdef int i
 *     for i in range(7):             # <<<<<<<<<<<<<<
 *         out.exponents[i] = lhs.exponents[i] - rhs.exponents[i]
 *     return Success
 */
  for (__pyx_t_1 = 0; __pyx_t_1 < 7; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "csiquant/ctypes.pxd":53
 *     cdef int i
 *     for i in range(7):
 *         out.exponents[i] = lhs.exponents[i] - rhs.exponents[i]             # <<<<<<<<<<<<<<
 *     return Success
 * 
 */
    (__pyx_v_out.exponents[__pyx_v_i]) = ((__pyx_v_lhs.exponents[__pyx_v_i]) - (__pyx_v_rhs.exponents[__pyx_v_i]));
  }

  /* "csiquant/ctypes.pxd":54
 *     for i in range(7):
 *         out.exponents[i] = lhs.exponents[i] - rhs.exponents[i]
 *     return Success             # <<<<<<<<<<<<<<
 * 
 * #Success
 */
  __pyx_r = __pyx_e_8csiquant_6ctypes_Success;
  goto __pyx_L0;

  /* "csiquant/ctypes.pxd":50
 * 
 * #Success
 * cdef inline Error div_ddata(DData& out, const DData& lhs, const DData& rhs):             # <<<<<<<<<<<<<<
 *     cdef int i
 *     for i in range(7):
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/ctypes.pxd":57
 * 
 * #Success
 * cdef inline Error pow_ddata(DData& out, const DData& lhs, double power):             # <<<<<<<<<<<<<<
 *     cdef int i
 *     for i in range(7):
 */

static CYTHON_INLINE enum __pyx_t_8csiquant_6ctypes_Error __pyx_f_8csiquant_6ctypes_pow_ddata(struct __pyx_t_8csiquant_6ctypes_DData &__pyx_v_out, struct __pyx_t_8csiquant_6ctypes_DData const &__pyx_v_lhs, double __pyx_v_power) {
  int __pyx_v_i;
  enum __pyx_t_8csiquant_6ctypes_Error __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("pow_ddata", 0);

  /* "csiquant/ctypes.pxd":59
 * cdef inline Error pow_ddata(DData& out, const DData& lhs, double power):
 *     cdef int i
 *     for i in range(7):             # <<<<<<<<<<<<<<
 *         out.exponents[i] = lhs.exponents[i] * power
 *     return Success
 */
  for (__pyx_t_1 = 0; __pyx_t_1 < 7; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "csiquant/ctypes.pxd":60
 *     cdef int i
 *     for i in range(7):
 *         out.exponents[i] = lhs.exponents[i] * power             # <<<<<<<<<<<<<<
 *     return Success
 * 
 */
    (__pyx_v_out.exponents[__pyx_v_i]) = ((__pyx_v_lhs.exponents[__pyx_v_i]) * __pyx_v_power);
  }

  /* "csiquant/ctypes.pxd":61
 *     for i in range(7):
 *         out.exponents[i] = lhs.exponents[i] * power
 *     return Success             # <<<<<<<<<<<<<<
 * 
 * # begin udata functions
 */
  __pyx_r = __pyx_e_8csiquant_6ctypes_Success;
  goto __pyx_L0;

  /* "csiquant/ctypes.pxd":57
 * 
 * #Success
 * cdef inline Error pow_ddata(DData& out, const DData& lhs, double power):             # <<<<<<<<<<<<<<
 *     cdef int i
 *     for i in range(7):
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/ctypes.pxd":66
 * 
 * #Success
 * cdef inline Error mul_udata(UData& out, const UData& lhs, const UData& rhs):             # <<<<<<<<<<<<<<
 *     #todo: overflow checks
 *     out.scale = lhs.scale * rhs.scale
 */

static CYTHON_INLINE enum __pyx_t_8csiquant_6ctypes_Error __pyx_f_8csiquant_6ctypes_mul_udata(struct __pyx_t_8csiquant_6ctypes_UData &__pyx_v_out, struct __pyx_t_8csiquant_6ctypes_UData const &__pyx_v_lhs, struct __pyx_t_8csiquant_6ctypes_UData const &__pyx_v_rhs) {
  enum __pyx_t_8csiquant_6ctypes_Error __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mul_udata", 0);

  /* "csiquant/ctypes.pxd":68
 * cdef inline Error mul_udata(UData& out, const UData& lhs, const UData& rhs):
 *     #todo: overflow checks
 *     out.scale = lhs.scale * rhs.scale             # <<<<<<<<<<<<<<
 *     return mul_ddata(out.dimensions, lhs.dimensions, rhs.dimensions)
 * 
 */
  __pyx_v_out.scale = (__pyx_v_lhs.scale * __pyx_v_rhs.scale);

  /* "csiquant/ctypes.pxd":69
 *     #todo: overflow checks
 *     out.scale = lhs.scale * rhs.scale
 *     return mul_ddata(out.dimensions, lhs.dimensions, rhs.dimensions)             # <<<<<<<<<<<<<<
 * 
 * #Success
 */
  __pyx_r = __pyx_f_8csiquant_6ctypes_mul_ddata(__pyx_v_out.dimensions, __pyx_v_lhs.dimensions, __pyx_v_rhs.dimensions);
  goto __pyx_L0;

  /* "csiquant/ctypes.pxd":66
 * 
 * #Success
 * cdef inline Error mul_udata(UData& out, const UData& lhs, const UData& rhs):             # <<<<<<<<<<<<<<
 *     #todo: overflow checks
 *     out.scale = lhs.scale * rhs.scale
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/ctypes.pxd":73
 * #Success
 * #ZeroDiv
 * cdef inline Error div_udata(UData& out, const UData& lhs, const UData& rhs):             # <<<<<<<<<<<<<<
 *     if rhs.scale == 0:
 *         return ZeroDiv
 */

static CYTHON_INLINE enum __pyx_t_8csiquant_6ctypes_Error __pyx_f_8csiquant_6ctypes_div_udata(struct __pyx_t_8csiquant_6ctypes_UData &__pyx_v_out, struct __pyx_t_8csiquant_6ctypes_UData const &__pyx_v_lhs, struct __pyx_t_8csiquant_6ctypes_UData const &__pyx_v_rhs) {
  enum __pyx_t_8csiquant_6ctypes_Error __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("div_udata", 0);

  /* "csiquant/ctypes.pxd":74
 * #ZeroDiv
 * cdef inline Error div_udata(UData& out, const UData& lhs, const UData& rhs):
 *     if rhs.scale == 0:             # <<<<<<<<<<<<<<
 *         return ZeroDiv
 *     out.scale = lhs.scale / rhs.scale
 */
  __pyx_t_1 = ((__pyx_v_rhs.scale == 0.0) != 0);
  if (__pyx_t_1) {

    /* "csiquant/ctypes.pxd":75
 * cdef inline Error div_udata(UData& out, const UData& lhs, const UData& rhs):
 *     if rhs.scale == 0:
 *         return ZeroDiv             # <<<<<<<<<<<<<<
 *     out.scale = lhs.scale / rhs.scale
 *     return div_ddata(out.dimensions, lhs.dimensions, rhs.dimensions)
 */
    __pyx_r = __pyx_e_8csiquant_6ctypes_ZeroDiv;
    goto __pyx_L0;

    /* "csiquant/ctypes.pxd":74
 * #ZeroDiv
 * cdef inline Error div_udata(UData& out, const UData& lhs, const UData& rhs):
 *     if rhs.scale == 0:             # <<<<<<<<<<<<<<
 *         return ZeroDiv
 *     out.scale = lhs.scale / rhs.scale
 */
  }

  /* "csiquant/ctypes.pxd":76
 *     if rhs.scale == 0:
 *         return ZeroDiv
 *     out.scale = lhs.scale / rhs.scale             # <<<<<<<<<<<<<<
 *     return div_ddata(out.dimensions, lhs.dimensions, rhs.dimensions)
 * 
 */
  if (unlikely(__pyx_v_rhs.scale == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(3, 76, __pyx_L1_error)
  }
  __pyx_v_out.scale = (__pyx_v_lhs.scale / __pyx_v_rhs.scale);

  /* "csiquant/ctypes.pxd":77
 *         return ZeroDiv
 *     out.scale = lhs.scale / rhs.scale
 *     return div_ddata(out.dimensions, lhs.dimensions, rhs.dimensions)             # <<<<<<<<<<<<<<
 * 
 * #Success
 */
  __pyx_r = __pyx_f_8csiquant_6ctypes_div_ddata(__pyx_v_out.dimensions, __pyx_v_lhs.dimensions, __pyx_v_rhs.dimensions);
  goto __pyx_L0;

  /* "csiquant/ctypes.pxd":73
 * #Success
 * #ZeroDiv
 * cdef inline Error div_udata(UData& out, const UData& lhs, const UData& rhs):             # <<<<<<<<<<<<<<
 *     if rhs.scale == 0:
 *         return ZeroDiv
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("csiquant.ctypes.div_udata", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = (enum __pyx_t_8csiquant_6ctypes_Error) 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/ctypes.pxd":80
 * 
 * #Success
 * cdef inline Error pow_udata(UData& out, const UData& lhs, double power):             # <<<<<<<<<<<<<<
 *     #todo: overflow checks
 *     out.scale = lhs.scale ** power
 */

static CYTHON_INLINE enum __pyx_t_8csiquant_6ctypes_Error __pyx_f_8csiquant_6ctypes_pow_udata(struct __pyx_t_8csiquant_6ctypes_UData &__pyx_v_out, struct __pyx_t_8csiquant_6ctypes_UData const &__pyx_v_lhs, double __pyx_v_power) {
  enum __pyx_t_8csiquant_6ctypes_Error __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pow_udata", 0);

  /* "csiquant/ctypes.pxd":82
 * cdef inline Error pow_udata(UData& out, const UData& lhs, double power):
 *     #todo: overflow checks
 *     out.scale = lhs.scale ** power             # <<<<<<<<<<<<<<
 *     return pow_ddata(out.dimensions, lhs.dimensions, power)
 * 
 */
  __pyx_v_out.scale = pow(((double)__pyx_v_lhs.scale), __pyx_v_power);

  /* "csiquant/ctypes.pxd":83
 *     #todo: overflow checks
 *     out.scale = lhs.scale ** power
 *     return pow_ddata(out.dimensions, lhs.dimensions, power)             # <<<<<<<<<<<<<<
 * 
 * #Success
 */
  __pyx_r = __pyx_f_8csiquant_6ctypes_pow_ddata(__pyx_v_out.dimensions, __pyx_v_lhs.dimensions, __pyx_v_power);
  goto __pyx_L0;

  /* "csiquant/ctypes.pxd":80
 * 
 * #Success
 * cdef inline Error pow_udata(UData& out, const UData& lhs, double power):             # <<<<<<<<<<<<<<
 *     #todo: overflow checks
 *     out.scale = lhs.scale ** power
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/ctypes.pxd":87
 * #Success
 * #DimensionMismatch
 * cdef inline Error cmp_udata(int& out, const UData& lhs, const UData& rhs):             # <<<<<<<<<<<<<<
 *     if not eq_ddata(lhs.dimensions, rhs.dimensions):
 *         return DimensionMismatch
 */

static CYTHON_INLINE enum __pyx_t_8csiquant_6ctypes_Error __pyx_f_8csiquant_6ctypes_cmp_udata(int &__pyx_v_out, struct __pyx_t_8csiquant_6ctypes_UData const &__pyx_v_lhs, struct __pyx_t_8csiquant_6ctypes_UData const &__pyx_v_rhs) {
  enum __pyx_t_8csiquant_6ctypes_Error __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("cmp_udata", 0);

  /* "csiquant/ctypes.pxd":88
 * #DimensionMismatch
 * cdef inline Error cmp_udata(int& out, const UData& lhs, const UData& rhs):
 *     if not eq_ddata(lhs.dimensions, rhs.dimensions):             # <<<<<<<<<<<<<<
 *         return DimensionMismatch
 * 
 */
  __pyx_t_1 = ((!(__pyx_f_8csiquant_6ctypes_eq_ddata(__pyx_v_lhs.dimensions, __pyx_v_rhs.dimensions) != 0)) != 0);
  if (__pyx_t_1) {

    /* "csiquant/ctypes.pxd":89
 * cdef inline Error cmp_udata(int& out, const UData& lhs, const UData& rhs):
 *     if not eq_ddata(lhs.dimensions, rhs.dimensions):
 *         return DimensionMismatch             # <<<<<<<<<<<<<<
 * 
 *     if lhs.scale > rhs.scale:
 */
    __pyx_r = __pyx_e_8csiquant_6ctypes_DimensionMismatch;
    goto __pyx_L0;

    /* "csiquant/ctypes.pxd":88
 * #DimensionMismatch
 * cdef inline Error cmp_udata(int& out, const UData& lhs, const UData& rhs):
 *     if not eq_ddata(lhs.dimensions, rhs.dimensions):             # <<<<<<<<<<<<<<
 *         return DimensionMismatch
 * 
 */
  }

  /* "csiquant/ctypes.pxd":91
 *         return DimensionMismatch
 * 
 *     if lhs.scale > rhs.scale:             # <<<<<<<<<<<<<<
 *         (&out)[0] = 1
 *     elif lhs.scale < rhs.scale:
 */
  __pyx_t_1 = ((__pyx_v_lhs.scale > __pyx_v_rhs.scale) != 0);
  if (__pyx_t_1) {

    /* "csiquant/ctypes.pxd":92
 * 
 *     if lhs.scale > rhs.scale:
 *         (&out)[0] = 1             # <<<<<<<<<<<<<<
 *     elif lhs.scale < rhs.scale:
 *         (&out)[0] = -1
 */
    ((&__pyx_v_out)[0]) = 1;

    /* "csiquant/ctypes.pxd":91
 *         return DimensionMismatch
 * 
 *     if lhs.scale > rhs.scale:             # <<<<<<<<<<<<<<
 *         (&out)[0] = 1
 *     elif lhs.scale < rhs.scale:
 */
    goto __pyx_L4;
  }

  /* "csiquant/ctypes.pxd":93
 *     if lhs.scale > rhs.scale:
 *         (&out)[0] = 1
 *     elif lhs.scale < rhs.scale:             # <<<<<<<<<<<<<<
 *         (&out)[0] = -1
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_lhs.scale < __pyx_v_rhs.scale) != 0);
  if (__pyx_t_1) {

    /* "csiquant/ctypes.pxd":94
 *         (&out)[0] = 1
 *     elif lhs.scale < rhs.scale:
 *         (&out)[0] = -1             # <<<<<<<<<<<<<<
 *     else:
 *         (&out)[0] = 0
 */
    ((&__pyx_v_out)[0]) = -1;

    /* "csiquant/ctypes.pxd":93
 *     if lhs.scale > rhs.scale:
 *         (&out)[0] = 1
 *     elif lhs.scale < rhs.scale:             # <<<<<<<<<<<<<<
 *         (&out)[0] = -1
 *     else:
 */
    goto __pyx_L4;
  }

  /* "csiquant/ctypes.pxd":96
 *         (&out)[0] = -1
 *     else:
 *         (&out)[0] = 0             # <<<<<<<<<<<<<<
 * 
 *     return Success
 */
  /*else*/ {
    ((&__pyx_v_out)[0]) = 0;
  }
  __pyx_L4:;

  /* "csiquant/ctypes.pxd":98
 *         (&out)[0] = 0
 * 
 *     return Success             # <<<<<<<<<<<<<<
 * 
 * #Success
 */
  __pyx_r = __pyx_e_8csiquant_6ctypes_Success;
  goto __pyx_L0;

  /* "csiquant/ctypes.pxd":87
 * #Success
 * #DimensionMismatch
 * cdef inline Error cmp_udata(int& out, const UData& lhs, const UData& rhs):             # <<<<<<<<<<<<<<
 *     if not eq_ddata(lhs.dimensions, rhs.dimensions):
 *         return DimensionMismatch
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/ctypes.pxd":102
 * #Success
 * #DimensionMismatch
 * cdef inline Error min_udata(UData& out, const UData& lhs, const UData& rhs):             # <<<<<<<<<<<<<<
 *     if not eq_ddata(lhs.dimensions, rhs.dimensions):
 *         return DimensionMismatch
 */

static CYTHON_INLINE enum __pyx_t_8csiquant_6ctypes_Error __pyx_f_8csiquant_6ctypes_min_udata(struct __pyx_t_8csiquant_6ctypes_UData &__pyx_v_out, struct __pyx_t_8csiquant_6ctypes_UData const &__pyx_v_lhs, struct __pyx_t_8csiquant_6ctypes_UData const &__pyx_v_rhs) {
  enum __pyx_t_8csiquant_6ctypes_Error __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("min_udata", 0);

  /* "csiquant/ctypes.pxd":103
 * #DimensionMismatch
 * cdef inline Error min_udata(UData& out, const UData& lhs, const UData& rhs):
 *     if not eq_ddata(lhs.dimensions, rhs.dimensions):             # <<<<<<<<<<<<<<
 *         return DimensionMismatch
 * 
 */
  __pyx_t_1 = ((!(__pyx_f_8csiquant_6ctypes_eq_ddata(__pyx_v_lhs.dimensions, __pyx_v_rhs.dimensions) != 0)) != 0);
  if (__pyx_t_1) {

    /* "csiquant/ctypes.pxd":104
 * cdef inline Error min_udata(UData& out, const UData& lhs, const UData& rhs):
 *     if not eq_ddata(lhs.dimensions, rhs.dimensions):
 *         return DimensionMismatch             # <<<<<<<<<<<<<<
 * 
 *     if lhs.scale < rhs.scale:
 */
    __pyx_r = __pyx_e_8csiquant_6ctypes_DimensionMismatch;
    goto __pyx_L0;

    /* "csiquant/ctypes.pxd":103
 * #DimensionMismatch
 * cdef inline Error min_udata(UData& out, const UData& lhs, const UData& rhs):
 *     if not eq_ddata(lhs.dimensions, rhs.dimensions):             # <<<<<<<<<<<<<<
 *         return DimensionMismatch
 * 
 */
  }

  /* "csiquant/ctypes.pxd":106
 *         return DimensionMismatch
 * 
 *     if lhs.scale < rhs.scale:             # <<<<<<<<<<<<<<
 *         (&out)[0] = lhs
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_lhs.scale < __pyx_v_rhs.scale) != 0);
  if (__pyx_t_1) {

    /* "csiquant/ctypes.pxd":107
 * 
 *     if lhs.scale < rhs.scale:
 *         (&out)[0] = lhs             # <<<<<<<<<<<<<<
 *     else:
 *         (&out)[0] = rhs
 */
    ((&__pyx_v_out)[0]) = __pyx_v_lhs;

    /* "csiquant/ctypes.pxd":106
 *         return DimensionMismatch
 * 
 *     if lhs.scale < rhs.scale:             # <<<<<<<<<<<<<<
 *         (&out)[0] = lhs
 *     else:
 */
    goto __pyx_L4;
  }

  /* "csiquant/ctypes.pxd":109
 *         (&out)[0] = lhs
 *     else:
 *         (&out)[0] = rhs             # <<<<<<<<<<<<<<
 * 
 *     return Success
 */
  /*else*/ {
    ((&__pyx_v_out)[0]) = __pyx_v_rhs;
  }
  __pyx_L4:;

  /* "csiquant/ctypes.pxd":111
 *         (&out)[0] = rhs
 * 
 *     return Success             # <<<<<<<<<<<<<<
 * 
 * ## begin qdata functions
 */
  __pyx_r = __pyx_e_8csiquant_6ctypes_Success;
  goto __pyx_L0;

  /* "csiquant/ctypes.pxd":102
 * #Success
 * #DimensionMismatch
 * cdef inline Error min_udata(UData& out, const UData& lhs, const UData& rhs):             # <<<<<<<<<<<<<<
 *     if not eq_ddata(lhs.dimensions, rhs.dimensions):
 *         return DimensionMismatch
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/ctypes.pxd":116
 * 
 * #Success
 * cdef inline Error mul_qdata(QData& out, const QData& lhs, const QData& rhs):             # <<<<<<<<<<<<<<
 *     cdef Error error_code
 * 
 */

static CYTHON_INLINE enum __pyx_t_8csiquant_6ctypes_Error __pyx_f_8csiquant_6ctypes_mul_qdata(struct __pyx_t_8csiquant_6ctypes_QData &__pyx_v_out, struct __pyx_t_8csiquant_6ctypes_QData const &__pyx_v_lhs, struct __pyx_t_8csiquant_6ctypes_QData const &__pyx_v_rhs) {
  enum __pyx_t_8csiquant_6ctypes_Error __pyx_v_error_code;
  enum __pyx_t_8csiquant_6ctypes_Error __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mul_qdata", 0);

  /* "csiquant/ctypes.pxd":119
 *     cdef Error error_code
 * 
 *     error_code = mul_udata(out.units, lhs.units, rhs.units)             # <<<<<<<<<<<<<<
 *     if error_code:
 *         return error_code
 */
  __pyx_v_error_code = __pyx_f_8csiquant_6ctypes_mul_udata(__pyx_v_out.units, __pyx_v_lhs.units, __pyx_v_rhs.units);

  /* "csiquant/ctypes.pxd":120
 * 
 *     error_code = mul_udata(out.units, lhs.units, rhs.units)
 *     if error_code:             # <<<<<<<<<<<<<<
 *         return error_code
 * 
 */
  if (__pyx_v_error_code) {

    /* "csiquant/ctypes.pxd":121
 *     error_code = mul_udata(out.units, lhs.units, rhs.units)
 *     if error_code:
 *         return error_code             # <<<<<<<<<<<<<<
 * 
 *     out.quantity = lhs.quantity * rhs.quantity
 */
    __pyx_r = __pyx_v_error_code;
    goto __pyx_L0;

    /* "csiquant/ctypes.pxd":120
 * 
 *     error_code = mul_udata(out.units, lhs.units, rhs.units)
 *     if error_code:             # <<<<<<<<<<<<<<
 *         return error_code
 * 
 */
  }

  /* "csiquant/ctypes.pxd":123
 *         return error_code
 * 
 *     out.quantity = lhs.quantity * rhs.quantity             # <<<<<<<<<<<<<<
 * 
 *     return Success
 */
  __pyx_v_out.quantity = (__pyx_v_lhs.quantity * __pyx_v_rhs.quantity);

  /* "csiquant/ctypes.pxd":125
 *     out.quantity = lhs.quantity * rhs.quantity
 * 
 *     return Success             # <<<<<<<<<<<<<<
 * 
 * #Success
 */
  __pyx_r = __pyx_e_8csiquant_6ctypes_Success;
  goto __pyx_L0;

  /* "csiquant/ctypes.pxd":116
 * 
 * #Success
 * cdef inline Error mul_qdata(QData& out, const QData& lhs, const QData& rhs):             # <<<<<<<<<<<<<<
 *     cdef Error error_code
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/ctypes.pxd":129
 * #Success
 * #ZeroDiv
 * cdef inline Error div_qdata(QData& out, const QData& lhs, const QData& rhs):             # <<<<<<<<<<<<<<
 *     if rhs.quantity == 0.0:
 *         return ZeroDiv
 */

static CYTHON_INLINE enum __pyx_t_8csiquant_6ctypes_Error __pyx_f_8csiquant_6ctypes_div_qdata(struct __pyx_t_8csiquant_6ctypes_QData &__pyx_v_out, struct __pyx_t_8csiquant_6ctypes_QData const &__pyx_v_lhs, struct __pyx_t_8csiquant_6ctypes_QData const &__pyx_v_rhs) {
  enum __pyx_t_8csiquant_6ctypes_Error __pyx_v_error_code;
  enum __pyx_t_8csiquant_6ctypes_Error __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("div_qdata", 0);

  /* "csiquant/ctypes.pxd":130
 * #ZeroDiv
 * cdef inline Error div_qdata(QData& out, const QData& lhs, const QData& rhs):
 *     if rhs.quantity == 0.0:             # <<<<<<<<<<<<<<
 *         return ZeroDiv
 * 
 */
  __pyx_t_1 = ((__pyx_v_rhs.quantity == 0.0) != 0);
  if (__pyx_t_1) {

    /* "csiquant/ctypes.pxd":131
 * cdef inline Error div_qdata(QData& out, const QData& lhs, const QData& rhs):
 *     if rhs.quantity == 0.0:
 *         return ZeroDiv             # <<<<<<<<<<<<<<
 * 
 *     cdef Error error_code
 */
    __pyx_r = __pyx_e_8csiquant_6ctypes_ZeroDiv;
    goto __pyx_L0;

    /* "csiquant/ctypes.pxd":130
 * #ZeroDiv
 * cdef inline Error div_qdata(QData& out, const QData& lhs, const QData& rhs):
 *     if rhs.quantity == 0.0:             # <<<<<<<<<<<<<<
 *         return ZeroDiv
 * 
 */
  }

  /* "csiquant/ctypes.pxd":135
 *     cdef Error error_code
 * 
 *     error_code = div_udata(out.units, lhs.units, rhs.units)             # <<<<<<<<<<<<<<
 *     if error_code:
 *         return error_code
 */
  __pyx_v_error_code = __pyx_f_8csiquant_6ctypes_div_udata(__pyx_v_out.units, __pyx_v_lhs.units, __pyx_v_rhs.units);

  /* "csiquant/ctypes.pxd":136
 * 
 *     error_code = div_udata(out.units, lhs.units, rhs.units)
 *     if error_code:             # <<<<<<<<<<<<<<
 *         return error_code
 * 
 */
  if (__pyx_v_error_code) {

    /* "csiquant/ctypes.pxd":137
 *     error_code = div_udata(out.units, lhs.units, rhs.units)
 *     if error_code:
 *         return error_code             # <<<<<<<<<<<<<<
 * 
 *     out.quantity = lhs.quantity / rhs.quantity
 */
    __pyx_r = __pyx_v_error_code;
    goto __pyx_L0;

    /* "csiquant/ctypes.pxd":136
 * 
 *     error_code = div_udata(out.units, lhs.units, rhs.units)
 *     if error_code:             # <<<<<<<<<<<<<<
 *         return error_code
 * 
 */
  }

  /* "csiquant/ctypes.pxd":139
 *         return error_code
 * 
 *     out.quantity = lhs.quantity / rhs.quantity             # <<<<<<<<<<<<<<
 *     return Success
 * 
 */
  if (unlikely(__pyx_v_rhs.quantity == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(3, 139, __pyx_L1_error)
  }
  __pyx_v_out.quantity = (__pyx_v_lhs.quantity / __pyx_v_rhs.quantity);

  /* "csiquant/ctypes.pxd":140
 * 
 *     out.quantity = lhs.quantity / rhs.quantity
 *     return Success             # <<<<<<<<<<<<<<
 * 
 * #Success
 */
  __pyx_r = __pyx_e_8csiquant_6ctypes_Success;
  goto __pyx_L0;

  /* "csiquant/ctypes.pxd":129
 * #Success
 * #ZeroDiv
 * cdef inline Error div_qdata(QData& out, const QData& lhs, const QData& rhs):             # <<<<<<<<<<<<<<
 *     if rhs.quantity == 0.0:
 *         return ZeroDiv
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("csiquant.ctypes.div_qdata", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = (enum __pyx_t_8csiquant_6ctypes_Error) 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/ctypes.pxd":143
 * 
 * #Success
 * cdef inline Error pow_qdata(QData& out, const QData& lhs, double rhs):             # <<<<<<<<<<<<<<
 *     cdef Error error_code
 * 
 */

static CYTHON_INLINE enum __pyx_t_8csiquant_6ctypes_Error __pyx_f_8csiquant_6ctypes_pow_qdata(struct __pyx_t_8csiquant_6ctypes_QData &__pyx_v_out, struct __pyx_t_8csiquant_6ctypes_QData const &__pyx_v_lhs, double __pyx_v_rhs) {
  enum __pyx_t_8csiquant_6ctypes_Error __pyx_v_error_code;
  enum __pyx_t_8csiquant_6ctypes_Error __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pow_qdata", 0);

  /* "csiquant/ctypes.pxd":146
 *     cdef Error error_code
 * 
 *     error_code = pow_udata(out.units, lhs.units, rhs)             # <<<<<<<<<<<<<<
 *     if error_code:
 *         return error_code
 */
  __pyx_v_error_code = __pyx_f_8csiquant_6ctypes_pow_udata(__pyx_v_out.units, __pyx_v_lhs.units, __pyx_v_rhs);

  /* "csiquant/ctypes.pxd":147
 * 
 *     error_code = pow_udata(out.units, lhs.units, rhs)
 *     if error_code:             # <<<<<<<<<<<<<<
 *         return error_code
 * 
 */
  if (__pyx_v_error_code) {

    /* "csiquant/ctypes.pxd":148
 *     error_code = pow_udata(out.units, lhs.units, rhs)
 *     if error_code:
 *         return error_code             # <<<<<<<<<<<<<<
 * 
 *     out.quantity = lhs.quantity ** rhs
 */
    __pyx_r = __pyx_v_error_code;
    goto __pyx_L0;

    /* "csiquant/ctypes.pxd":147
 * 
 *     error_code = pow_udata(out.units, lhs.units, rhs)
 *     if error_code:             # <<<<<<<<<<<<<<
 *         return error_code
 * 
 */
  }

  /* "csiquant/ctypes.pxd":150
 *         return error_code
 * 
 *     out.quantity = lhs.quantity ** rhs             # <<<<<<<<<<<<<<
 * 
 *     return Success
 */
  __pyx_v_out.quantity = pow(((double)__pyx_v_lhs.quantity), __pyx_v_rhs);

  /* "csiquant/ctypes.pxd":152
 *     out.quantity = lhs.quantity ** rhs
 * 
 *     return Success             # <<<<<<<<<<<<<<
 * 
 * #Success
 */
  __pyx_r = __pyx_e_8csiquant_6ctypes_Success;
  goto __pyx_L0;

  /* "csiquant/ctypes.pxd":143
 * 
 * #Success
 * cdef inline Error pow_qdata(QData& out, const QData& lhs, double rhs):             # <<<<<<<<<<<<<<
 *     cdef Error error_code
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/ctypes.pxd":156
 * #Success
 * #DimensionMismatch
 * cdef inline Error add_qdata(QData& out, const QData& lhs, const QData& rhs):             # <<<<<<<<<<<<<<
 *     cdef Error error_code
 * 
 */

static CYTHON_INLINE enum __pyx_t_8csiquant_6ctypes_Error __pyx_f_8csiquant_6ctypes_add_qdata(struct __pyx_t_8csiquant_6ctypes_QData &__pyx_v_out, struct __pyx_t_8csiquant_6ctypes_QData const &__pyx_v_lhs, struct __pyx_t_8csiquant_6ctypes_QData const &__pyx_v_rhs) {
  enum __pyx_t_8csiquant_6ctypes_Error __pyx_v_error_code;
  enum __pyx_t_8csiquant_6ctypes_Error __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_qdata", 0);

  /* "csiquant/ctypes.pxd":159
 *     cdef Error error_code
 * 
 *     error_code = min_udata(out.units, lhs.units, rhs.units)             # <<<<<<<<<<<<<<
 *     if error_code:
 *         return error_code
 */
  __pyx_v_error_code = __pyx_f_8csiquant_6ctypes_min_udata(__pyx_v_out.units, __pyx_v_lhs.units, __pyx_v_rhs.units);

  /* "csiquant/ctypes.pxd":160
 * 
 *     error_code = min_udata(out.units, lhs.units, rhs.units)
 *     if error_code:             # <<<<<<<<<<<<<<
 *         return error_code
 * 
 */
  if (__pyx_v_error_code) {

    /* "csiquant/ctypes.pxd":161
 *     error_code = min_udata(out.units, lhs.units, rhs.units)
 *     if error_code:
 *         return error_code             # <<<<<<<<<<<<<<
 * 
 *     out.quantity = unsafe_extract_quantity(lhs, out.units)
 */
    __pyx_r = __pyx_v_error_code;
    goto __pyx_L0;

    /* "csiquant/ctypes.pxd":160
 * 
 *     error_code = min_udata(out.units, lhs.units, rhs.units)
 *     if error_code:             # <<<<<<<<<<<<<<
 *         return error_code
 * 
 */
  }

  /* "csiquant/ctypes.pxd":163
 *         return error_code
 * 
 *     out.quantity = unsafe_extract_quantity(lhs, out.units)             # <<<<<<<<<<<<<<
 *     out.quantity += unsafe_extract_quantity(rhs, out.units)
 * 
 */
  __pyx_v_out.quantity = __pyx_f_8csiquant_6ctypes_unsafe_extract_quantity(__pyx_v_lhs, __pyx_v_out.units);

  /* "csiquant/ctypes.pxd":164
 * 
 *     out.quantity = unsafe_extract_quantity(lhs, out.units)
 *     out.quantity += unsafe_extract_quantity(rhs, out.units)             # <<<<<<<<<<<<<<
 * 
 *     return Success
 */
  __pyx_v_out.quantity = (__pyx_v_out.quantity + __pyx_f_8csiquant_6ctypes_unsafe_extract_quantity(__pyx_v_rhs, __pyx_v_out.units));

  /* "csiquant/ctypes.pxd":166
 *     out.quantity += unsafe_extract_quantity(rhs, out.units)
 * 
 *     return Success             # <<<<<<<<<<<<<<
 * 
 * #Success
 */
  __pyx_r = __pyx_e_8csiquant_6ctypes_Success;
  goto __pyx_L0;

  /* "csiquant/ctypes.pxd":156
 * #Success
 * #DimensionMismatch
 * cdef inline Error add_qdata(QData& out, const QData& lhs, const QData& rhs):             # <<<<<<<<<<<<<<
 *     cdef Error error_code
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/ctypes.pxd":170
 * #Success
 * #DimensionMismatch
 * cdef inline Error sub_qdata(QData& out, const QData& lhs, const QData& rhs):             # <<<<<<<<<<<<<<
 *     cdef Error error_code
 * 
 */

static CYTHON_INLINE enum __pyx_t_8csiquant_6ctypes_Error __pyx_f_8csiquant_6ctypes_sub_qdata(struct __pyx_t_8csiquant_6ctypes_QData &__pyx_v_out, struct __pyx_t_8csiquant_6ctypes_QData const &__pyx_v_lhs, struct __pyx_t_8csiquant_6ctypes_QData const &__pyx_v_rhs) {
  enum __pyx_t_8csiquant_6ctypes_Error __pyx_v_error_code;
  enum __pyx_t_8csiquant_6ctypes_Error __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sub_qdata", 0);

  /* "csiquant/ctypes.pxd":173
 *     cdef Error error_code
 * 
 *     error_code = min_udata(out.units, lhs.units, rhs.units)             # <<<<<<<<<<<<<<
 *     if error_code:
 *         return error_code
 */
  __pyx_v_error_code = __pyx_f_8csiquant_6ctypes_min_udata(__pyx_v_out.units, __pyx_v_lhs.units, __pyx_v_rhs.units);

  /* "csiquant/ctypes.pxd":174
 * 
 *     error_code = min_udata(out.units, lhs.units, rhs.units)
 *     if error_code:             # <<<<<<<<<<<<<<
 *         return error_code
 * 
 */
  if (__pyx_v_error_code) {

    /* "csiquant/ctypes.pxd":175
 *     error_code = min_udata(out.units, lhs.units, rhs.units)
 *     if error_code:
 *         return error_code             # <<<<<<<<<<<<<<
 * 
 *     out.quantity = unsafe_extract_quantity(lhs, out.units)
 */
    __pyx_r = __pyx_v_error_code;
    goto __pyx_L0;

    /* "csiquant/ctypes.pxd":174
 * 
 *     error_code = min_udata(out.units, lhs.units, rhs.units)
 *     if error_code:             # <<<<<<<<<<<<<<
 *         return error_code
 * 
 */
  }

  /* "csiquant/ctypes.pxd":177
 *         return error_code
 * 
 *     out.quantity = unsafe_extract_quantity(lhs, out.units)             # <<<<<<<<<<<<<<
 *     out.quantity -= unsafe_extract_quantity(rhs, out.units)
 *     return Success
 */
  __pyx_v_out.quantity = __pyx_f_8csiquant_6ctypes_unsafe_extract_quantity(__pyx_v_lhs, __pyx_v_out.units);

  /* "csiquant/ctypes.pxd":178
 * 
 *     out.quantity = unsafe_extract_quantity(lhs, out.units)
 *     out.quantity -= unsafe_extract_quantity(rhs, out.units)             # <<<<<<<<<<<<<<
 *     return Success
 * 
 */
  __pyx_v_out.quantity = (__pyx_v_out.quantity - __pyx_f_8csiquant_6ctypes_unsafe_extract_quantity(__pyx_v_rhs, __pyx_v_out.units));

  /* "csiquant/ctypes.pxd":179
 *     out.quantity = unsafe_extract_quantity(lhs, out.units)
 *     out.quantity -= unsafe_extract_quantity(rhs, out.units)
 *     return Success             # <<<<<<<<<<<<<<
 * 
 * #Success
 */
  __pyx_r = __pyx_e_8csiquant_6ctypes_Success;
  goto __pyx_L0;

  /* "csiquant/ctypes.pxd":170
 * #Success
 * #DimensionMismatch
 * cdef inline Error sub_qdata(QData& out, const QData& lhs, const QData& rhs):             # <<<<<<<<<<<<<<
 *     cdef Error error_code
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/ctypes.pxd":183
 * #Success
 * #DimensionMismatch
 * cdef inline Error cvt_quantity(QData& out, const QData& src, const UData& units):             # <<<<<<<<<<<<<<
 *     cdef Error error_code
 * 
 */

static CYTHON_INLINE enum __pyx_t_8csiquant_6ctypes_Error __pyx_f_8csiquant_6ctypes_cvt_quantity(struct __pyx_t_8csiquant_6ctypes_QData &__pyx_v_out, struct __pyx_t_8csiquant_6ctypes_QData const &__pyx_v_src, struct __pyx_t_8csiquant_6ctypes_UData const &__pyx_v_units) {
  enum __pyx_t_8csiquant_6ctypes_Error __pyx_v_error_code;
  enum __pyx_t_8csiquant_6ctypes_Error __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cvt_quantity", 0);

  /* "csiquant/ctypes.pxd":186
 *     cdef Error error_code
 * 
 *     error_code = extract_quantity(out.quantity, src, units)             # <<<<<<<<<<<<<<
 *     if error_code:
 *         return error_code
 */
  __pyx_v_error_code = __pyx_f_8csiquant_6ctypes_extract_quantity(__pyx_v_out.quantity, __pyx_v_src, __pyx_v_units);

  /* "csiquant/ctypes.pxd":187
 * 
 *     error_code = extract_quantity(out.quantity, src, units)
 *     if error_code:             # <<<<<<<<<<<<<<
 *         return error_code
 * 
 */
  if (__pyx_v_error_code) {

    /* "csiquant/ctypes.pxd":188
 *     error_code = extract_quantity(out.quantity, src, units)
 *     if error_code:
 *         return error_code             # <<<<<<<<<<<<<<
 * 
 *     out.units = units
 */
    __pyx_r = __pyx_v_error_code;
    goto __pyx_L0;

    /* "csiquant/ctypes.pxd":187
 * 
 *     error_code = extract_quantity(out.quantity, src, units)
 *     if error_code:             # <<<<<<<<<<<<<<
 *         return error_code
 * 
 */
  }

  /* "csiquant/ctypes.pxd":190
 *         return error_code
 * 
 *     out.units = units             # <<<<<<<<<<<<<<
 *     return Success
 * 
 */
  __pyx_v_out.units = __pyx_v_units;

  /* "csiquant/ctypes.pxd":191
 * 
 *     out.units = units
 *     return Success             # <<<<<<<<<<<<<<
 * 
 * #Success
 */
  __pyx_r = __pyx_e_8csiquant_6ctypes_Success;
  goto __pyx_L0;

  /* "csiquant/ctypes.pxd":183
 * #Success
 * #DimensionMismatch
 * cdef inline Error cvt_quantity(QData& out, const QData& src, const UData& units):             # <<<<<<<<<<<<<<
 *     cdef Error error_code
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/ctypes.pxd":195
 * #Success
 * #DimensionMismatch
 * cdef inline Error extract_quantity(double& out, const QData& src, const UData& units):             # <<<<<<<<<<<<<<
 *     if not eq_ddata(src.units.dimensions, units.dimensions):
 *         return DimensionMismatch
 */

static CYTHON_INLINE enum __pyx_t_8csiquant_6ctypes_Error __pyx_f_8csiquant_6ctypes_extract_quantity(double &__pyx_v_out, struct __pyx_t_8csiquant_6ctypes_QData const &__pyx_v_src, struct __pyx_t_8csiquant_6ctypes_UData const &__pyx_v_units) {
  enum __pyx_t_8csiquant_6ctypes_Error __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("extract_quantity", 0);

  /* "csiquant/ctypes.pxd":196
 * #DimensionMismatch
 * cdef inline Error extract_quantity(double& out, const QData& src, const UData& units):
 *     if not eq_ddata(src.units.dimensions, units.dimensions):             # <<<<<<<<<<<<<<
 *         return DimensionMismatch
 *     (&out)[0] = unsafe_extract_quantity(src, units)
 */
  __pyx_t_1 = ((!(__pyx_f_8csiquant_6ctypes_eq_ddata(__pyx_v_src.units.dimensions, __pyx_v_units.dimensions) != 0)) != 0);
  if (__pyx_t_1) {

    /* "csiquant/ctypes.pxd":197
 * cdef inline Error extract_quantity(double& out, const QData& src, const UData& units):
 *     if not eq_ddata(src.units.dimensions, units.dimensions):
 *         return DimensionMismatch             # <<<<<<<<<<<<<<
 *     (&out)[0] = unsafe_extract_quantity(src, units)
 *     return Success
 */
    __pyx_r = __pyx_e_8csiquant_6ctypes_DimensionMismatch;
    goto __pyx_L0;

    /* "csiquant/ctypes.pxd":196
 * #DimensionMismatch
 * cdef inline Error extract_quantity(double& out, const QData& src, const UData& units):
 *     if not eq_ddata(src.units.dimensions, units.dimensions):             # <<<<<<<<<<<<<<
 *         return DimensionMismatch
 *     (&out)[0] = unsafe_extract_quantity(src, units)
 */
  }

  /* "csiquant/ctypes.pxd":198
 *     if not eq_ddata(src.units.dimensions, units.dimensions):
 *         return DimensionMismatch
 *     (&out)[0] = unsafe_extract_quantity(src, units)             # <<<<<<<<<<<<<<
 *     return Success
 * 
 */
  ((&__pyx_v_out)[0]) = __pyx_f_8csiquant_6ctypes_unsafe_extract_quantity(__pyx_v_src, __pyx_v_units);

  /* "csiquant/ctypes.pxd":199
 *         return DimensionMismatch
 *     (&out)[0] = unsafe_extract_quantity(src, units)
 *     return Success             # <<<<<<<<<<<<<<
 * 
 * #Success
 */
  __pyx_r = __pyx_e_8csiquant_6ctypes_Success;
  goto __pyx_L0;

  /* "csiquant/ctypes.pxd":195
 * #Success
 * #DimensionMismatch
 * cdef inline Error extract_quantity(double& out, const QData& src, const UData& units):             # <<<<<<<<<<<<<<
 *     if not eq_ddata(src.units.dimensions, units.dimensions):
 *         return DimensionMismatch
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "csiquant/ctypes.pxd":203
 * #Success
 * #DimensionMismatch
 * cdef inline Error cmp_qdata(int& out, const QData& lhs, const QData& rhs):             # <<<<<<<<<<<<<<
 *     if not eq_ddata(lhs.units.dimensions, rhs.units.dimensions):
 *         return DimensionMismatch
 */

static CYTHON_INLINE enum __pyx_t_8csiquant_6ctypes_Error __pyx_f_8csiquant_6ctypes_cmp_qdata(int &__pyx_v_out, struct __pyx_t_8csiquant_6ctypes_QData const &__pyx_v_lhs, struct __pyx_t_8csiquant_6ctypes_QData const &__pyx_v_rhs) {
  PyObject *__pyx_v_lhs_norm = 0;
  PyObject *__pyx_v_rhs_norm = 0;
  enum __pyx_t_8csiquant_6ctypes_Error __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("cmp_qdata", 0);

  /* "csiquant/ctypes.pxd":204
 * #DimensionMismatch
 * cdef inline Error cmp_qdata(int& out, const QData& lhs, const QData& rhs):
 *     if not eq_ddata(lhs.units.dimensions, rhs.units.dimensions):             # <<<<<<<<<<<<<<
 *         return DimensionMismatch
 * 
 */
  __pyx_t_1 = ((!(__pyx_f_8csiquant_6ctypes_eq_ddata(__pyx_v_lhs.units.dimensions, __pyx_v_rhs.units.dimensions) != 0)) != 0);
  if (__pyx_t_1) {

    /* "csiquant/ctypes.pxd":205
 * cdef inline Error cmp_qdata(int& out, const QData& lhs, const QData& rhs):
 *     if not eq_ddata(lhs.units.dimensions, rhs.units.dimensions):
 *         return DimensionMismatch             # <<<<<<<<<<<<<<
 * 
 *     cdef lhs_norm = lhs.quantity * lhs.units.scale
 */
    __pyx_r = __pyx_e_8csiquant_6ctypes_DimensionMismatch;
    goto __pyx_L0;

    /* "csiquant/ctypes.pxd":204
 * #DimensionMismatch
 * cdef inline Error cmp_qdata(int& out, const QData& lhs, const QData& rhs):
 *     if not eq_ddata(lhs.units.dimensions, rhs.units.dimensions):             # <<<<<<<<<<<<<<
 *         return DimensionMismatch
 * 
 */
  }

  /* "csiquant/ctypes.pxd":207
 *         return DimensionMismatch
 * 
 *     cdef lhs_norm = lhs.quantity * lhs.units.scale             # <<<<<<<<<<<<<<
 *     cdef rhs_norm = rhs.quantity * rhs.units.scale
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_lhs.quantity * __pyx_v_lhs.units.scale)); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_lhs_norm = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "csiquant/ctypes.pxd":208
 * 
 *     cdef lhs_norm = lhs.quantity * lhs.units.scale
 *     cdef rhs_norm = rhs.quantity * rhs.units.scale             # <<<<<<<<<<<<<<
 * 
 *     if lhs_norm > rhs_norm:
 */
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_rhs.quantity * __pyx_v_rhs.units.scale)); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_rhs_norm = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "csiquant/ctypes.pxd":210
 *     cdef rhs_norm = rhs.quantity * rhs.units.scale
 * 
 *     if lhs_norm > rhs_norm:             # <<<<<<<<<<<<<<
 *         (&out)[0] = 1
 *     elif lhs_norm < rhs_norm:
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_lhs_norm, __pyx_v_rhs_norm, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 210, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(3, 210, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_1) {

    /* "csiquant/ctypes.pxd":211
 * 
 *     if lhs_norm > rhs_norm:
 *         (&out)[0] = 1             # <<<<<<<<<<<<<<
 *     elif lhs_norm < rhs_norm:
 *         (&out)[0] = -1
 */
    ((&__pyx_v_out)[0]) = 1;

    /* "csiquant/ctypes.pxd":210
 *     cdef rhs_norm = rhs.quantity * rhs.units.scale
 * 
 *     if lhs_norm > rhs_norm:             # <<<<<<<<<<<<<<
 *         (&out)[0] = 1
 *     elif lhs_norm < rhs_norm:
 */
    goto __pyx_L4;
  }

  /* "csiquant/ctypes.pxd":212
 *     if lhs_norm > rhs_norm:
 *         (&out)[0] = 1
 *     elif lhs_norm < rhs_norm:             # <<<<<<<<<<<<<<
 *         (&out)[0] = -1
 *     else:
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_lhs_norm, __pyx_v_rhs_norm, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 212, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(3, 212, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_1) {

    /* "csiquant/ctypes.pxd":213
 *         (&out)[0] = 1
 *     elif lhs_norm < rhs_norm:
 *         (&out)[0] = -1             # <<<<<<<<<<<<<<
 *     else:
 *         (&out)[0] = 0
 */
    ((&__pyx_v_out)[0]) = -1;

    /* "csiquant/ctypes.pxd":212
 *     if lhs_norm > rhs_norm:
 *         (&out)[0] = 1
 *     elif lhs_norm < rhs_norm:             # <<<<<<<<<<<<<<
 *         (&out)[0] = -1
 *     else:
 */
    goto __pyx_L4;
  }

  /* "csiquant/ctypes.pxd":215
 *         (&out)[0] = -1
 *     else:
 *         (&out)[0] = 0             # <<<<<<<<<<<<<<
 * 
 *     return Success
 */
  /*else*/ {
    ((&__pyx_v_out)[0]) = 0;
  }
  __pyx_L4:;

  /* "csiquant/ctypes.pxd":217
 *         (&out)[0] = 0
 * 
 *     return Success             # <<<<<<<<<<<<<<
 * 
 */
  __pyx_r = __pyx_e_8csiquant_6ctypes_Success;
  goto __pyx_L0;

  /* "csiquant/ctypes.pxd":203
 * #Success
 * #DimensionMismatch
 * cdef inline Error cmp_qdata(int& out, const QData& lhs, const QData& rhs):             # <<<<<<<<<<<<<<
 *     if not eq_ddata(lhs.units.dimensions, rhs.units.dimensions):
 *         return DimensionMismatch
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("csiquant.ctypes.cmp_qdata", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = (enum __pyx_t_8csiquant_6ctypes_Error) 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_lhs_norm);
  __Pyx_XDECREF(__pyx_v_rhs_norm);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "carray.to_py":112
 * 
 * @cname("__Pyx_carray_to_py_double")
 * cdef inline list __Pyx_carray_to_py_double(base_type *v, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef object value
 */

static CYTHON_INLINE PyObject *__Pyx_carray_to_py_double(double *__pyx_v_v, Py_ssize_t __pyx_v_length) {
  size_t __pyx_v_i;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_l = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  __Pyx_RefNannySetupContext("__Pyx_carray_to_py_double", 0);

  /* "carray.to_py":115
 *     cdef size_t i
 *     cdef object value
 *     l = PyList_New(length)             # <<<<<<<<<<<<<<
 *     for i in range(<size_t>length):
 *         value = v[i]
 */
  __pyx_t_1 = PyList_New(__pyx_v_length); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_l = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "carray.to_py":116
 *     cdef object value
 *     l = PyList_New(length)
 *     for i in range(<size_t>length):             # <<<<<<<<<<<<<<
 *         value = v[i]
 *         Py_INCREF(value)
 */
  __pyx_t_2 = ((size_t)__pyx_v_length);
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "carray.to_py":117
 *     l = PyList_New(length)
 *     for i in range(<size_t>length):
 *         value = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(value)
 *         PyList_SET_ITEM(l, i, value)
 */
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "carray.to_py":118
 *     for i in range(<size_t>length):
 *         value = v[i]
 *         Py_INCREF(value)             # <<<<<<<<<<<<<<
 *         PyList_SET_ITEM(l, i, value)
 *     return l
 */
    Py_INCREF(__pyx_v_value);

    /* "carray.to_py":119
 *         value = v[i]
 *         Py_INCREF(value)
 *         PyList_SET_ITEM(l, i, value)             # <<<<<<<<<<<<<<
 *     return l
 * 
 */
    PyList_SET_ITEM(__pyx_v_l, __pyx_v_i, __pyx_v_value);
  }

  /* "carray.to_py":120
 *         Py_INCREF(value)
 *         PyList_SET_ITEM(l, i, value)
 *     return l             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_l);
  __pyx_r = __pyx_v_l;
  goto __pyx_L0;

  /* "carray.to_py":112
 * 
 * @cname("__Pyx_carray_to_py_double")
 * cdef inline list __Pyx_carray_to_py_double(base_type *v, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef object value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("carray.to_py.__Pyx_carray_to_py_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_l);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "carray.to_py":124
 * 
 * @cname("__Pyx_carray_to_tuple_double")
 * cdef inline tuple __Pyx_carray_to_tuple_double(base_type *v, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef object value
 */

static CYTHON_INLINE PyObject *__Pyx_carray_to_tuple_double(double *__pyx_v_v, Py_ssize_t __pyx_v_length) {
  size_t __pyx_v_i;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  __Pyx_RefNannySetupContext("__Pyx_carray_to_tuple_double", 0);

  /* "carray.to_py":127
 *     cdef size_t i
 *     cdef object value
 *     t = PyTuple_New(length)             # <<<<<<<<<<<<<<
 *     for i in range(<size_t>length):
 *         value = v[i]
 */
  __pyx_t_1 = PyTuple_New(__pyx_v_length); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_t = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "carray.to_py":128
 *     cdef object value
 *     t = PyTuple_New(length)
 *     for i in range(<size_t>length):             # <<<<<<<<<<<<<<
 *         value = v[i]
 *         Py_INCREF(value)
 */
  __pyx_t_2 = ((size_t)__pyx_v_length);
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "carray.to_py":129
 *     t = PyTuple_New(length)
 *     for i in range(<size_t>length):
 *         value = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(value)
 *         PyTuple_SET_ITEM(t, i, value)
 */
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "carray.to_py":130
 *     for i in range(<size_t>length):
 *         value = v[i]
 *         Py_INCREF(value)             # <<<<<<<<<<<<<<
 *         PyTuple_SET_ITEM(t, i, value)
 *     return t
 */
    Py_INCREF(__pyx_v_value);

    /* "carray.to_py":131
 *         value = v[i]
 *         Py_INCREF(value)
 *         PyTuple_SET_ITEM(t, i, value)             # <<<<<<<<<<<<<<
 *     return t
 */
    PyTuple_SET_ITEM(__pyx_v_t, __pyx_v_i, __pyx_v_value);
  }

  /* "carray.to_py":132
 *         Py_INCREF(value)
 *         PyTuple_SET_ITEM(t, i, value)
 *     return t             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_t);
  __pyx_r = __pyx_v_t;
  goto __pyx_L0;

  /* "carray.to_py":124
 * 
 * @cname("__Pyx_carray_to_tuple_double")
 * cdef inline tuple __Pyx_carray_to_tuple_double(base_type *v, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef object value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("carray.to_py.__Pyx_carray_to_tuple_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_8csiquant_10quantities_SIUnit __pyx_vtable_8csiquant_10quantities_SIUnit;

static PyObject *__pyx_tp_new_8csiquant_10quantities_SIUnit(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8csiquant_10quantities_SIUnit *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8csiquant_10quantities_SIUnit *)o);
  p->__pyx_vtab = __pyx_vtabptr_8csiquant_10quantities_SIUnit;
  return o;
}

static void __pyx_tp_dealloc_8csiquant_10quantities_SIUnit(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_tp_richcompare_8csiquant_10quantities_SIUnit(PyObject *o1, PyObject *o2, int op) {
  switch (op) {
    case Py_EQ: {
      return __pyx_pw_8csiquant_10quantities_6SIUnit_21__eq__(o1, o2);
    }
    case Py_NE: {
      return __pyx_pw_8csiquant_10quantities_6SIUnit_23__ne__(o1, o2);
    }
    case Py_LT: {
      return __pyx_pw_8csiquant_10quantities_6SIUnit_25__lt__(o1, o2);
    }
    case Py_GT: {
      return __pyx_pw_8csiquant_10quantities_6SIUnit_29__gt__(o1, o2);
    }
    case Py_LE: {
      return __pyx_pw_8csiquant_10quantities_6SIUnit_27__le__(o1, o2);
    }
    case Py_GE: {
      return __pyx_pw_8csiquant_10quantities_6SIUnit_31__ge__(o1, o2);
    }
    default: {
      return __Pyx_NewRef(Py_NotImplemented);
    }
  }
}

static PyObject *__pyx_getprop_8csiquant_10quantities_6SIUnit_scale(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8csiquant_10quantities_6SIUnit_5scale_1__get__(o);
}

static PyObject *__pyx_getprop_8csiquant_10quantities_6SIUnit_dimensions(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8csiquant_10quantities_6SIUnit_10dimensions_1__get__(o);
}

static PyObject *__pyx_getprop_8csiquant_10quantities_6SIUnit_kg(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8csiquant_10quantities_6SIUnit_2kg_1__get__(o);
}

static PyObject *__pyx_getprop_8csiquant_10quantities_6SIUnit_m(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8csiquant_10quantities_6SIUnit_1m_1__get__(o);
}

static PyObject *__pyx_getprop_8csiquant_10quantities_6SIUnit_s(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8csiquant_10quantities_6SIUnit_1s_1__get__(o);
}

static PyObject *__pyx_getprop_8csiquant_10quantities_6SIUnit_k(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8csiquant_10quantities_6SIUnit_1k_1__get__(o);
}

static PyObject *__pyx_getprop_8csiquant_10quantities_6SIUnit_a(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8csiquant_10quantities_6SIUnit_1a_1__get__(o);
}

static PyObject *__pyx_getprop_8csiquant_10quantities_6SIUnit_mol(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8csiquant_10quantities_6SIUnit_3mol_1__get__(o);
}

static PyObject *__pyx_getprop_8csiquant_10quantities_6SIUnit_cd(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8csiquant_10quantities_6SIUnit_2cd_1__get__(o);
}

static PyMethodDef __pyx_methods_8csiquant_10quantities_SIUnit[] = {
  {"Unit", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8csiquant_10quantities_6SIUnit_1Unit, METH_VARARGS|METH_KEYWORDS, 0},
  {"pack", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8csiquant_10quantities_6SIUnit_5pack, METH_VARARGS|METH_KEYWORDS, 0},
  {"unpack", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8csiquant_10quantities_6SIUnit_7unpack, METH_VARARGS|METH_KEYWORDS, 0},
  {"quantities", (PyCFunction)__pyx_pw_8csiquant_10quantities_6SIUnit_9quantities, METH_O, 0},
  {"values", (PyCFunction)__pyx_pw_8csiquant_10quantities_6SIUnit_12values, METH_O, 0},
  {"promote", (PyCFunction)__pyx_pw_8csiquant_10quantities_6SIUnit_15promote, METH_O, 0},
  {"demote", (PyCFunction)__pyx_pw_8csiquant_10quantities_6SIUnit_17demote, METH_O, 0},
  {"is_of", (PyCFunction)__pyx_pw_8csiquant_10quantities_6SIUnit_19is_of, METH_O, 0},
  {"cmp", (PyCFunction)__pyx_pw_8csiquant_10quantities_6SIUnit_33cmp, METH_O, 0},
  {"approx", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8csiquant_10quantities_6SIUnit_35approx, METH_VARARGS|METH_KEYWORDS, 0},
  {"compatible", (PyCFunction)__pyx_pw_8csiquant_10quantities_6SIUnit_37compatible, METH_O, 0},
  {"exp", (PyCFunction)__pyx_pw_8csiquant_10quantities_6SIUnit_47exp, METH_O, 0},
  {"__copy__", (PyCFunction)__pyx_pw_8csiquant_10quantities_6SIUnit_49__copy__, METH_NOARGS, 0},
  {"__deepcopy__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8csiquant_10quantities_6SIUnit_51__deepcopy__, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8csiquant_10quantities_6SIUnit_57__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8csiquant_10quantities_6SIUnit_59__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8csiquant_10quantities_SIUnit[] = {
  {(char *)"scale", __pyx_getprop_8csiquant_10quantities_6SIUnit_scale, 0, (char *)0, 0},
  {(char *)"dimensions", __pyx_getprop_8csiquant_10quantities_6SIUnit_dimensions, 0, (char *)0, 0},
  {(char *)"kg", __pyx_getprop_8csiquant_10quantities_6SIUnit_kg, 0, (char *)0, 0},
  {(char *)"m", __pyx_getprop_8csiquant_10quantities_6SIUnit_m, 0, (char *)0, 0},
  {(char *)"s", __pyx_getprop_8csiquant_10quantities_6SIUnit_s, 0, (char *)0, 0},
  {(char *)"k", __pyx_getprop_8csiquant_10quantities_6SIUnit_k, 0, (char *)0, 0},
  {(char *)"a", __pyx_getprop_8csiquant_10quantities_6SIUnit_a, 0, (char *)0, 0},
  {(char *)"mol", __pyx_getprop_8csiquant_10quantities_6SIUnit_mol, 0, (char *)0, 0},
  {(char *)"cd", __pyx_getprop_8csiquant_10quantities_6SIUnit_cd, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_SIUnit = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  __pyx_pw_8csiquant_10quantities_6SIUnit_39__mul__, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  __pyx_pw_8csiquant_10quantities_6SIUnit_45__pow__, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  __pyx_pw_8csiquant_10quantities_6SIUnit_43__invert__, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  __pyx_pw_8csiquant_10quantities_6SIUnit_41__truediv__, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  0, /*nb_index*/
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_matrix_multiply*/
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_inplace_matrix_multiply*/
  #endif
};

static PyTypeObject __pyx_type_8csiquant_10quantities_SIUnit = {
  PyVarObject_HEAD_INIT(0, 0)
  "csiquant.quantities.SIUnit", /*tp_name*/
  sizeof(struct __pyx_obj_8csiquant_10quantities_SIUnit), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8csiquant_10quantities_SIUnit, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_8csiquant_10quantities_6SIUnit_55__repr__, /*tp_repr*/
  &__pyx_tp_as_number_SIUnit, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  __pyx_pw_8csiquant_10quantities_6SIUnit_53__hash__, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_tp_richcompare_8csiquant_10quantities_SIUnit, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8csiquant_10quantities_SIUnit, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8csiquant_10quantities_SIUnit, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8csiquant_10quantities_6SIUnit_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8csiquant_10quantities_SIUnit, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8csiquant_10quantities_Quantity __pyx_vtable_8csiquant_10quantities_Quantity;

static PyObject *__pyx_tp_new_8csiquant_10quantities_Quantity(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8csiquant_10quantities_Quantity *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8csiquant_10quantities_Quantity *)o);
  p->__pyx_vtab = __pyx_vtabptr_8csiquant_10quantities_Quantity;
  return o;
}

static void __pyx_tp_dealloc_8csiquant_10quantities_Quantity(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_tp_richcompare_8csiquant_10quantities_Quantity(PyObject *o1, PyObject *o2, int op) {
  switch (op) {
    case Py_EQ: {
      return __pyx_pw_8csiquant_10quantities_8Quantity_11__eq__(o1, o2);
    }
    case Py_NE: {
      return __pyx_pw_8csiquant_10quantities_8Quantity_13__ne__(o1, o2);
    }
    case Py_LT: {
      return __pyx_pw_8csiquant_10quantities_8Quantity_15__lt__(o1, o2);
    }
    case Py_GT: {
      return __pyx_pw_8csiquant_10quantities_8Quantity_19__gt__(o1, o2);
    }
    case Py_LE: {
      return __pyx_pw_8csiquant_10quantities_8Quantity_17__le__(o1, o2);
    }
    case Py_GE: {
      return __pyx_pw_8csiquant_10quantities_8Quantity_21__ge__(o1, o2);
    }
    default: {
      return __Pyx_NewRef(Py_NotImplemented);
    }
  }
}

static PyObject *__pyx_getprop_8csiquant_10quantities_8Quantity_quantity(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8csiquant_10quantities_8Quantity_8quantity_1__get__(o);
}

static PyObject *__pyx_getprop_8csiquant_10quantities_8Quantity_units(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8csiquant_10quantities_8Quantity_5units_1__get__(o);
}

static PyMethodDef __pyx_methods_8csiquant_10quantities_Quantity[] = {
  {"is_of", (PyCFunction)__pyx_pw_8csiquant_10quantities_8Quantity_3is_of, METH_O, 0},
  {"get_as", (PyCFunction)__pyx_pw_8csiquant_10quantities_8Quantity_5get_as, METH_O, 0},
  {"cvt_to", (PyCFunction)__pyx_pw_8csiquant_10quantities_8Quantity_7cvt_to, METH_O, 0},
  {"round_to", (PyCFunction)__pyx_pw_8csiquant_10quantities_8Quantity_9round_to, METH_O, 0},
  {"cmp", (PyCFunction)__pyx_pw_8csiquant_10quantities_8Quantity_23cmp, METH_O, 0},
  {"compatible", (PyCFunction)__pyx_pw_8csiquant_10quantities_8Quantity_25compatible, METH_O, 0},
  {"r_approx", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8csiquant_10quantities_8Quantity_27r_approx, METH_VARARGS|METH_KEYWORDS, 0},
  {"a_approx", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8csiquant_10quantities_8Quantity_29a_approx, METH_VARARGS|METH_KEYWORDS, 0},
  {"q_approx", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8csiquant_10quantities_8Quantity_31q_approx, METH_VARARGS|METH_KEYWORDS, 0},
  {"exp", (PyCFunction)__pyx_pw_8csiquant_10quantities_8Quantity_49exp, METH_O, 0},
  {"__copy__", (PyCFunction)__pyx_pw_8csiquant_10quantities_8Quantity_51__copy__, METH_NOARGS, 0},
  {"__deepcopy__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8csiquant_10quantities_8Quantity_53__deepcopy__, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8csiquant_10quantities_8Quantity_65__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8csiquant_10quantities_8Quantity_67__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8csiquant_10quantities_Quantity[] = {
  {(char *)"quantity", __pyx_getprop_8csiquant_10quantities_8Quantity_quantity, 0, (char *)0, 0},
  {(char *)"units", __pyx_getprop_8csiquant_10quantities_8Quantity_units, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Quantity = {
  __pyx_pw_8csiquant_10quantities_8Quantity_33__add__, /*nb_add*/
  __pyx_pw_8csiquant_10quantities_8Quantity_35__sub__, /*nb_subtract*/
  __pyx_pw_8csiquant_10quantities_8Quantity_37__mul__, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  __pyx_pw_8csiquant_10quantities_8Quantity_41__pow__, /*nb_power*/
  __pyx_pw_8csiquant_10quantities_8Quantity_43__neg__, /*nb_negative*/
  0, /*nb_positive*/
  __pyx_pw_8csiquant_10quantities_8Quantity_47__abs__, /*nb_absolute*/
  __pyx_pw_8csiquant_10quantities_8Quantity_55__bool__, /*nb_nonzero*/
  __pyx_pw_8csiquant_10quantities_8Quantity_45__invert__, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_coerce*/
  #endif
  __pyx_pw_8csiquant_10quantities_8Quantity_59__int__, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  __pyx_pw_8csiquant_10quantities_8Quantity_59__int__, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  __pyx_pw_8csiquant_10quantities_8Quantity_57__float__, /*nb_float*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  __pyx_pw_8csiquant_10quantities_8Quantity_39__truediv__, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  0, /*nb_index*/
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_matrix_multiply*/
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_inplace_matrix_multiply*/
  #endif
};

static PyTypeObject __pyx_type_8csiquant_10quantities_Quantity = {
  PyVarObject_HEAD_INIT(0, 0)
  "csiquant.quantities.Quantity", /*tp_name*/
  sizeof(struct __pyx_obj_8csiquant_10quantities_Quantity), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8csiquant_10quantities_Quantity, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_8csiquant_10quantities_8Quantity_63__repr__, /*tp_repr*/
  &__pyx_tp_as_number_Quantity, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  __pyx_pw_8csiquant_10quantities_8Quantity_61__hash__, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_tp_richcompare_8csiquant_10quantities_Quantity, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8csiquant_10quantities_Quantity, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8csiquant_10quantities_Quantity, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8csiquant_10quantities_8Quantity_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8csiquant_10quantities_Quantity, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_8csiquant_10quantities___pyx_scope_struct__quantities *__pyx_freelist_8csiquant_10quantities___pyx_scope_struct__quantities[8];
static int __pyx_freecount_8csiquant_10quantities___pyx_scope_struct__quantities = 0;

static PyObject *__pyx_tp_new_8csiquant_10quantities___pyx_scope_struct__quantities(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_8csiquant_10quantities___pyx_scope_struct__quantities > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_8csiquant_10quantities___pyx_scope_struct__quantities)))) {
    o = (PyObject*)__pyx_freelist_8csiquant_10quantities___pyx_scope_struct__quantities[--__pyx_freecount_8csiquant_10quantities___pyx_scope_struct__quantities];
    memset(o, 0, sizeof(struct __pyx_obj_8csiquant_10quantities___pyx_scope_struct__quantities));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8csiquant_10quantities___pyx_scope_struct__quantities(PyObject *o) {
  struct __pyx_obj_8csiquant_10quantities___pyx_scope_struct__quantities *p = (struct __pyx_obj_8csiquant_10quantities___pyx_scope_struct__quantities *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_iterable);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_value);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_8csiquant_10quantities___pyx_scope_struct__quantities < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_8csiquant_10quantities___pyx_scope_struct__quantities)))) {
    __pyx_freelist_8csiquant_10quantities___pyx_scope_struct__quantities[__pyx_freecount_8csiquant_10quantities___pyx_scope_struct__quantities++] = ((struct __pyx_obj_8csiquant_10quantities___pyx_scope_struct__quantities *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_8csiquant_10quantities___pyx_scope_struct__quantities(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8csiquant_10quantities___pyx_scope_struct__quantities *p = (struct __pyx_obj_8csiquant_10quantities___pyx_scope_struct__quantities *)o;
  if (p->__pyx_v_iterable) {
    e = (*v)(p->__pyx_v_iterable, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_value) {
    e = (*v)(p->__pyx_v_value, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_8csiquant_10quantities___pyx_scope_struct__quantities = {
  PyVarObject_HEAD_INIT(0, 0)
  "csiquant.quantities.__pyx_scope_struct__quantities", /*tp_name*/
  sizeof(struct __pyx_obj_8csiquant_10quantities___pyx_scope_struct__quantities), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8csiquant_10quantities___pyx_scope_struct__quantities, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8csiquant_10quantities___pyx_scope_struct__quantities, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8csiquant_10quantities___pyx_scope_struct__quantities, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_8csiquant_10quantities___pyx_scope_struct_1_values *__pyx_freelist_8csiquant_10quantities___pyx_scope_struct_1_values[8];
static int __pyx_freecount_8csiquant_10quantities___pyx_scope_struct_1_values = 0;

static PyObject *__pyx_tp_new_8csiquant_10quantities___pyx_scope_struct_1_values(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_8csiquant_10quantities___pyx_scope_struct_1_values > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_8csiquant_10quantities___pyx_scope_struct_1_values)))) {
    o = (PyObject*)__pyx_freelist_8csiquant_10quantities___pyx_scope_struct_1_values[--__pyx_freecount_8csiquant_10quantities___pyx_scope_struct_1_values];
    memset(o, 0, sizeof(struct __pyx_obj_8csiquant_10quantities___pyx_scope_struct_1_values));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8csiquant_10quantities___pyx_scope_struct_1_values(PyObject *o) {
  struct __pyx_obj_8csiquant_10quantities___pyx_scope_struct_1_values *p = (struct __pyx_obj_8csiquant_10quantities___pyx_scope_struct_1_values *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_iterable);
  Py_CLEAR(p->__pyx_v_quantity);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_8csiquant_10quantities___pyx_scope_struct_1_values < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_8csiquant_10quantities___pyx_scope_struct_1_values)))) {
    __pyx_freelist_8csiquant_10quantities___pyx_scope_struct_1_values[__pyx_freecount_8csiquant_10quantities___pyx_scope_struct_1_values++] = ((struct __pyx_obj_8csiquant_10quantities___pyx_scope_struct_1_values *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_8csiquant_10quantities___pyx_scope_struct_1_values(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8csiquant_10quantities___pyx_scope_struct_1_values *p = (struct __pyx_obj_8csiquant_10quantities___pyx_scope_struct_1_values *)o;
  if (p->__pyx_v_iterable) {
    e = (*v)(p->__pyx_v_iterable, a); if (e) return e;
  }
  if (p->__pyx_v_quantity) {
    e = (*v)(p->__pyx_v_quantity, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_8csiquant_10quantities___pyx_scope_struct_1_values = {
  PyVarObject_HEAD_INIT(0, 0)
  "csiquant.quantities.__pyx_scope_struct_1_values", /*tp_name*/
  sizeof(struct __pyx_obj_8csiquant_10quantities___pyx_scope_struct_1_values), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8csiquant_10quantities___pyx_scope_struct_1_values, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8csiquant_10quantities___pyx_scope_struct_1_values, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8csiquant_10quantities___pyx_scope_struct_1_values, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_quantities(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_quantities},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "quantities",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_u_Expected_Dimensions, __pyx_k_Expected_Dimensions, sizeof(__pyx_k_Expected_Dimensions), 0, 1, 0, 0},
  {&__pyx_kp_u_Expected_Quantity_Number, __pyx_k_Expected_Quantity_Number, sizeof(__pyx_k_Expected_Quantity_Number), 0, 1, 0, 0},
  {&__pyx_kp_u_Expected_SIUnit_Number, __pyx_k_Expected_SIUnit_Number, sizeof(__pyx_k_Expected_SIUnit_Number), 0, 1, 0, 0},
  {&__pyx_n_s_NotImplemented, __pyx_k_NotImplemented, sizeof(__pyx_k_NotImplemented), 0, 0, 1, 1},
  {&__pyx_kp_s_Pickling_of_struct_members_such, __pyx_k_Pickling_of_struct_members_such, sizeof(__pyx_k_Pickling_of_struct_members_such), 0, 0, 1, 0},
  {&__pyx_kp_u_Quantity, __pyx_k_Quantity, sizeof(__pyx_k_Quantity), 0, 1, 0, 0},
  {&__pyx_n_s_Quantity_2, __pyx_k_Quantity_2, sizeof(__pyx_k_Quantity_2), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_SCALE_RTOL, __pyx_k_SCALE_RTOL, sizeof(__pyx_k_SCALE_RTOL), 0, 0, 1, 1},
  {&__pyx_kp_u_SIUnit, __pyx_k_SIUnit, sizeof(__pyx_k_SIUnit), 0, 1, 0, 0},
  {&__pyx_n_s_SIUnit_2, __pyx_k_SIUnit_2, sizeof(__pyx_k_SIUnit_2), 0, 0, 1, 1},
  {&__pyx_n_s_SIUnit_quantities, __pyx_k_SIUnit_quantities, sizeof(__pyx_k_SIUnit_quantities), 0, 0, 1, 1},
  {&__pyx_n_s_SIUnit_values, __pyx_k_SIUnit_values, sizeof(__pyx_k_SIUnit_values), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_Unit, __pyx_k_Unit, sizeof(__pyx_k_Unit), 0, 0, 1, 1},
  {&__pyx_kp_s_Unknow_Error_Occurred_i, __pyx_k_Unknow_Error_Occurred_i, sizeof(__pyx_k_Unknow_Error_Occurred_i), 0, 0, 1, 0},
  {&__pyx_kp_s_Unknown_Error_Occurred_d, __pyx_k_Unknown_Error_Occurred_d, sizeof(__pyx_k_Unknown_Error_Occurred_d), 0, 0, 1, 0},
  {&__pyx_kp_s_Unknown_Error_Occurred_i, __pyx_k_Unknown_Error_Occurred_i, sizeof(__pyx_k_Unknown_Error_Occurred_i), 0, 0, 1, 0},
  {&__pyx_kp_u_Unknown_Error_Occurred_i, __pyx_k_Unknown_Error_Occurred_i, sizeof(__pyx_k_Unknown_Error_Occurred_i), 0, 1, 0, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_ZeroDivisionError, __pyx_k_ZeroDivisionError, sizeof(__pyx_k_ZeroDivisionError), 0, 0, 1, 1},
  {&__pyx_n_s__18, __pyx_k__18, sizeof(__pyx_k__18), 0, 0, 1, 1},
  {&__pyx_kp_u__8, __pyx_k__8, sizeof(__pyx_k__8), 0, 1, 0, 0},
  {&__pyx_kp_u__9, __pyx_k__9, sizeof(__pyx_k__9), 0, 1, 0, 0},
  {&__pyx_n_s_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 1},
  {&__pyx_n_s_a_approx, __pyx_k_a_approx, sizeof(__pyx_k_a_approx), 0, 0, 1, 1},
  {&__pyx_n_s_approx, __pyx_k_approx, sizeof(__pyx_k_approx), 0, 0, 1, 1},
  {&__pyx_kp_u_arg_scale_must_be_greater_than_0, __pyx_k_arg_scale_must_be_greater_than_0, sizeof(__pyx_k_arg_scale_must_be_greater_than_0), 0, 1, 0, 0},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_atol, __pyx_k_atol, sizeof(__pyx_k_atol), 0, 0, 1, 1},
  {&__pyx_n_s_call, __pyx_k_call, sizeof(__pyx_k_call), 0, 0, 1, 1},
  {&__pyx_n_s_cd, __pyx_k_cd, sizeof(__pyx_k_cd), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_cmp, __pyx_k_cmp, sizeof(__pyx_k_cmp), 0, 0, 1, 1},
  {&__pyx_n_s_compatible, __pyx_k_compatible, sizeof(__pyx_k_compatible), 0, 0, 1, 1},
  {&__pyx_n_s_csiquant_dimensions, __pyx_k_csiquant_dimensions, sizeof(__pyx_k_csiquant_dimensions), 0, 0, 1, 1},
  {&__pyx_n_s_csiquant_quantities, __pyx_k_csiquant_quantities, sizeof(__pyx_k_csiquant_quantities), 0, 0, 1, 1},
  {&__pyx_kp_s_csiquant_quantities_pyx, __pyx_k_csiquant_quantities_pyx, sizeof(__pyx_k_csiquant_quantities_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_cvt_to, __pyx_k_cvt_to, sizeof(__pyx_k_cvt_to), 0, 0, 1, 1},
  {&__pyx_n_s_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 0, 1, 1},
  {&__pyx_n_s_demote, __pyx_k_demote, sizeof(__pyx_k_demote), 0, 0, 1, 1},
  {&__pyx_n_s_dimensionless_t, __pyx_k_dimensionless_t, sizeof(__pyx_k_dimensionless_t), 0, 0, 1, 1},
  {&__pyx_n_s_dimensions, __pyx_k_dimensions, sizeof(__pyx_k_dimensions), 0, 0, 1, 1},
  {&__pyx_n_s_dims, __pyx_k_dims, sizeof(__pyx_k_dims), 0, 0, 1, 1},
  {&__pyx_n_s_exp, __pyx_k_exp, sizeof(__pyx_k_exp), 0, 0, 1, 1},
  {&__pyx_n_u_f, __pyx_k_f, sizeof(__pyx_k_f), 0, 1, 0, 1},
  {&__pyx_n_s_get_as, __pyx_k_get_as, sizeof(__pyx_k_get_as), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_is_of, __pyx_k_is_of, sizeof(__pyx_k_is_of), 0, 0, 1, 1},
  {&__pyx_n_s_k, __pyx_k_k, sizeof(__pyx_k_k), 0, 0, 1, 1},
  {&__pyx_n_s_kg, __pyx_k_kg, sizeof(__pyx_k_kg), 0, 0, 1, 1},
  {&__pyx_n_s_m, __pyx_k_m, sizeof(__pyx_k_m), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_memodict, __pyx_k_memodict, sizeof(__pyx_k_memodict), 0, 0, 1, 1},
  {&__pyx_n_s_mol, __pyx_k_mol, sizeof(__pyx_k_mol), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_other, __pyx_k_other, sizeof(__pyx_k_other), 0, 0, 1, 1},
  {&__pyx_n_s_promote, __pyx_k_promote, sizeof(__pyx_k_promote), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_q_approx, __pyx_k_q_approx, sizeof(__pyx_k_q_approx), 0, 0, 1, 1},
  {&__pyx_n_s_qtol, __pyx_k_qtol, sizeof(__pyx_k_qtol), 0, 0, 1, 1},
  {&__pyx_n_s_quantities, __pyx_k_quantities, sizeof(__pyx_k_quantities), 0, 0, 1, 1},
  {&__pyx_n_s_quantity, __pyx_k_quantity, sizeof(__pyx_k_quantity), 0, 0, 1, 1},
  {&__pyx_n_s_r_approx, __pyx_k_r_approx, sizeof(__pyx_k_r_approx), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_round_to, __pyx_k_round_to, sizeof(__pyx_k_round_to), 0, 0, 1, 1},
  {&__pyx_n_s_rtol, __pyx_k_rtol, sizeof(__pyx_k_rtol), 0, 0, 1, 1},
  {&__pyx_n_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
  {&__pyx_n_s_scale, __pyx_k_scale, sizeof(__pyx_k_scale), 0, 0, 1, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_staticmethod, __pyx_k_staticmethod, sizeof(__pyx_k_staticmethod), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_kp_u_unit_mismatch, __pyx_k_unit_mismatch, sizeof(__pyx_k_unit_mismatch), 0, 1, 0, 0},
  {&__pyx_kp_u_unit_mismatch_lhs, __pyx_k_unit_mismatch_lhs, sizeof(__pyx_k_unit_mismatch_lhs), 0, 1, 0, 0},
  {&__pyx_kp_u_unit_mismatch_rhs, __pyx_k_unit_mismatch_rhs, sizeof(__pyx_k_unit_mismatch_rhs), 0, 1, 0, 0},
  {&__pyx_n_s_units, __pyx_k_units, sizeof(__pyx_k_units), 0, 0, 1, 1},
  {&__pyx_kp_u_units_mismatch, __pyx_k_units_mismatch, sizeof(__pyx_k_units_mismatch), 0, 1, 0, 0},
  {&__pyx_n_s_values, __pyx_k_values, sizeof(__pyx_k_values), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(0, 49, __pyx_L1_error)
  __pyx_builtin_ZeroDivisionError = __Pyx_GetBuiltinName(__pyx_n_s_ZeroDivisionError); if (!__pyx_builtin_ZeroDivisionError) __PYX_ERR(0, 68, __pyx_L1_error)
  __pyx_builtin_staticmethod = __Pyx_GetBuiltinName(__pyx_n_s_staticmethod); if (!__pyx_builtin_staticmethod) __PYX_ERR(1, 14, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(1, 58, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 60, __pyx_L1_error)
  __pyx_builtin_NotImplemented = __Pyx_GetBuiltinName(__pyx_n_s_NotImplemented); if (!__pyx_builtin_NotImplemented) __PYX_ERR(1, 114, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(3, 45, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "csiquant/quantities.pyx":58
 *     def __init__(SIUnit self, double scale=1.0, d.Dimensions dims=d.dimensionless_t):
 *         if scale <= 0:
 *             raise ValueError("arg 'scale' must be greater than 0")             # <<<<<<<<<<<<<<
 *         if type(dims) is not d.Dimensions:
 *             raise TypeError("Expected Dimensions")
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_u_arg_scale_must_be_greater_than_0); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(1, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "csiquant/quantities.pyx":60
 *             raise ValueError("arg 'scale' must be greater than 0")
 *         if type(dims) is not d.Dimensions:
 *             raise TypeError("Expected Dimensions")             # <<<<<<<<<<<<<<
 *         self.data.scale = scale
 *         self.data.dimensions = dims.data
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_u_Expected_Dimensions); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(1, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "csiquant/quantities.pyx":96
 * 
 *         if error_code == c.DimensionMismatch:
 *             raise ValueError("unit mismatch")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_u_unit_mismatch); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(1, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "csiquant/quantities.pyx":142
 * 
 *         if error_code == c.DimensionMismatch:
 *             raise ValueError("units mismatch")             # <<<<<<<<<<<<<<
 * 
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_u_units_mismatch); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(1, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "csiquant/quantities.pyx":195
 *     def __pow__(lhs, rhs, modulo):
 *         if type(lhs) is not SIUnit:
 *             raise TypeError("Expected SIUnit ** Number")             # <<<<<<<<<<<<<<
 *         return lhs.exp(rhs)
 * 
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_u_Expected_SIUnit_Number); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(1, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("Pickling of struct members such as self.data must be explicitly requested with @auto_pickle(True)")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("Pickling of struct members such as self.data must be explicitly requested with @auto_pickle(True)")
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_Pickling_of_struct_members_such); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "(tree fragment)":4
 *     raise TypeError("Pickling of struct members such as self.data must be explicitly requested with @auto_pickle(True)")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("Pickling of struct members such as self.data must be explicitly requested with @auto_pickle(True)")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_Pickling_of_struct_members_such); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "csiquant/quantities.pyx":385
 * 
 *         if error_code1 == c.DimensionMismatch:
 *             raise ValueError("unit mismatch (lhs)")             # <<<<<<<<<<<<<<
 *         if error_code2 == c.DimensionMismatch:
 *             raise ValueError("unit mismatch (rhs)")
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_u_unit_mismatch_lhs); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(1, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "csiquant/quantities.pyx":387
 *             raise ValueError("unit mismatch (lhs)")
 *         if error_code2 == c.DimensionMismatch:
 *             raise ValueError("unit mismatch (rhs)")             # <<<<<<<<<<<<<<
 * 
 *         raise RuntimeError("Unknown Error Occurred: %i" % (error_code1 | error_code2))
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_u_unit_mismatch_rhs); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(1, 387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "csiquant/quantities.pyx":451
 *     def __pow__(lhs, rhs, modulo):
 *         if type(lhs) is not Quantity:
 *             raise TypeError("Expected Quantity ** Number")             # <<<<<<<<<<<<<<
 *         return lhs.exp(rhs)
 * 
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_u_Expected_Quantity_Number); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(1, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("Pickling of struct members such as self.data must be explicitly requested with @auto_pickle(True)")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("Pickling of struct members such as self.data must be explicitly requested with @auto_pickle(True)")
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_Pickling_of_struct_members_such); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "(tree fragment)":4
 *     raise TypeError("Pickling of struct members such as self.data must be explicitly requested with @auto_pickle(True)")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("Pickling of struct members such as self.data must be explicitly requested with @auto_pickle(True)")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_Pickling_of_struct_members_such); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "csiquant/quantities.pyx":15
 * 
 *     @staticmethod
 *     def Unit(scale=1, kg=0, m=0, s=0, k=0, a=0, mol=0, cd=0):             # <<<<<<<<<<<<<<
 *         return SIUnit(scale, d.Dimensions(kg, m, s, k, a, mol, cd))
 * 
 */
  __pyx_tuple__19 = PyTuple_Pack(8, __pyx_n_s_scale, __pyx_n_s_kg, __pyx_n_s_m, __pyx_n_s_s, __pyx_n_s_k, __pyx_n_s_a, __pyx_n_s_mol, __pyx_n_s_cd); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(1, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);
  __pyx_codeobj__20 = (PyObject*)__Pyx_PyCode_New(8, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_csiquant_quantities_pyx, __pyx_n_s_Unit, 15, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__20)) __PYX_ERR(1, 15, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(1, 1, __pyx_L1_error);
  __pyx_float_1eneg_9 = PyFloat_FromDouble(1e-9); if (unlikely(!__pyx_float_1eneg_9)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_8csiquant_10quantities_SIUnit = &__pyx_vtable_8csiquant_10quantities_SIUnit;
  __pyx_vtable_8csiquant_10quantities_SIUnit.is_of = (PyObject *(*)(struct __pyx_obj_8csiquant_10quantities_SIUnit *, struct __pyx_obj_8csiquant_10dimensions_Dimensions *, int __pyx_skip_dispatch))__pyx_f_8csiquant_10quantities_6SIUnit_is_of;
  __pyx_vtable_8csiquant_10quantities_SIUnit.promote = (PyObject *(*)(struct __pyx_obj_8csiquant_10quantities_SIUnit *, double, int __pyx_skip_dispatch))__pyx_f_8csiquant_10quantities_6SIUnit_promote;
  __pyx_vtable_8csiquant_10quantities_SIUnit.demote = (PyObject *(*)(struct __pyx_obj_8csiquant_10quantities_SIUnit *, struct __pyx_obj_8csiquant_10quantities_Quantity *, int __pyx_skip_dispatch))__pyx_f_8csiquant_10quantities_6SIUnit_demote;
  __pyx_vtable_8csiquant_10quantities_SIUnit.compatible = (int (*)(struct __pyx_obj_8csiquant_10quantities_SIUnit *, struct __pyx_obj_8csiquant_10quantities_SIUnit *, int __pyx_skip_dispatch))__pyx_f_8csiquant_10quantities_6SIUnit_compatible;
  __pyx_vtable_8csiquant_10quantities_SIUnit.approx = (PyObject *(*)(struct __pyx_obj_8csiquant_10quantities_SIUnit *, struct __pyx_obj_8csiquant_10quantities_SIUnit *, int __pyx_skip_dispatch, struct __pyx_opt_args_8csiquant_10quantities_6SIUnit_approx *__pyx_optional_args))__pyx_f_8csiquant_10quantities_6SIUnit_approx;
  __pyx_vtable_8csiquant_10quantities_SIUnit.cmp = (PyObject *(*)(struct __pyx_obj_8csiquant_10quantities_SIUnit *, struct __pyx_obj_8csiquant_10quantities_SIUnit *, int __pyx_skip_dispatch))__pyx_f_8csiquant_10quantities_6SIUnit_cmp;
  __pyx_vtable_8csiquant_10quantities_SIUnit.exp = (struct __pyx_obj_8csiquant_10quantities_SIUnit *(*)(struct __pyx_obj_8csiquant_10quantities_SIUnit *, double, int __pyx_skip_dispatch))__pyx_f_8csiquant_10quantities_6SIUnit_exp;
  if (PyType_Ready(&__pyx_type_8csiquant_10quantities_SIUnit) < 0) __PYX_ERR(1, 10, __pyx_L1_error)
  __pyx_type_8csiquant_10quantities_SIUnit.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8csiquant_10quantities_SIUnit.tp_dictoffset && __pyx_type_8csiquant_10quantities_SIUnit.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8csiquant_10quantities_SIUnit.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_8csiquant_10quantities_SIUnit.tp_dict, __pyx_vtabptr_8csiquant_10quantities_SIUnit) < 0) __PYX_ERR(1, 10, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_SIUnit_2, (PyObject *)&__pyx_type_8csiquant_10quantities_SIUnit) < 0) __PYX_ERR(1, 10, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8csiquant_10quantities_SIUnit) < 0) __PYX_ERR(1, 10, __pyx_L1_error)
  __pyx_ptype_8csiquant_10quantities_SIUnit = &__pyx_type_8csiquant_10quantities_SIUnit;
  __pyx_vtabptr_8csiquant_10quantities_Quantity = &__pyx_vtable_8csiquant_10quantities_Quantity;
  __pyx_vtable_8csiquant_10quantities_Quantity.is_of = (PyObject *(*)(struct __pyx_obj_8csiquant_10quantities_Quantity *, struct __pyx_obj_8csiquant_10dimensions_Dimensions *, int __pyx_skip_dispatch))__pyx_f_8csiquant_10quantities_8Quantity_is_of;
  __pyx_vtable_8csiquant_10quantities_Quantity.get_as = (PyObject *(*)(struct __pyx_obj_8csiquant_10quantities_Quantity *, struct __pyx_obj_8csiquant_10quantities_SIUnit *, int __pyx_skip_dispatch))__pyx_f_8csiquant_10quantities_8Quantity_get_as;
  __pyx_vtable_8csiquant_10quantities_Quantity.cvt_to = (struct __pyx_obj_8csiquant_10quantities_Quantity *(*)(struct __pyx_obj_8csiquant_10quantities_Quantity *, struct __pyx_obj_8csiquant_10quantities_SIUnit *, int __pyx_skip_dispatch))__pyx_f_8csiquant_10quantities_8Quantity_cvt_to;
  __pyx_vtable_8csiquant_10quantities_Quantity.round_to = (struct __pyx_obj_8csiquant_10quantities_Quantity *(*)(struct __pyx_obj_8csiquant_10quantities_Quantity *, struct __pyx_obj_8csiquant_10quantities_SIUnit *, int __pyx_skip_dispatch))__pyx_f_8csiquant_10quantities_8Quantity_round_to;
  __pyx_vtable_8csiquant_10quantities_Quantity.r_approx = (PyObject *(*)(struct __pyx_obj_8csiquant_10quantities_Quantity *, struct __pyx_obj_8csiquant_10quantities_Quantity *, int __pyx_skip_dispatch, struct __pyx_opt_args_8csiquant_10quantities_8Quantity_r_approx *__pyx_optional_args))__pyx_f_8csiquant_10quantities_8Quantity_r_approx;
  __pyx_vtable_8csiquant_10quantities_Quantity.a_approx = (PyObject *(*)(struct __pyx_obj_8csiquant_10quantities_Quantity *, struct __pyx_obj_8csiquant_10quantities_Quantity *, int __pyx_skip_dispatch, struct __pyx_opt_args_8csiquant_10quantities_8Quantity_a_approx *__pyx_optional_args))__pyx_f_8csiquant_10quantities_8Quantity_a_approx;
  __pyx_vtable_8csiquant_10quantities_Quantity.q_approx = (PyObject *(*)(struct __pyx_obj_8csiquant_10quantities_Quantity *, struct __pyx_obj_8csiquant_10quantities_Quantity *, struct __pyx_obj_8csiquant_10quantities_Quantity *, int __pyx_skip_dispatch))__pyx_f_8csiquant_10quantities_8Quantity_q_approx;
  __pyx_vtable_8csiquant_10quantities_Quantity.compatible = (int (*)(struct __pyx_obj_8csiquant_10quantities_Quantity *, struct __pyx_obj_8csiquant_10quantities_Quantity *, int __pyx_skip_dispatch))__pyx_f_8csiquant_10quantities_8Quantity_compatible;
  __pyx_vtable_8csiquant_10quantities_Quantity.cmp = (PyObject *(*)(struct __pyx_obj_8csiquant_10quantities_Quantity *, struct __pyx_obj_8csiquant_10quantities_Quantity *, int __pyx_skip_dispatch))__pyx_f_8csiquant_10quantities_8Quantity_cmp;
  __pyx_vtable_8csiquant_10quantities_Quantity.exp = (struct __pyx_obj_8csiquant_10quantities_Quantity *(*)(struct __pyx_obj_8csiquant_10quantities_Quantity *, double, int __pyx_skip_dispatch))__pyx_f_8csiquant_10quantities_8Quantity_exp;
  if (PyType_Ready(&__pyx_type_8csiquant_10quantities_Quantity) < 0) __PYX_ERR(1, 220, __pyx_L1_error)
  __pyx_type_8csiquant_10quantities_Quantity.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8csiquant_10quantities_Quantity.tp_dictoffset && __pyx_type_8csiquant_10quantities_Quantity.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8csiquant_10quantities_Quantity.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_8csiquant_10quantities_Quantity.tp_dict, __pyx_vtabptr_8csiquant_10quantities_Quantity) < 0) __PYX_ERR(1, 220, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Quantity_2, (PyObject *)&__pyx_type_8csiquant_10quantities_Quantity) < 0) __PYX_ERR(1, 220, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8csiquant_10quantities_Quantity) < 0) __PYX_ERR(1, 220, __pyx_L1_error)
  __pyx_ptype_8csiquant_10quantities_Quantity = &__pyx_type_8csiquant_10quantities_Quantity;
  if (PyType_Ready(&__pyx_type_8csiquant_10quantities___pyx_scope_struct__quantities) < 0) __PYX_ERR(1, 74, __pyx_L1_error)
  __pyx_type_8csiquant_10quantities___pyx_scope_struct__quantities.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8csiquant_10quantities___pyx_scope_struct__quantities.tp_dictoffset && __pyx_type_8csiquant_10quantities___pyx_scope_struct__quantities.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8csiquant_10quantities___pyx_scope_struct__quantities.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_8csiquant_10quantities___pyx_scope_struct__quantities = &__pyx_type_8csiquant_10quantities___pyx_scope_struct__quantities;
  if (PyType_Ready(&__pyx_type_8csiquant_10quantities___pyx_scope_struct_1_values) < 0) __PYX_ERR(1, 78, __pyx_L1_error)
  __pyx_type_8csiquant_10quantities___pyx_scope_struct_1_values.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8csiquant_10quantities___pyx_scope_struct_1_values.tp_dictoffset && __pyx_type_8csiquant_10quantities___pyx_scope_struct_1_values.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8csiquant_10quantities___pyx_scope_struct_1_values.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_8csiquant_10quantities___pyx_scope_struct_1_values = &__pyx_type_8csiquant_10quantities___pyx_scope_struct_1_values;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule("csiquant.dimensions"); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_8csiquant_10dimensions_Dimensions = __Pyx_ImportType(__pyx_t_1, "csiquant.dimensions", "Dimensions", sizeof(struct __pyx_obj_8csiquant_10dimensions_Dimensions), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_8csiquant_10dimensions_Dimensions) __PYX_ERR(4, 3, __pyx_L1_error)
  __pyx_vtabptr_8csiquant_10dimensions_Dimensions = (struct __pyx_vtabstruct_8csiquant_10dimensions_Dimensions*)__Pyx_GetVtable(__pyx_ptype_8csiquant_10dimensions_Dimensions->tp_dict); if (unlikely(!__pyx_vtabptr_8csiquant_10dimensions_Dimensions)) __PYX_ERR(4, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initquantities(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initquantities(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_quantities(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_quantities(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_quantities(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'quantities' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_quantities(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(1, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("quantities", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(1, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(1, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_csiquant__quantities) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(1, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "csiquant.quantities")) {
      if (unlikely(PyDict_SetItemString(modules, "csiquant.quantities", __pyx_m) < 0)) __PYX_ERR(1, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() != 0)) goto __pyx_L1_error;
  if (unlikely(__Pyx_modinit_type_import_code() != 0)) goto __pyx_L1_error;
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif

  /* "csiquant/quantities.pyx":6
 * cimport csiquant.ctypes as c
 * cimport csiquant.dimensions as d
 * import csiquant.dimensions as d             # <<<<<<<<<<<<<<
 * 
 * from libc.math cimport round, fabs, fmax
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s__18);
  __Pyx_GIVEREF(__pyx_n_s__18);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s__18);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_csiquant_dimensions, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_d, __pyx_t_2) < 0) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "csiquant/quantities.pyx":12
 * cdef class SIUnit:
 * 
 *     SCALE_RTOL = 1e-9             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8csiquant_10quantities_SIUnit->tp_dict, __pyx_n_s_SCALE_RTOL, __pyx_float_1eneg_9) < 0) __PYX_ERR(1, 12, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_8csiquant_10quantities_SIUnit);

  /* "csiquant/quantities.pyx":15
 * 
 *     @staticmethod
 *     def Unit(scale=1, kg=0, m=0, s=0, k=0, a=0, mol=0, cd=0):             # <<<<<<<<<<<<<<
 *         return SIUnit(scale, d.Dimensions(kg, m, s, k, a, mol, cd))
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_8csiquant_10quantities_6SIUnit_1Unit, NULL, __pyx_n_s_csiquant_quantities); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8csiquant_10quantities_SIUnit->tp_dict, __pyx_n_s_Unit, __pyx_t_2) < 0) __PYX_ERR(1, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8csiquant_10quantities_SIUnit);

  /* "csiquant/quantities.pyx":14
 *     SCALE_RTOL = 1e-9
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def Unit(scale=1, kg=0, m=0, s=0, k=0, a=0, mol=0, cd=0):
 *         return SIUnit(scale, d.Dimensions(kg, m, s, k, a, mol, cd))
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_8csiquant_10quantities_SIUnit, __pyx_n_s_Unit); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8csiquant_10quantities_SIUnit->tp_dict, __pyx_n_s_Unit, __pyx_t_1) < 0) __PYX_ERR(1, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8csiquant_10quantities_SIUnit);

  /* "csiquant/quantities.pyx":56
 *         return self.data.dimensions.exponents[6]
 * 
 *     def __init__(SIUnit self, double scale=1.0, d.Dimensions dims=d.dimensionless_t):             # <<<<<<<<<<<<<<
 *         if scale <= 0:
 *             raise ValueError("arg 'scale' must be greater than 0")
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_d); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_dimensionless_t); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_8csiquant_10dimensions_Dimensions))))) __PYX_ERR(1, 56, __pyx_L1_error)
  __pyx_k_ = ((struct __pyx_obj_8csiquant_10dimensions_Dimensions *)__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "csiquant/quantities.pyx":101
 *         raise RuntimeError("Unknown Error Occurred: %i" % error_code)
 * 
 *     __call__ = quantities             # <<<<<<<<<<<<<<
 * 
 *     """
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_8csiquant_10quantities_SIUnit, __pyx_n_s_quantities); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8csiquant_10quantities_SIUnit->tp_dict, __pyx_n_s_call, __pyx_t_2) < 0) __PYX_ERR(1, 101, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_8csiquant_10quantities_SIUnit);

  /* "csiquant/quantities.pyx":210
 *         return self
 * 
 *     def __deepcopy__(self, memodict={}):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__7 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "csiquant/quantities.pyx":494
 *         return self
 * 
 *     def __deepcopy__(self, memodict={}):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__15 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "csiquant/quantities.pyx":1
 * #!python             # <<<<<<<<<<<<<<
 * #cython: language_level=3
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "carray.to_py":124
 * 
 * @cname("__Pyx_carray_to_tuple_double")
 * cdef inline tuple __Pyx_carray_to_tuple_double(base_type *v, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef object value
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init csiquant.quantities", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init csiquant.quantities");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* PyObjectFormat */
#if CYTHON_USE_UNICODE_WRITER
static PyObject* __Pyx_PyObject_Format(PyObject* obj, PyObject* format_spec) {
    int ret;
    _PyUnicodeWriter writer;
    if (likely(PyFloat_CheckExact(obj))) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x03040000
        _PyUnicodeWriter_Init(&writer, 0);
#else
        _PyUnicodeWriter_Init(&writer);
#endif
        ret = _PyFloat_FormatAdvancedWriter(
            &writer,
            obj,
            format_spec, 0, PyUnicode_GET_LENGTH(format_spec));
    } else if (likely(PyLong_CheckExact(obj))) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x03040000
        _PyUnicodeWriter_Init(&writer, 0);
#else
        _PyUnicodeWriter_Init(&writer);
#endif
        ret = _PyLong_FormatAdvancedWriter(
            &writer,
            obj,
            format_spec, 0, PyUnicode_GET_LENGTH(format_spec));
    } else {
        return PyObject_Format(obj, format_spec);
    }
    if (unlikely(ret == -1)) {
        _PyUnicodeWriter_Dealloc(&writer);
        return NULL;
    }
    return _PyUnicodeWriter_Finish(&writer);
}
#endif

/* PyObjectFormatAndDecref */
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f) {
    if (unlikely(!s)) return NULL;
    if (likely(PyUnicode_CheckExact(s))) return s;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyString_CheckExact(s))) {
        PyObject *result = PyUnicode_FromEncodedObject(s, NULL, "strict");
        Py_DECREF(s);
        return result;
    }
    #endif
    return __Pyx_PyObject_FormatAndDecref(s, f);
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f) {
    PyObject *result = PyObject_Format(s, f);
    Py_DECREF(s);
    return result;
}

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      CYTHON_UNUSED Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind;
    Py_ssize_t i, char_pos;
    void *result_udata;
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely(char_pos + ulength < 0))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + char_pos * result_ukind, udata, (size_t) (ulength * result_ukind));
        } else {
            #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    result_ulength++;
    value_count++;
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* PyIntCompare */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_FALSE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_FALSE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a == (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyIntFromDouble */
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE PyObject* __Pyx_PyInt_FromDouble(double value) {
    if (value >= (double)LONG_MIN && value <= (double)LONG_MAX) {
        return PyInt_FromLong((long)value);
    }
    return PyLong_FromDouble(value);
}
#endif

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto BAD;
            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto BAD;
            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto BAD;
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto BAD;
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto GOOD;
BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* GetNameInClass */
static PyObject *__Pyx_GetGlobalNameAfterAttributeLookup(PyObject *name) {
    PyObject *result;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    __Pyx_GetModuleGlobalNameUncached(result, name);
    return result;
}
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result) {
        result = __Pyx_GetGlobalNameAfterAttributeLookup(name);
    }
    return result;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum____pyx_t_8csiquant_6ctypes_Error(enum __pyx_t_8csiquant_6ctypes_Error value) {
    const enum __pyx_t_8csiquant_6ctypes_Error neg_one = (enum __pyx_t_8csiquant_6ctypes_Error) ((enum __pyx_t_8csiquant_6ctypes_Error) 0 - (enum __pyx_t_8csiquant_6ctypes_Error) 1), const_zero = (enum __pyx_t_8csiquant_6ctypes_Error) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum __pyx_t_8csiquant_6ctypes_Error) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum __pyx_t_8csiquant_6ctypes_Error) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum __pyx_t_8csiquant_6ctypes_Error) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum __pyx_t_8csiquant_6ctypes_Error) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum __pyx_t_8csiquant_6ctypes_Error) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum __pyx_t_8csiquant_6ctypes_Error),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) ((size_t) 0 - (size_t) 1), const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* FetchCommonType */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod1 */
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* CoroutineBase */
#include <structmember.h>
#include <frameobject.h>
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(CYTHON_UNUSED __pyx_CoroutineObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(CYTHON_UNUSED PyObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(CYTHON_UNUSED PyObject *gen, PyObject *value, CYTHON_UNUSED int closing) {
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_type) {
        #if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
        #else
        if (exc_state->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_state->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = tstate->frame;
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    self->is_running = 1;
    retval = self->body((PyObject *) self, tstate, value);
    self->is_running = 0;
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *exc_tb = exc_state->exc_traceback;
    if (likely(exc_tb)) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
#endif
    }
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(CYTHON_UNUSED PyObject* gen, PyObject *retval) {
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf, NULL);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, CYTHON_UNUSED PyObject *arg) {
    return __Pyx_Coroutine_Close(self);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = PyObject_CallObject(meth, args);
            } else {
                ret = PyObject_CallFunctionObjArgs(meth, typ, val, tb, NULL);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    self->ob_refcnt = 1;
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        self->ob_refcnt = refcnt;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
#ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
